// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/20/2023 13:19:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg PH6;
reg [7:0] PK;
reg RE_L;
reg WE_L;
// wires                                               
wire BufferEN;
wire FFCLK;

// assign statements (if any)                          
Lab4 i1 (
// port map - connection between master ports and signals/registers   
	.BufferEN(BufferEN),
	.FFCLK(FFCLK),
	.PH6(PH6),
	.PK(PK),
	.RE_L(RE_L),
	.WE_L(WE_L)
);
initial 
begin 
#350000 $finish;
end 

// PK[7]
initial
begin
	PK[7] = 1'b1;
	PK[7] = #80000 1'b0;
	PK[7] = #160000 1'b1;
end 

// PK[6]
initial
begin
	repeat(2)
	begin
		PK[6] = 1'b1;
		PK[6] = #80000 1'b0;
		# 80000;
	end
	PK[6] = 1'b1;
end 

// PH6
initial
begin
	repeat(4)
	begin
		PH6 = 1'b0;
		PH6 = #40000 1'b1;
		# 40000;
	end
	PH6 = 1'b0;
end 

// RE_L
initial
begin
	repeat(8)
	begin
		RE_L = 1'b0;
		RE_L = #20000 1'b1;
		# 20000;
	end
	RE_L = 1'b0;
	RE_L = #20000 1'b1;
end 

// WE_L
initial
begin
	repeat(17)
	begin
		WE_L = 1'b0;
		WE_L = #10000 1'b1;
		# 10000;
	end
	WE_L = 1'b0;
end 

// PK[5]
initial
begin
	PK[5] = 1'b0;
end 

// PK[4]
initial
begin
	PK[4] = 1'b0;
end 

// PK[3]
initial
begin
	PK[3] = 1'b0;
end 

// PK[2]
initial
begin
	PK[2] = 1'b0;
end 

// PK[1]
initial
begin
	PK[1] = 1'b0;
end 

// PK[0]
initial
begin
	PK[0] = 1'b0;
end 
endmodule

