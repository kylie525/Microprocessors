
AVRASM ver. 2.2.8  D:\School\Summer 2023\EEL4744\Atmel Studio\Lab4\Lab4\lab4_3a.asm Tue Jul 11 15:31:27 2023

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\XMEGAA_DFP\1.3.146\avrasm\inc\ATxmega128A1Udef.inc'
D:\School\Summer 2023\EEL4744\Atmel Studio\Lab4\Lab4\lab4_3a.asm(14): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\XMEGAA_DFP\1.3.146\avrasm\inc\ATxmega128a1udef.inc'
D:\School\Summer 2023\EEL4744\Atmel Studio\Lab4\Lab4\lab4_3a.asm(33): Including file 'D:\School\Summer 2023\EEL4744\Atmel Studio\Lab4\Lab4\sram_data_asm.txt'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\XMEGAA_DFP\1.3.146\avrasm\inc\ATxmega128A1Udef.inc'
D:\School\Summer 2023\EEL4744\Atmel Studio\Lab4\Lab4\lab4_3a.asm(14): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\XMEGAA_DFP\1.3.146\avrasm\inc\ATxmega128a1udef.inc'
D:\School\Summer 2023\EEL4744\Atmel Studio\Lab4\Lab4\lab4_3a.asm(33): Including file 'D:\School\Summer 2023\EEL4744\Atmel Studio\Lab4\Lab4\sram_data_asm.txt'
                                 
                                 ;************************************************************************
                                 
                                 
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : ATxmega128A1Udef.inc
                                 ;* Title             : Register/Bit Definitions for the ATxmega128A1U
                                 ;* Date              : Jan 01 2008
                                 ;* Version           : 1.00
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATxmega128A1U
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;*************************************************************************
                                 
                                 #ifndef _ATxmega128A1UDEF_INC_
                                 #define _ATxmega128A1UDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATxmega128A1U
                                 
                                 
                                 .equ	SIGNATURE_000 = 0x1E
                                 .equ	SIGNATURE_001 = 0x97
                                 .equ	SIGNATURE_002 = 0x4C
                                 
                                 #pragma AVRPART ADMIN PART_NAME ATxmega128A1U
                                 #pragma AVRPART CORE CORE_VERSION V3XJ
                                 
                                 
                                 ; ***** ABSOLUTE I/O REGISTER LOCATIONS **********************************
                                 
                                 
                                 ;***************************************************************************
                                 ;** GPIO - General Purpose IO Registers
                                 ;***************************************************************************
                                 	
                                 .equ GPIO_GPIOR0 = 0		// General Purpose IO Register 0
                                 .equ GPIO_GPIOR1 = 1		// General Purpose IO Register 1
                                 .equ GPIO_GPIOR2 = 2		// General Purpose IO Register 2
                                 .equ GPIO_GPIOR3 = 3		// General Purpose IO Register 3
                                 .equ GPIO_GPIOR4 = 4		// General Purpose IO Register 4
                                 .equ GPIO_GPIOR5 = 5		// General Purpose IO Register 5
                                 .equ GPIO_GPIOR6 = 6		// General Purpose IO Register 6
                                 .equ GPIO_GPIOR7 = 7		// General Purpose IO Register 7
                                 .equ GPIO_GPIOR8 = 8		// General Purpose IO Register 8
                                 .equ GPIO_GPIOR9 = 9		// General Purpose IO Register 9
                                 .equ GPIO_GPIORA = 10		// General Purpose IO Register 10
                                 .equ GPIO_GPIORB = 11		// General Purpose IO Register 11
                                 .equ GPIO_GPIORC = 12		// General Purpose IO Register 12
                                 .equ GPIO_GPIORD = 13		// General Purpose IO Register 13
                                 .equ GPIO_GPIORE = 14		// General Purpose IO Register 14
                                 .equ GPIO_GPIORF = 15		// General Purpose IO Register 15
                                 
                                 ;***************************************************************************
                                 ;** VPORT0 - Virtual Port 0
                                 ;***************************************************************************
                                 	
                                 .equ VPORT0_DIR = 16		// I/O Port Data Direction
                                 .equ VPORT0_OUT = 17		// I/O Port Output
                                 .equ VPORT0_IN = 18		// I/O Port Input
                                 .equ VPORT0_INTFLAGS = 19		// Interrupt Flag Register
                                 
                                 ;***************************************************************************
                                 ;** VPORT1 - Virtual Port 1
                                 ;***************************************************************************
                                 	
                                 .equ VPORT1_DIR = 20		// I/O Port Data Direction
                                 .equ VPORT1_OUT = 21		// I/O Port Output
                                 .equ VPORT1_IN = 22		// I/O Port Input
                                 .equ VPORT1_INTFLAGS = 23		// Interrupt Flag Register
                                 
                                 ;***************************************************************************
                                 ;** VPORT2 - Virtual Port 2
                                 ;***************************************************************************
                                 	
                                 .equ VPORT2_DIR = 24		// I/O Port Data Direction
                                 .equ VPORT2_OUT = 25		// I/O Port Output
                                 .equ VPORT2_IN = 26		// I/O Port Input
                                 .equ VPORT2_INTFLAGS = 27		// Interrupt Flag Register
                                 
                                 ;***************************************************************************
                                 ;** VPORT3 - Virtual Port 3
                                 ;***************************************************************************
                                 	
                                 .equ VPORT3_DIR = 28		// I/O Port Data Direction
                                 .equ VPORT3_OUT = 29		// I/O Port Output
                                 .equ VPORT3_IN = 30		// I/O Port Input
                                 .equ VPORT3_INTFLAGS = 31		// Interrupt Flag Register
                                 
                                 ;***************************************************************************
                                 ;** OCD - On-Chip Debug System
                                 ;***************************************************************************
                                 	
                                 .equ OCD_OCDR0 = 46		// OCD Register 0
                                 .equ OCD_OCDR1 = 47		// OCD Register 1
                                 
                                 ;***************************************************************************
                                 ;** CPU - CPU Registers
                                 ;***************************************************************************
                                 	
                                 .equ CPU_CCP = 52		// Configuration Change Protection
                                 .equ CPU_RAMPD = 56		// Ramp D
                                 .equ CPU_RAMPX = 57		// Ramp X
                                 .equ CPU_RAMPY = 58		// Ramp Y
                                 .equ CPU_RAMPZ = 59		// Ramp Z
                                 .equ CPU_EIND = 60		// Extended Indirect Jump
                                 .equ CPU_SPL = 61		// Stack Pointer Low
                                 .equ CPU_SPH = 62		// Stack Pointer High
                                 .equ CPU_SREG = 63		// Status Register
                                 
                                 ;***************************************************************************
                                 ;** CLK - Clock System
                                 ;***************************************************************************
                                 	
                                 .equ CLK_CTRL = 64		// Control Register
                                 .equ CLK_PSCTRL = 65		// Prescaler Control Register
                                 .equ CLK_LOCK = 66		// Lock register
                                 .equ CLK_RTCCTRL = 67		// RTC Control Register
                                 .equ CLK_USBCTRL = 68		// USB Control Register
                                 
                                 ;***************************************************************************
                                 ;** SLEEP - Sleep Controller
                                 ;***************************************************************************
                                 	
                                 .equ SLEEP_CTRL = 72		// Control Register
                                 
                                 ;***************************************************************************
                                 ;** OSC - Oscillator Control
                                 ;***************************************************************************
                                 	
                                 .equ OSC_CTRL = 80		// Control Register
                                 .equ OSC_STATUS = 81		// Status Register
                                 .equ OSC_XOSCCTRL = 82		// External Oscillator Control Register
                                 .equ OSC_XOSCFAIL = 83		// Oscillator Failure Detection Register
                                 .equ OSC_RC32KCAL = 84		// 32.768 kHz Internal Oscillator Calibration Register
                                 .equ OSC_PLLCTRL = 85		// PLL Control Register
                                 .equ OSC_DFLLCTRL = 86		// DFLL Control Register
                                 
                                 ;***************************************************************************
                                 ;** DFLLRC32M - DFLL for 32MHz RC Oscillator
                                 ;***************************************************************************
                                 	
                                 .equ DFLLRC32M_CTRL = 96		// Control Register
                                 .equ DFLLRC32M_CALA = 98		// Calibration Register A
                                 .equ DFLLRC32M_CALB = 99		// Calibration Register B
                                 .equ DFLLRC32M_COMP0 = 100		// Oscillator Compare Register 0
                                 .equ DFLLRC32M_COMP1 = 101		// Oscillator Compare Register 1
                                 .equ DFLLRC32M_COMP2 = 102		// Oscillator Compare Register 2
                                 
                                 ;***************************************************************************
                                 ;** DFLLRC2M - DFLL for 2MHz RC Oscillator
                                 ;***************************************************************************
                                 	
                                 .equ DFLLRC2M_CTRL = 104		// Control Register
                                 .equ DFLLRC2M_CALA = 106		// Calibration Register A
                                 .equ DFLLRC2M_CALB = 107		// Calibration Register B
                                 .equ DFLLRC2M_COMP0 = 108		// Oscillator Compare Register 0
                                 .equ DFLLRC2M_COMP1 = 109		// Oscillator Compare Register 1
                                 .equ DFLLRC2M_COMP2 = 110		// Oscillator Compare Register 2
                                 
                                 ;***************************************************************************
                                 ;** PR - Power Reduction
                                 ;***************************************************************************
                                 	
                                 .equ PR_PRGEN = 112		// General Power Reduction
                                 .equ PR_PRPA = 113		// Power Reduction Port A
                                 .equ PR_PRPB = 114		// Power Reduction Port B
                                 .equ PR_PRPC = 115		// Power Reduction Port C
                                 .equ PR_PRPD = 116		// Power Reduction Port D
                                 .equ PR_PRPE = 117		// Power Reduction Port E
                                 .equ PR_PRPF = 118		// Power Reduction Port F
                                 
                                 ;***************************************************************************
                                 ;** RST - Reset Controller
                                 ;***************************************************************************
                                 	
                                 .equ RST_STATUS = 120		// Status Register
                                 .equ RST_CTRL = 121		// Control Register
                                 
                                 ;***************************************************************************
                                 ;** WDT - Watch-Dog Timer
                                 ;***************************************************************************
                                 	
                                 .equ WDT_CTRL = 128		// Control
                                 .equ WDT_WINCTRL = 129		// Windowed Mode Control
                                 .equ WDT_STATUS = 130		// Status
                                 
                                 ;***************************************************************************
                                 ;** MCU - MCU Control
                                 ;***************************************************************************
                                 	
                                 .equ MCU_DEVID0 = 144		// Device ID byte 0
                                 .equ MCU_DEVID1 = 145		// Device ID byte 1
                                 .equ MCU_DEVID2 = 146		// Device ID byte 2
                                 .equ MCU_REVID = 147		// Revision ID
                                 .equ MCU_JTAGUID = 148		// JTAG User ID
                                 .equ MCU_MCUCR = 150		// MCU Control
                                 .equ MCU_ANAINIT = 151		// Analog Startup Delay
                                 .equ MCU_EVSYSLOCK = 152		// Event System Lock
                                 .equ MCU_AWEXLOCK = 153		// AWEX Lock
                                 
                                 ;***************************************************************************
                                 ;** PMIC - Programmable Interrupt Controller
                                 ;***************************************************************************
                                 	
                                 .equ PMIC_STATUS = 160		// Status Register
                                 .equ PMIC_INTPRI = 161		// Interrupt Priority
                                 .equ PMIC_CTRL = 162		// Control Register
                                 
                                 ;***************************************************************************
                                 ;** PORTCFG - Port Configuration
                                 ;***************************************************************************
                                 	
                                 .equ PORTCFG_MPCMASK = 176		// Multi-pin Configuration Mask
                                 .equ PORTCFG_VPCTRLA = 178		// Virtual Port Control Register A
                                 .equ PORTCFG_VPCTRLB = 179		// Virtual Port Control Register B
                                 .equ PORTCFG_CLKEVOUT = 180		// Clock and Event Out Register
                                 .equ PORTCFG_EBIOUT = 181       // EBI Output register
                                 .equ PORTCFG_EVOUTSEL = 182		// Event Output Select
                                 
                                 ;***************************************************************************
                                 ;** AES - AES Crypto Module
                                 ;***************************************************************************
                                 	
                                 .equ AES_CTRL = 192		// AES Control Register
                                 .equ AES_STATUS = 193		// AES Status Register
                                 .equ AES_STATE = 194		// AES State Register
                                 .equ AES_KEY = 195		// AES Key Register
                                 .equ AES_INTCTRL = 196		// AES Interrupt Control Register
                                 
                                 ;***************************************************************************
                                 ;** CRC - CRC Module
                                 ;***************************************************************************
                                 	
                                 .equ CRC_CTRL = 208		// Control Register
                                 .equ CRC_STATUS = 209		// Status Register
                                 .equ CRC_DATAIN = 211		// Data Input
                                 .equ CRC_CHECKSUM0 = 212		// Checksum byte 0
                                 .equ CRC_CHECKSUM1 = 213		// Checksum byte 1
                                 .equ CRC_CHECKSUM2 = 214		// Checksum byte 2
                                 .equ CRC_CHECKSUM3 = 215		// Checksum byte 3
                                 
                                 ;***************************************************************************
                                 ;** DMA - DMA Controller
                                 ;***************************************************************************
                                 	
                                 .equ DMA_CTRL = 256		// Control
                                 .equ DMA_INTFLAGS = 259		// Transfer Interrupt Status
                                 .equ DMA_STATUS = 260		// Status
                                 .equ DMA_TEMP = 262		// Temporary Register For 16/24-bit Access
                                 .equ DMA_CH0_CTRLA = 272		// Channel Control
                                 .equ DMA_CH0_CTRLB = 273		// Channel Control
                                 .equ DMA_CH0_ADDRCTRL = 274		// Address Control
                                 .equ DMA_CH0_TRIGSRC = 275		// Channel Trigger Source
                                 .equ DMA_CH0_TRFCNT = 276		// Channel Block Transfer Count
                                 .equ DMA_CH0_REPCNT = 278		// Channel Repeat Count
                                 .equ DMA_CH0_SRCADDR0 = 280		// Channel Source Address 0
                                 .equ DMA_CH0_SRCADDR1 = 281		// Channel Source Address 1
                                 .equ DMA_CH0_SRCADDR2 = 282		// Channel Source Address 2
                                 .equ DMA_CH0_DESTADDR0 = 284		// Channel Destination Address 0
                                 .equ DMA_CH0_DESTADDR1 = 285		// Channel Destination Address 1
                                 .equ DMA_CH0_DESTADDR2 = 286		// Channel Destination Address 2
                                 .equ DMA_CH1_CTRLA = 288		// Channel Control
                                 .equ DMA_CH1_CTRLB = 289		// Channel Control
                                 .equ DMA_CH1_ADDRCTRL = 290		// Address Control
                                 .equ DMA_CH1_TRIGSRC = 291		// Channel Trigger Source
                                 .equ DMA_CH1_TRFCNT = 292		// Channel Block Transfer Count
                                 .equ DMA_CH1_REPCNT = 294		// Channel Repeat Count
                                 .equ DMA_CH1_SRCADDR0 = 296		// Channel Source Address 0
                                 .equ DMA_CH1_SRCADDR1 = 297		// Channel Source Address 1
                                 .equ DMA_CH1_SRCADDR2 = 298		// Channel Source Address 2
                                 .equ DMA_CH1_DESTADDR0 = 300		// Channel Destination Address 0
                                 .equ DMA_CH1_DESTADDR1 = 301		// Channel Destination Address 1
                                 .equ DMA_CH1_DESTADDR2 = 302		// Channel Destination Address 2
                                 .equ DMA_CH2_CTRLA = 304		// Channel Control
                                 .equ DMA_CH2_CTRLB = 305		// Channel Control
                                 .equ DMA_CH2_ADDRCTRL = 306		// Address Control
                                 .equ DMA_CH2_TRIGSRC = 307		// Channel Trigger Source
                                 .equ DMA_CH2_TRFCNT = 308		// Channel Block Transfer Count
                                 .equ DMA_CH2_REPCNT = 310		// Channel Repeat Count
                                 .equ DMA_CH2_SRCADDR0 = 312		// Channel Source Address 0
                                 .equ DMA_CH2_SRCADDR1 = 313		// Channel Source Address 1
                                 .equ DMA_CH2_SRCADDR2 = 314		// Channel Source Address 2
                                 .equ DMA_CH2_DESTADDR0 = 316		// Channel Destination Address 0
                                 .equ DMA_CH2_DESTADDR1 = 317		// Channel Destination Address 1
                                 .equ DMA_CH2_DESTADDR2 = 318		// Channel Destination Address 2
                                 .equ DMA_CH3_CTRLA = 320		// Channel Control
                                 .equ DMA_CH3_CTRLB = 321		// Channel Control
                                 .equ DMA_CH3_ADDRCTRL = 322		// Address Control
                                 .equ DMA_CH3_TRIGSRC = 323		// Channel Trigger Source
                                 .equ DMA_CH3_TRFCNT = 324		// Channel Block Transfer Count
                                 .equ DMA_CH3_REPCNT = 326		// Channel Repeat Count
                                 .equ DMA_CH3_SRCADDR0 = 328		// Channel Source Address 0
                                 .equ DMA_CH3_SRCADDR1 = 329		// Channel Source Address 1
                                 .equ DMA_CH3_SRCADDR2 = 330		// Channel Source Address 2
                                 .equ DMA_CH3_DESTADDR0 = 332		// Channel Destination Address 0
                                 .equ DMA_CH3_DESTADDR1 = 333		// Channel Destination Address 1
                                 .equ DMA_CH3_DESTADDR2 = 334		// Channel Destination Address 2
                                 
                                 ;***************************************************************************
                                 ;** EVSYS - Event System
                                 ;***************************************************************************
                                 	
                                 .equ EVSYS_CH0MUX = 384		// Event Channel 0 Multiplexer
                                 .equ EVSYS_CH1MUX = 385		// Event Channel 1 Multiplexer
                                 .equ EVSYS_CH2MUX = 386		// Event Channel 2 Multiplexer
                                 .equ EVSYS_CH3MUX = 387		// Event Channel 3 Multiplexer
                                 .equ EVSYS_CH4MUX = 388		// Event Channel 4 Multiplexer
                                 .equ EVSYS_CH5MUX = 389		// Event Channel 5 Multiplexer
                                 .equ EVSYS_CH6MUX = 390		// Event Channel 6 Multiplexer
                                 .equ EVSYS_CH7MUX = 391		// Event Channel 7 Multiplexer
                                 .equ EVSYS_CH0CTRL = 392		// Channel 0 Control Register
                                 .equ EVSYS_CH1CTRL = 393		// Channel 1 Control Register
                                 .equ EVSYS_CH2CTRL = 394		// Channel 2 Control Register
                                 .equ EVSYS_CH3CTRL = 395		// Channel 3 Control Register
                                 .equ EVSYS_CH4CTRL = 396		// Channel 4 Control Register
                                 .equ EVSYS_CH5CTRL = 397		// Channel 5 Control Register
                                 .equ EVSYS_CH6CTRL = 398		// Channel 6 Control Register
                                 .equ EVSYS_CH7CTRL = 399		// Channel 7 Control Register
                                 .equ EVSYS_STROBE = 400		// Event Strobe
                                 .equ EVSYS_DATA = 401		// Event Data
                                 
                                 ;***************************************************************************
                                 ;** NVM - Non Volatile Memory
                                 ;***************************************************************************
                                 	
                                 .equ NVM_ADDR0 = 448		// Address Register 0
                                 .equ NVM_ADDR1 = 449		// Address Register 1
                                 .equ NVM_ADDR2 = 450		// Address Register 2
                                 .equ NVM_DATA0 = 452		// Data Register 0
                                 .equ NVM_DATA1 = 453		// Data Register 1
                                 .equ NVM_DATA2 = 454		// Data Register 2
                                 .equ NVM_CMD = 458		// Command
                                 .equ NVM_CTRLA = 459		// Control Register A
                                 .equ NVM_CTRLB = 460		// Control Register B
                                 .equ NVM_INTCTRL = 461		// Interrupt Control
                                 .equ NVM_STATUS = 463		// Status
                                 .equ NVM_LOCKBITS = 464		// Lock Bits
                                 
                                 ;***************************************************************************
                                 ;** ADCA - Analog to Digital Converter A
                                 ;***************************************************************************
                                 	
                                 .equ ADCA_CTRLA = 512		// Control Register A
                                 .equ ADCA_CTRLB = 513		// Control Register B
                                 .equ ADCA_REFCTRL = 514		// Reference Control
                                 .equ ADCA_EVCTRL = 515		// Event Control
                                 .equ ADCA_PRESCALER = 516		// Clock Prescaler
                                 .equ ADCA_INTFLAGS = 518		// Interrupt Flags
                                 .equ ADCA_TEMP = 519		// Temporary Register
                                 .equ ADCA_CAL = 524		// Calibration Value
                                 .equ ADCA_CH0RES = 528		// Channel 0 Result
                                 .equ ADCA_CH1RES = 530		// Channel 1 Result
                                 .equ ADCA_CH2RES = 532		// Channel 2 Result
                                 .equ ADCA_CH3RES = 534		// Channel 3 Result
                                 .equ ADCA_CMP = 536		// Compare Value
                                 .equ ADCA_CH0_CTRL = 544		// Control Register
                                 .equ ADCA_CH0_MUXCTRL = 545		// MUX Control
                                 .equ ADCA_CH0_INTCTRL = 546		// Channel Interrupt Control Register
                                 .equ ADCA_CH0_INTFLAGS = 547		// Interrupt Flags
                                 .equ ADCA_CH0_RES = 548		// Channel Result
                                 .equ ADCA_CH0_SCAN = 550		// Input Channel Scan
                                 .equ ADCA_CH1_CTRL = 552		// Control Register
                                 .equ ADCA_CH1_MUXCTRL = 553		// MUX Control
                                 .equ ADCA_CH1_INTCTRL = 554		// Channel Interrupt Control Register
                                 .equ ADCA_CH1_INTFLAGS = 555		// Interrupt Flags
                                 .equ ADCA_CH1_RES = 556		// Channel Result
                                 .equ ADCA_CH1_SCAN = 558		// Input Channel Scan
                                 .equ ADCA_CH2_CTRL = 560		// Control Register
                                 .equ ADCA_CH2_MUXCTRL = 561		// MUX Control
                                 .equ ADCA_CH2_INTCTRL = 562		// Channel Interrupt Control Register
                                 .equ ADCA_CH2_INTFLAGS = 563		// Interrupt Flags
                                 .equ ADCA_CH2_RES = 564		// Channel Result
                                 .equ ADCA_CH2_SCAN = 566		// Input Channel Scan
                                 .equ ADCA_CH3_CTRL = 568		// Control Register
                                 .equ ADCA_CH3_MUXCTRL = 569		// MUX Control
                                 .equ ADCA_CH3_INTCTRL = 570		// Channel Interrupt Control Register
                                 .equ ADCA_CH3_INTFLAGS = 571		// Interrupt Flags
                                 .equ ADCA_CH3_RES = 572		// Channel Result
                                 .equ ADCA_CH3_SCAN = 574		// Input Channel Scan
                                 
                                 ;***************************************************************************
                                 ;** ADCB - Analog to Digital Converter B
                                 ;***************************************************************************
                                 	
                                 .equ ADCB_CTRLA = 576		// Control Register A
                                 .equ ADCB_CTRLB = 577		// Control Register B
                                 .equ ADCB_REFCTRL = 578		// Reference Control
                                 .equ ADCB_EVCTRL = 579		// Event Control
                                 .equ ADCB_PRESCALER = 580		// Clock Prescaler
                                 .equ ADCB_INTFLAGS = 582		// Interrupt Flags
                                 .equ ADCB_TEMP = 583		// Temporary Register
                                 .equ ADCB_CAL = 588		// Calibration Value
                                 .equ ADCB_CH0RES = 592		// Channel 0 Result
                                 .equ ADCB_CH1RES = 594		// Channel 1 Result
                                 .equ ADCB_CH2RES = 596		// Channel 2 Result
                                 .equ ADCB_CH3RES = 598		// Channel 3 Result
                                 .equ ADCB_CMP = 600		// Compare Value
                                 .equ ADCB_CH0_CTRL = 608		// Control Register
                                 .equ ADCB_CH0_MUXCTRL = 609		// MUX Control
                                 .equ ADCB_CH0_INTCTRL = 610		// Channel Interrupt Control Register
                                 .equ ADCB_CH0_INTFLAGS = 611		// Interrupt Flags
                                 .equ ADCB_CH0_RES = 612		// Channel Result
                                 .equ ADCB_CH0_SCAN = 614		// Input Channel Scan
                                 .equ ADCB_CH1_CTRL = 616		// Control Register
                                 .equ ADCB_CH1_MUXCTRL = 617		// MUX Control
                                 .equ ADCB_CH1_INTCTRL = 618		// Channel Interrupt Control Register
                                 .equ ADCB_CH1_INTFLAGS = 619		// Interrupt Flags
                                 .equ ADCB_CH1_RES = 620		// Channel Result
                                 .equ ADCB_CH1_SCAN = 622		// Input Channel Scan
                                 .equ ADCB_CH2_CTRL = 624		// Control Register
                                 .equ ADCB_CH2_MUXCTRL = 625		// MUX Control
                                 .equ ADCB_CH2_INTCTRL = 626		// Channel Interrupt Control Register
                                 .equ ADCB_CH2_INTFLAGS = 627		// Interrupt Flags
                                 .equ ADCB_CH2_RES = 628		// Channel Result
                                 .equ ADCB_CH2_SCAN = 630		// Input Channel Scan
                                 .equ ADCB_CH3_CTRL = 632		// Control Register
                                 .equ ADCB_CH3_MUXCTRL = 633		// MUX Control
                                 .equ ADCB_CH3_INTCTRL = 634		// Channel Interrupt Control Register
                                 .equ ADCB_CH3_INTFLAGS = 635		// Interrupt Flags
                                 .equ ADCB_CH3_RES = 636		// Channel Result
                                 .equ ADCB_CH3_SCAN = 638		// Input Channel Scan
                                 
                                 ;***************************************************************************
                                 ;** DACA - Digital to Analog Converter A
                                 ;***************************************************************************
                                 
                                 .equ DACA_CTRLA = 768		// Control Register A
                                 .equ DACA_CTRLB = 769		// Control Register B
                                 .equ DACA_CTRLC = 770		// Control Register C
                                 .equ DACA_EVCTRL = 771		// Event Input Control
                                 .equ DACA_STATUS = 773		// Status
                                 .equ DACA_CH0GAINCAL = 776		// Gain Calibration
                                 .equ DACA_CH0OFFSETCAL = 777		// Offset Calibration
                                 .equ DACA_CH1GAINCAL = 778		// Gain Calibration
                                 .equ DACA_CH1OFFSETCAL = 779		// Offset Calibration
                                 .equ DACA_CH0DATA = 792		// Channel 0 Data
                                 .equ DACA_CH1DATA = 794		// Channel 1 Data
                                 
                                 ;***************************************************************************
                                 ;** DACB - Digital to Analog Converter B
                                 ;***************************************************************************
                                 
                                 .equ DACB_CTRLA = 800		// Control Register A
                                 .equ DACB_CTRLB = 801		// Control Register B
                                 .equ DACB_CTRLC = 802		// Control Register C
                                 .equ DACB_EVCTRL = 803		// Event Input Control
                                 .equ DACB_STATUS = 805		// Status
                                 .equ DACB_CH0GAINCAL = 808		// Gain Calibration
                                 .equ DACB_CH0OFFSETCAL = 809		// Offset Calibration
                                 .equ DACB_CH1GAINCAL = 810		// Gain Calibration
                                 .equ DACB_CH1OFFSETCAL = 811		// Offset Calibration
                                 .equ DACB_CH0DATA = 824		// Channel 0 Data
                                 .equ DACB_CH1DATA = 826		// Channel 1 Data
                                 
                                 ;***************************************************************************
                                 ;** ACA - Analog Comparator A
                                 ;***************************************************************************
                                 	
                                 .equ ACA_AC0CTRL = 896		// Analog Comparator 0 Control
                                 .equ ACA_AC1CTRL = 897		// Analog Comparator 1 Control
                                 .equ ACA_AC0MUXCTRL = 898		// Analog Comparator 0 MUX Control
                                 .equ ACA_AC1MUXCTRL = 899		// Analog Comparator 1 MUX Control
                                 .equ ACA_CTRLA = 900		// Control Register A
                                 .equ ACA_CTRLB = 901		// Control Register B
                                 .equ ACA_WINCTRL = 902		// Window Mode Control
                                 .equ ACA_STATUS = 903		// Status
                                 
                                 ;***************************************************************************
                                 ;** ACB - Analog Comparator B
                                 ;***************************************************************************
                                 	
                                 .equ ACB_AC0CTRL = 912		// Analog Comparator 0 Control
                                 .equ ACB_AC1CTRL = 913		// Analog Comparator 1 Control
                                 .equ ACB_AC0MUXCTRL = 914		// Analog Comparator 0 MUX Control
                                 .equ ACB_AC1MUXCTRL = 915		// Analog Comparator 1 MUX Control
                                 .equ ACB_CTRLA = 916		// Control Register A
                                 .equ ACB_CTRLB = 917		// Control Register B
                                 .equ ACB_WINCTRL = 918		// Window Mode Control
                                 .equ ACB_STATUS = 919		// Status
                                 
                                 ;***************************************************************************
                                 ;** RTC - Real-Time Counter
                                 ;***************************************************************************
                                 	
                                 .equ RTC_CTRL = 1024		// Control Register
                                 .equ RTC_STATUS = 1025		// Status Register
                                 .equ RTC_INTCTRL = 1026		// Interrupt Control Register
                                 .equ RTC_INTFLAGS = 1027		// Interrupt Flags
                                 .equ RTC_TEMP = 1028		// Temporary register
                                 .equ RTC_CNT = 1032		// Count Register
                                 .equ RTC_PER = 1034		// Period Register
                                 .equ RTC_COMP = 1036		// Compare Register
                                 
                                 ;***************************************************************************
                                 ;** EBI - External Bus Interface
                                 ;***************************************************************************
                                 	
                                 .equ EBI_CTRL = 1088		// Control
                                 .equ EBI_SDRAMCTRLA = 1089		// SDRAM Control Register A
                                 .equ EBI_REFRESH = 1092		// SDRAM Refresh Period
                                 .equ EBI_INITDLY = 1094		// SDRAM Initialization Delay
                                 .equ EBI_SDRAMCTRLB = 1096		// SDRAM Control Register B
                                 .equ EBI_SDRAMCTRLC = 1097		// SDRAM Control Register C
                                 .equ EBI_CS0_CTRLA = 1104		// Chip Select Control Register A
                                 .equ EBI_CS0_CTRLB = 1105		// Chip Select Control Register B
                                 .equ EBI_CS0_BASEADDR = 1106		// Chip Select Base Address
                                 .equ EBI_CS1_CTRLA = 1108		// Chip Select Control Register A
                                 .equ EBI_CS1_CTRLB = 1109		// Chip Select Control Register B
                                 .equ EBI_CS1_BASEADDR = 1110		// Chip Select Base Address
                                 .equ EBI_CS2_CTRLA = 1112		// Chip Select Control Register A
                                 .equ EBI_CS2_CTRLB = 1113		// Chip Select Control Register B
                                 .equ EBI_CS2_BASEADDR = 1114		// Chip Select Base Address
                                 .equ EBI_CS3_CTRLA = 1116		// Chip Select Control Register A
                                 .equ EBI_CS3_CTRLB = 1117		// Chip Select Control Register B
                                 .equ EBI_CS3_BASEADDR = 1118		// Chip Select Base Address
                                 
                                 ;***************************************************************************
                                 ;** TWIC - Two-Wire Interface C
                                 ;***************************************************************************
                                 	
                                 .equ TWIC_CTRL = 1152		// TWI Common Control Register
                                 .equ TWIC_MASTER_CTRLA = 1153		// Control Register A
                                 .equ TWIC_MASTER_CTRLB = 1154		// Control Register B
                                 .equ TWIC_MASTER_CTRLC = 1155		// Control Register C
                                 .equ TWIC_MASTER_STATUS = 1156		// Status Register
                                 .equ TWIC_MASTER_BAUD = 1157		// Baurd Rate Control Register
                                 .equ TWIC_MASTER_ADDR = 1158		// Address Register
                                 .equ TWIC_MASTER_DATA = 1159		// Data Register
                                 .equ TWIC_SLAVE_CTRLA = 1160		// Control Register A
                                 .equ TWIC_SLAVE_CTRLB = 1161		// Control Register B
                                 .equ TWIC_SLAVE_STATUS = 1162		// Status Register
                                 .equ TWIC_SLAVE_ADDR = 1163		// Address Register
                                 .equ TWIC_SLAVE_DATA = 1164		// Data Register
                                 .equ TWIC_SLAVE_ADDRMASK = 1165		// Address Mask Register
                                 
                                 ;***************************************************************************
                                 ;** TWID - Two-Wire Interface D
                                 ;***************************************************************************
                                 	
                                 .equ TWID_CTRL = 1168		// TWI Common Control Register
                                 .equ TWID_MASTER_CTRLA = 1169		// Control Register A
                                 .equ TWID_MASTER_CTRLB = 1170		// Control Register B
                                 .equ TWID_MASTER_CTRLC = 1171		// Control Register C
                                 .equ TWID_MASTER_STATUS = 1172		// Status Register
                                 .equ TWID_MASTER_BAUD = 1173		// Baurd Rate Control Register
                                 .equ TWID_MASTER_ADDR = 1174		// Address Register
                                 .equ TWID_MASTER_DATA = 1175		// Data Register
                                 .equ TWID_SLAVE_CTRLA = 1176		// Control Register A
                                 .equ TWID_SLAVE_CTRLB = 1177		// Control Register B
                                 .equ TWID_SLAVE_STATUS = 1178		// Status Register
                                 .equ TWID_SLAVE_ADDR = 1179		// Address Register
                                 .equ TWID_SLAVE_DATA = 1180		// Data Register
                                 .equ TWID_SLAVE_ADDRMASK = 1181		// Address Mask Register
                                 
                                 ;***************************************************************************
                                 ;** TWIE - Two-Wire Interface E
                                 ;***************************************************************************
                                 	
                                 .equ TWIE_CTRL = 1184		// TWI Common Control Register
                                 .equ TWIE_MASTER_CTRLA = 1185		// Control Register A
                                 .equ TWIE_MASTER_CTRLB = 1186		// Control Register B
                                 .equ TWIE_MASTER_CTRLC = 1187		// Control Register C
                                 .equ TWIE_MASTER_STATUS = 1188		// Status Register
                                 .equ TWIE_MASTER_BAUD = 1189		// Baurd Rate Control Register
                                 .equ TWIE_MASTER_ADDR = 1190		// Address Register
                                 .equ TWIE_MASTER_DATA = 1191		// Data Register
                                 .equ TWIE_SLAVE_CTRLA = 1192		// Control Register A
                                 .equ TWIE_SLAVE_CTRLB = 1193		// Control Register B
                                 .equ TWIE_SLAVE_STATUS = 1194		// Status Register
                                 .equ TWIE_SLAVE_ADDR = 1195		// Address Register
                                 .equ TWIE_SLAVE_DATA = 1196		// Data Register
                                 .equ TWIE_SLAVE_ADDRMASK = 1197		// Address Mask Register
                                 
                                 ;***************************************************************************
                                 ;** TWIF - Two-Wire Interface F
                                 ;***************************************************************************
                                 	
                                 .equ TWIF_CTRL = 1200		// TWI Common Control Register
                                 .equ TWIF_MASTER_CTRLA = 1201		// Control Register A
                                 .equ TWIF_MASTER_CTRLB = 1202		// Control Register B
                                 .equ TWIF_MASTER_CTRLC = 1203		// Control Register C
                                 .equ TWIF_MASTER_STATUS = 1204		// Status Register
                                 .equ TWIF_MASTER_BAUD = 1205		// Baurd Rate Control Register
                                 .equ TWIF_MASTER_ADDR = 1206		// Address Register
                                 .equ TWIF_MASTER_DATA = 1207		// Data Register
                                 .equ TWIF_SLAVE_CTRLA = 1208		// Control Register A
                                 .equ TWIF_SLAVE_CTRLB = 1209		// Control Register B
                                 .equ TWIF_SLAVE_STATUS = 1210		// Status Register
                                 .equ TWIF_SLAVE_ADDR = 1211		// Address Register
                                 .equ TWIF_SLAVE_DATA = 1212		// Data Register
                                 .equ TWIF_SLAVE_ADDRMASK = 1213		// Address Mask Register
                                 
                                 ;***************************************************************************
                                 ;** USB - Universal Serial Bus
                                 ;***************************************************************************
                                 	
                                 .equ USB_CTRLA = 1216		// Control Register A
                                 .equ USB_CTRLB = 1217		// Control Register B
                                 .equ USB_STATUS = 1218		// Status Register
                                 .equ USB_ADDR = 1219		// Address Register
                                 .equ USB_FIFOWP = 1220		// FIFO Write Pointer Register
                                 .equ USB_FIFORP = 1221		// FIFO Read Pointer Register
                                 .equ USB_EPPTR = 1222		// Endpoint Configuration Table Pointer
                                 .equ USB_INTCTRLA = 1224		// Interrupt Control Register A
                                 .equ USB_INTCTRLB = 1225		// Interrupt Control Register B
                                 .equ USB_INTFLAGSACLR = 1226		// Clear Interrupt Flag Register A
                                 .equ USB_INTFLAGSASET = 1227		// Set Interrupt Flag Register A
                                 .equ USB_INTFLAGSBCLR = 1228		// Clear Interrupt Flag Register B
                                 .equ USB_INTFLAGSBSET = 1229		// Set Interrupt Flag Register B
                                 .equ USB_CAL0 = 1274		// Calibration Byte 0
                                 .equ USB_CAL1 = 1275		// Calibration Byte 1
                                 
                                 ;***************************************************************************
                                 ;** PORTA - Port A
                                 ;***************************************************************************
                                 	
                                 .equ PORTA_DIR = 1536		// I/O Port Data Direction
                                 .equ PORTA_DIRSET = 1537		// I/O Port Data Direction Set
                                 .equ PORTA_DIRCLR = 1538		// I/O Port Data Direction Clear
                                 .equ PORTA_DIRTGL = 1539		// I/O Port Data Direction Toggle
                                 .equ PORTA_OUT = 1540		// I/O Port Output
                                 .equ PORTA_OUTSET = 1541		// I/O Port Output Set
                                 .equ PORTA_OUTCLR = 1542		// I/O Port Output Clear
                                 .equ PORTA_OUTTGL = 1543		// I/O Port Output Toggle
                                 .equ PORTA_IN = 1544		// I/O port Input
                                 .equ PORTA_INTCTRL = 1545		// Interrupt Control Register
                                 .equ PORTA_INT0MASK = 1546		// Port Interrupt 0 Mask
                                 .equ PORTA_INT1MASK = 1547		// Port Interrupt 1 Mask
                                 .equ PORTA_INTFLAGS = 1548		// Interrupt Flag Register
                                 .equ PORTA_REMAP = 1550		// I/O Port Pin Remap Register
                                 .equ PORTA_PIN0CTRL = 1552		// Pin 0 Control Register
                                 .equ PORTA_PIN1CTRL = 1553		// Pin 1 Control Register
                                 .equ PORTA_PIN2CTRL = 1554		// Pin 2 Control Register
                                 .equ PORTA_PIN3CTRL = 1555		// Pin 3 Control Register
                                 .equ PORTA_PIN4CTRL = 1556		// Pin 4 Control Register
                                 .equ PORTA_PIN5CTRL = 1557		// Pin 5 Control Register
                                 .equ PORTA_PIN6CTRL = 1558		// Pin 6 Control Register
                                 .equ PORTA_PIN7CTRL = 1559		// Pin 7 Control Register
                                 
                                 ;***************************************************************************
                                 ;** PORTB - Port B
                                 ;***************************************************************************
                                 	
                                 .equ PORTB_DIR = 1568		// I/O Port Data Direction
                                 .equ PORTB_DIRSET = 1569		// I/O Port Data Direction Set
                                 .equ PORTB_DIRCLR = 1570		// I/O Port Data Direction Clear
                                 .equ PORTB_DIRTGL = 1571		// I/O Port Data Direction Toggle
                                 .equ PORTB_OUT = 1572		// I/O Port Output
                                 .equ PORTB_OUTSET = 1573		// I/O Port Output Set
                                 .equ PORTB_OUTCLR = 1574		// I/O Port Output Clear
                                 .equ PORTB_OUTTGL = 1575		// I/O Port Output Toggle
                                 .equ PORTB_IN = 1576		// I/O port Input
                                 .equ PORTB_INTCTRL = 1577		// Interrupt Control Register
                                 .equ PORTB_INT0MASK = 1578		// Port Interrupt 0 Mask
                                 .equ PORTB_INT1MASK = 1579		// Port Interrupt 1 Mask
                                 .equ PORTB_INTFLAGS = 1580		// Interrupt Flag Register
                                 .equ PORTB_REMAP = 1582		// I/O Port Pin Remap Register
                                 .equ PORTB_PIN0CTRL = 1584		// Pin 0 Control Register
                                 .equ PORTB_PIN1CTRL = 1585		// Pin 1 Control Register
                                 .equ PORTB_PIN2CTRL = 1586		// Pin 2 Control Register
                                 .equ PORTB_PIN3CTRL = 1587		// Pin 3 Control Register
                                 .equ PORTB_PIN4CTRL = 1588		// Pin 4 Control Register
                                 .equ PORTB_PIN5CTRL = 1589		// Pin 5 Control Register
                                 .equ PORTB_PIN6CTRL = 1590		// Pin 6 Control Register
                                 .equ PORTB_PIN7CTRL = 1591		// Pin 7 Control Register
                                 
                                 ;***************************************************************************
                                 ;** PORTC - Port C
                                 ;***************************************************************************
                                 	
                                 .equ PORTC_DIR = 1600		// I/O Port Data Direction
                                 .equ PORTC_DIRSET = 1601		// I/O Port Data Direction Set
                                 .equ PORTC_DIRCLR = 1602		// I/O Port Data Direction Clear
                                 .equ PORTC_DIRTGL = 1603		// I/O Port Data Direction Toggle
                                 .equ PORTC_OUT = 1604		// I/O Port Output
                                 .equ PORTC_OUTSET = 1605		// I/O Port Output Set
                                 .equ PORTC_OUTCLR = 1606		// I/O Port Output Clear
                                 .equ PORTC_OUTTGL = 1607		// I/O Port Output Toggle
                                 .equ PORTC_IN = 1608		// I/O port Input
                                 .equ PORTC_INTCTRL = 1609		// Interrupt Control Register
                                 .equ PORTC_INT0MASK = 1610		// Port Interrupt 0 Mask
                                 .equ PORTC_INT1MASK = 1611		// Port Interrupt 1 Mask
                                 .equ PORTC_INTFLAGS = 1612		// Interrupt Flag Register
                                 .equ PORTC_REMAP = 1614		// I/O Port Pin Remap Register
                                 .equ PORTC_PIN0CTRL = 1616		// Pin 0 Control Register
                                 .equ PORTC_PIN1CTRL = 1617		// Pin 1 Control Register
                                 .equ PORTC_PIN2CTRL = 1618		// Pin 2 Control Register
                                 .equ PORTC_PIN3CTRL = 1619		// Pin 3 Control Register
                                 .equ PORTC_PIN4CTRL = 1620		// Pin 4 Control Register
                                 .equ PORTC_PIN5CTRL = 1621		// Pin 5 Control Register
                                 .equ PORTC_PIN6CTRL = 1622		// Pin 6 Control Register
                                 .equ PORTC_PIN7CTRL = 1623		// Pin 7 Control Register
                                 
                                 ;***************************************************************************
                                 ;** PORTD - Port D
                                 ;***************************************************************************
                                 	
                                 .equ PORTD_DIR = 1632		// I/O Port Data Direction
                                 .equ PORTD_DIRSET = 1633		// I/O Port Data Direction Set
                                 .equ PORTD_DIRCLR = 1634		// I/O Port Data Direction Clear
                                 .equ PORTD_DIRTGL = 1635		// I/O Port Data Direction Toggle
                                 .equ PORTD_OUT = 1636		// I/O Port Output
                                 .equ PORTD_OUTSET = 1637		// I/O Port Output Set
                                 .equ PORTD_OUTCLR = 1638		// I/O Port Output Clear
                                 .equ PORTD_OUTTGL = 1639		// I/O Port Output Toggle
                                 .equ PORTD_IN = 1640		// I/O port Input
                                 .equ PORTD_INTCTRL = 1641		// Interrupt Control Register
                                 .equ PORTD_INT0MASK = 1642		// Port Interrupt 0 Mask
                                 .equ PORTD_INT1MASK = 1643		// Port Interrupt 1 Mask
                                 .equ PORTD_INTFLAGS = 1644		// Interrupt Flag Register
                                 .equ PORTD_REMAP = 1646		// I/O Port Pin Remap Register
                                 .equ PORTD_PIN0CTRL = 1648		// Pin 0 Control Register
                                 .equ PORTD_PIN1CTRL = 1649		// Pin 1 Control Register
                                 .equ PORTD_PIN2CTRL = 1650		// Pin 2 Control Register
                                 .equ PORTD_PIN3CTRL = 1651		// Pin 3 Control Register
                                 .equ PORTD_PIN4CTRL = 1652		// Pin 4 Control Register
                                 .equ PORTD_PIN5CTRL = 1653		// Pin 5 Control Register
                                 .equ PORTD_PIN6CTRL = 1654		// Pin 6 Control Register
                                 .equ PORTD_PIN7CTRL = 1655		// Pin 7 Control Register
                                 
                                 ;***************************************************************************
                                 ;** PORTE - Port E
                                 ;***************************************************************************
                                 	
                                 .equ PORTE_DIR = 1664		// I/O Port Data Direction
                                 .equ PORTE_DIRSET = 1665		// I/O Port Data Direction Set
                                 .equ PORTE_DIRCLR = 1666		// I/O Port Data Direction Clear
                                 .equ PORTE_DIRTGL = 1667		// I/O Port Data Direction Toggle
                                 .equ PORTE_OUT = 1668		// I/O Port Output
                                 .equ PORTE_OUTSET = 1669		// I/O Port Output Set
                                 .equ PORTE_OUTCLR = 1670		// I/O Port Output Clear
                                 .equ PORTE_OUTTGL = 1671		// I/O Port Output Toggle
                                 .equ PORTE_IN = 1672		// I/O port Input
                                 .equ PORTE_INTCTRL = 1673		// Interrupt Control Register
                                 .equ PORTE_INT0MASK = 1674		// Port Interrupt 0 Mask
                                 .equ PORTE_INT1MASK = 1675		// Port Interrupt 1 Mask
                                 .equ PORTE_INTFLAGS = 1676		// Interrupt Flag Register
                                 .equ PORTE_REMAP = 1678		// I/O Port Pin Remap Register
                                 .equ PORTE_PIN0CTRL = 1680		// Pin 0 Control Register
                                 .equ PORTE_PIN1CTRL = 1681		// Pin 1 Control Register
                                 .equ PORTE_PIN2CTRL = 1682		// Pin 2 Control Register
                                 .equ PORTE_PIN3CTRL = 1683		// Pin 3 Control Register
                                 .equ PORTE_PIN4CTRL = 1684		// Pin 4 Control Register
                                 .equ PORTE_PIN5CTRL = 1685		// Pin 5 Control Register
                                 .equ PORTE_PIN6CTRL = 1686		// Pin 6 Control Register
                                 .equ PORTE_PIN7CTRL = 1687		// Pin 7 Control Register
                                 
                                 ;***************************************************************************
                                 ;** PORTF - Port F
                                 ;***************************************************************************
                                 	
                                 .equ PORTF_DIR = 1696		// I/O Port Data Direction
                                 .equ PORTF_DIRSET = 1697		// I/O Port Data Direction Set
                                 .equ PORTF_DIRCLR = 1698		// I/O Port Data Direction Clear
                                 .equ PORTF_DIRTGL = 1699		// I/O Port Data Direction Toggle
                                 .equ PORTF_OUT = 1700		// I/O Port Output
                                 .equ PORTF_OUTSET = 1701		// I/O Port Output Set
                                 .equ PORTF_OUTCLR = 1702		// I/O Port Output Clear
                                 .equ PORTF_OUTTGL = 1703		// I/O Port Output Toggle
                                 .equ PORTF_IN = 1704		// I/O port Input
                                 .equ PORTF_INTCTRL = 1705		// Interrupt Control Register
                                 .equ PORTF_INT0MASK = 1706		// Port Interrupt 0 Mask
                                 .equ PORTF_INT1MASK = 1707		// Port Interrupt 1 Mask
                                 .equ PORTF_INTFLAGS = 1708		// Interrupt Flag Register
                                 .equ PORTF_REMAP = 1710		// I/O Port Pin Remap Register
                                 .equ PORTF_PIN0CTRL = 1712		// Pin 0 Control Register
                                 .equ PORTF_PIN1CTRL = 1713		// Pin 1 Control Register
                                 .equ PORTF_PIN2CTRL = 1714		// Pin 2 Control Register
                                 .equ PORTF_PIN3CTRL = 1715		// Pin 3 Control Register
                                 .equ PORTF_PIN4CTRL = 1716		// Pin 4 Control Register
                                 .equ PORTF_PIN5CTRL = 1717		// Pin 5 Control Register
                                 .equ PORTF_PIN6CTRL = 1718		// Pin 6 Control Register
                                 .equ PORTF_PIN7CTRL = 1719		// Pin 7 Control Register
                                 
                                 ;***************************************************************************
                                 ;** PORTH - Port H
                                 ;***************************************************************************
                                 	
                                 .equ PORTH_DIR = 1760		// I/O Port Data Direction
                                 .equ PORTH_DIRSET = 1761		// I/O Port Data Direction Set
                                 .equ PORTH_DIRCLR = 1762		// I/O Port Data Direction Clear
                                 .equ PORTH_DIRTGL = 1763		// I/O Port Data Direction Toggle
                                 .equ PORTH_OUT = 1764		// I/O Port Output
                                 .equ PORTH_OUTSET = 1765		// I/O Port Output Set
                                 .equ PORTH_OUTCLR = 1766		// I/O Port Output Clear
                                 .equ PORTH_OUTTGL = 1767		// I/O Port Output Toggle
                                 .equ PORTH_IN = 1768		// I/O port Input
                                 .equ PORTH_INTCTRL = 1769		// Interrupt Control Register
                                 .equ PORTH_INT0MASK = 1770		// Port Interrupt 0 Mask
                                 .equ PORTH_INT1MASK = 1771		// Port Interrupt 1 Mask
                                 .equ PORTH_INTFLAGS = 1772		// Interrupt Flag Register
                                 .equ PORTH_REMAP = 1774		// I/O Port Pin Remap Register
                                 .equ PORTH_PIN0CTRL = 1776		// Pin 0 Control Register
                                 .equ PORTH_PIN1CTRL = 1777		// Pin 1 Control Register
                                 .equ PORTH_PIN2CTRL = 1778		// Pin 2 Control Register
                                 .equ PORTH_PIN3CTRL = 1779		// Pin 3 Control Register
                                 .equ PORTH_PIN4CTRL = 1780		// Pin 4 Control Register
                                 .equ PORTH_PIN5CTRL = 1781		// Pin 5 Control Register
                                 .equ PORTH_PIN6CTRL = 1782		// Pin 6 Control Register
                                 .equ PORTH_PIN7CTRL = 1783		// Pin 7 Control Register
                                 
                                 ;***************************************************************************
                                 ;** PORTJ - Port J
                                 ;***************************************************************************
                                 	
                                 .equ PORTJ_DIR = 1792		// I/O Port Data Direction
                                 .equ PORTJ_DIRSET = 1793		// I/O Port Data Direction Set
                                 .equ PORTJ_DIRCLR = 1794		// I/O Port Data Direction Clear
                                 .equ PORTJ_DIRTGL = 1795		// I/O Port Data Direction Toggle
                                 .equ PORTJ_OUT = 1796		// I/O Port Output
                                 .equ PORTJ_OUTSET = 1797		// I/O Port Output Set
                                 .equ PORTJ_OUTCLR = 1798		// I/O Port Output Clear
                                 .equ PORTJ_OUTTGL = 1799		// I/O Port Output Toggle
                                 .equ PORTJ_IN = 1800		// I/O port Input
                                 .equ PORTJ_INTCTRL = 1801		// Interrupt Control Register
                                 .equ PORTJ_INT0MASK = 1802		// Port Interrupt 0 Mask
                                 .equ PORTJ_INT1MASK = 1803		// Port Interrupt 1 Mask
                                 .equ PORTJ_INTFLAGS = 1804		// Interrupt Flag Register
                                 .equ PORTJ_REMAP = 1806		// I/O Port Pin Remap Register
                                 .equ PORTJ_PIN0CTRL = 1808		// Pin 0 Control Register
                                 .equ PORTJ_PIN1CTRL = 1809		// Pin 1 Control Register
                                 .equ PORTJ_PIN2CTRL = 1810		// Pin 2 Control Register
                                 .equ PORTJ_PIN3CTRL = 1811		// Pin 3 Control Register
                                 .equ PORTJ_PIN4CTRL = 1812		// Pin 4 Control Register
                                 .equ PORTJ_PIN5CTRL = 1813		// Pin 5 Control Register
                                 .equ PORTJ_PIN6CTRL = 1814		// Pin 6 Control Register
                                 .equ PORTJ_PIN7CTRL = 1815		// Pin 7 Control Register
                                 
                                 ;***************************************************************************
                                 ;** PORTK - Port K
                                 ;***************************************************************************
                                 	
                                 .equ PORTK_DIR = 1824		// I/O Port Data Direction
                                 .equ PORTK_DIRSET = 1825		// I/O Port Data Direction Set
                                 .equ PORTK_DIRCLR = 1826		// I/O Port Data Direction Clear
                                 .equ PORTK_DIRTGL = 1827		// I/O Port Data Direction Toggle
                                 .equ PORTK_OUT = 1828		// I/O Port Output
                                 .equ PORTK_OUTSET = 1829		// I/O Port Output Set
                                 .equ PORTK_OUTCLR = 1830		// I/O Port Output Clear
                                 .equ PORTK_OUTTGL = 1831		// I/O Port Output Toggle
                                 .equ PORTK_IN = 1832		// I/O port Input
                                 .equ PORTK_INTCTRL = 1833		// Interrupt Control Register
                                 .equ PORTK_INT0MASK = 1834		// Port Interrupt 0 Mask
                                 .equ PORTK_INT1MASK = 1835		// Port Interrupt 1 Mask
                                 .equ PORTK_INTFLAGS = 1836		// Interrupt Flag Register
                                 .equ PORTK_REMAP = 1838		// I/O Port Pin Remap Register
                                 .equ PORTK_PIN0CTRL = 1840		// Pin 0 Control Register
                                 .equ PORTK_PIN1CTRL = 1841		// Pin 1 Control Register
                                 .equ PORTK_PIN2CTRL = 1842		// Pin 2 Control Register
                                 .equ PORTK_PIN3CTRL = 1843		// Pin 3 Control Register
                                 .equ PORTK_PIN4CTRL = 1844		// Pin 4 Control Register
                                 .equ PORTK_PIN5CTRL = 1845		// Pin 5 Control Register
                                 .equ PORTK_PIN6CTRL = 1846		// Pin 6 Control Register
                                 .equ PORTK_PIN7CTRL = 1847		// Pin 7 Control Register
                                 
                                 ;***************************************************************************
                                 ;** PORTQ - Port Q
                                 ;***************************************************************************
                                 	
                                 .equ PORTQ_DIR = 1984		// I/O Port Data Direction
                                 .equ PORTQ_DIRSET = 1985		// I/O Port Data Direction Set
                                 .equ PORTQ_DIRCLR = 1986		// I/O Port Data Direction Clear
                                 .equ PORTQ_DIRTGL = 1987		// I/O Port Data Direction Toggle
                                 .equ PORTQ_OUT = 1988		// I/O Port Output
                                 .equ PORTQ_OUTSET = 1989		// I/O Port Output Set
                                 .equ PORTQ_OUTCLR = 1990		// I/O Port Output Clear
                                 .equ PORTQ_OUTTGL = 1991		// I/O Port Output Toggle
                                 .equ PORTQ_IN = 1992		// I/O port Input
                                 .equ PORTQ_INTCTRL = 1993		// Interrupt Control Register
                                 .equ PORTQ_INT0MASK = 1994		// Port Interrupt 0 Mask
                                 .equ PORTQ_INT1MASK = 1995		// Port Interrupt 1 Mask
                                 .equ PORTQ_INTFLAGS = 1996		// Interrupt Flag Register
                                 .equ PORTQ_REMAP = 1998		// I/O Port Pin Remap Register
                                 .equ PORTQ_PIN0CTRL = 2000		// Pin 0 Control Register
                                 .equ PORTQ_PIN1CTRL = 2001		// Pin 1 Control Register
                                 .equ PORTQ_PIN2CTRL = 2002		// Pin 2 Control Register
                                 .equ PORTQ_PIN3CTRL = 2003		// Pin 3 Control Register
                                 .equ PORTQ_PIN4CTRL = 2004		// Pin 4 Control Register
                                 .equ PORTQ_PIN5CTRL = 2005		// Pin 5 Control Register
                                 .equ PORTQ_PIN6CTRL = 2006		// Pin 6 Control Register
                                 .equ PORTQ_PIN7CTRL = 2007		// Pin 7 Control Register
                                 
                                 ;***************************************************************************
                                 ;** PORTR - Port R
                                 ;***************************************************************************
                                 	
                                 .equ PORTR_DIR = 2016		// I/O Port Data Direction
                                 .equ PORTR_DIRSET = 2017		// I/O Port Data Direction Set
                                 .equ PORTR_DIRCLR = 2018		// I/O Port Data Direction Clear
                                 .equ PORTR_DIRTGL = 2019		// I/O Port Data Direction Toggle
                                 .equ PORTR_OUT = 2020		// I/O Port Output
                                 .equ PORTR_OUTSET = 2021		// I/O Port Output Set
                                 .equ PORTR_OUTCLR = 2022		// I/O Port Output Clear
                                 .equ PORTR_OUTTGL = 2023		// I/O Port Output Toggle
                                 .equ PORTR_IN = 2024		// I/O port Input
                                 .equ PORTR_INTCTRL = 2025		// Interrupt Control Register
                                 .equ PORTR_INT0MASK = 2026		// Port Interrupt 0 Mask
                                 .equ PORTR_INT1MASK = 2027		// Port Interrupt 1 Mask
                                 .equ PORTR_INTFLAGS = 2028		// Interrupt Flag Register
                                 .equ PORTR_REMAP = 2030		// I/O Port Pin Remap Register
                                 .equ PORTR_PIN0CTRL = 2032		// Pin 0 Control Register
                                 .equ PORTR_PIN1CTRL = 2033		// Pin 1 Control Register
                                 .equ PORTR_PIN2CTRL = 2034		// Pin 2 Control Register
                                 .equ PORTR_PIN3CTRL = 2035		// Pin 3 Control Register
                                 .equ PORTR_PIN4CTRL = 2036		// Pin 4 Control Register
                                 .equ PORTR_PIN5CTRL = 2037		// Pin 5 Control Register
                                 .equ PORTR_PIN6CTRL = 2038		// Pin 6 Control Register
                                 .equ PORTR_PIN7CTRL = 2039		// Pin 7 Control Register
                                 
                                 ;***************************************************************************
                                 ;** TCC0 - Timer/Counter C0
                                 ;***************************************************************************
                                 	
                                 .equ TCC0_CTRLA = 2048		// Control  Register A
                                 .equ TCC0_CTRLB = 2049		// Control Register B
                                 .equ TCC0_CTRLC = 2050		// Control register C
                                 .equ TCC0_CTRLD = 2051		// Control Register D
                                 .equ TCC0_CTRLE = 2052		// Control Register E
                                 .equ TCC0_INTCTRLA = 2054		// Interrupt Control Register A
                                 .equ TCC0_INTCTRLB = 2055		// Interrupt Control Register B
                                 .equ TCC0_CTRLFCLR = 2056		// Control Register F Clear
                                 .equ TCC0_CTRLFSET = 2057		// Control Register F Set
                                 .equ TCC0_CTRLGCLR = 2058		// Control Register G Clear
                                 .equ TCC0_CTRLGSET = 2059		// Control Register G Set
                                 .equ TCC0_INTFLAGS = 2060		// Interrupt Flag Register
                                 .equ TCC0_TEMP = 2063		// Temporary Register For 16-bit Access
                                 .equ TCC0_CNT = 2080		// Count
                                 .equ TCC0_PER = 2086		// Period
                                 .equ TCC0_CCA = 2088		// Compare or Capture A
                                 .equ TCC0_CCB = 2090		// Compare or Capture B
                                 .equ TCC0_CCC = 2092		// Compare or Capture C
                                 .equ TCC0_CCD = 2094		// Compare or Capture D
                                 .equ TCC0_PERBUF = 2102		// Period Buffer
                                 .equ TCC0_CCABUF = 2104		// Compare Or Capture A Buffer
                                 .equ TCC0_CCBBUF = 2106		// Compare Or Capture B Buffer
                                 .equ TCC0_CCCBUF = 2108		// Compare Or Capture C Buffer
                                 .equ TCC0_CCDBUF = 2110		// Compare Or Capture D Buffer
                                 
                                 ;***************************************************************************
                                 ;** TCC2 - Timer/Counter C2
                                 ;***************************************************************************
                                 	
                                 .equ TCC2_CTRLA = 2048		// Control Register A
                                 .equ TCC2_CTRLB = 2049		// Control Register B
                                 .equ TCC2_CTRLC = 2050		// Control register C
                                 .equ TCC2_CTRLE = 2052		// Control Register E
                                 .equ TCC2_INTCTRLA = 2054		// Interrupt Control Register A
                                 .equ TCC2_INTCTRLB = 2055		// Interrupt Control Register B
                                 .equ TCC2_CTRLF = 2057		// Control Register F
                                 .equ TCC2_INTFLAGS = 2060		// Interrupt Flag Register
                                 .equ TCC2_LCNT = 2080		// Low Byte Count
                                 .equ TCC2_HCNT = 2081		// High Byte Count
                                 .equ TCC2_LPER = 2086		// Low Byte Period
                                 .equ TCC2_HPER = 2087		// High Byte Period
                                 .equ TCC2_LCMPA = 2088		// Low Byte Compare A
                                 .equ TCC2_HCMPA = 2089		// High Byte Compare A
                                 .equ TCC2_LCMPB = 2090		// Low Byte Compare B
                                 .equ TCC2_HCMPB = 2091		// High Byte Compare B
                                 .equ TCC2_LCMPC = 2092		// Low Byte Compare C
                                 .equ TCC2_HCMPC = 2093		// High Byte Compare C
                                 .equ TCC2_LCMPD = 2094		// Low Byte Compare D
                                 .equ TCC2_HCMPD = 2095		// High Byte Compare D
                                 
                                 ;***************************************************************************
                                 ;** TCC1 - Timer/Counter C1
                                 ;***************************************************************************
                                 	
                                 .equ TCC1_CTRLA = 2112		// Control  Register A
                                 .equ TCC1_CTRLB = 2113		// Control Register B
                                 .equ TCC1_CTRLC = 2114		// Control register C
                                 .equ TCC1_CTRLD = 2115		// Control Register D
                                 .equ TCC1_CTRLE = 2116		// Control Register E
                                 .equ TCC1_INTCTRLA = 2118		// Interrupt Control Register A
                                 .equ TCC1_INTCTRLB = 2119		// Interrupt Control Register B
                                 .equ TCC1_CTRLFCLR = 2120		// Control Register F Clear
                                 .equ TCC1_CTRLFSET = 2121		// Control Register F Set
                                 .equ TCC1_CTRLGCLR = 2122		// Control Register G Clear
                                 .equ TCC1_CTRLGSET = 2123		// Control Register G Set
                                 .equ TCC1_INTFLAGS = 2124		// Interrupt Flag Register
                                 .equ TCC1_TEMP = 2127		// Temporary Register For 16-bit Access
                                 .equ TCC1_CNT = 2144		// Count
                                 .equ TCC1_PER = 2150		// Period
                                 .equ TCC1_CCA = 2152		// Compare or Capture A
                                 .equ TCC1_CCB = 2154		// Compare or Capture B
                                 .equ TCC1_PERBUF = 2166		// Period Buffer
                                 .equ TCC1_CCABUF = 2168		// Compare Or Capture A Buffer
                                 .equ TCC1_CCBBUF = 2170		// Compare Or Capture B Buffer
                                 
                                 ;***************************************************************************
                                 ;** AWEXC - Advanced Waveform Extension C
                                 ;***************************************************************************
                                 	
                                 .equ AWEXC_CTRL = 2176		// Control Register
                                 .equ AWEXC_FDEMASK = 2178		// Fault Detection Event Mask
                                 .equ AWEXC_FDCTRL = 2179		// Fault Detection Control Register
                                 .equ AWEXC_STATUS = 2180		// Status Register
                                 .equ AWEXC_STATUSSET = 2181		// Status Set Register
                                 .equ AWEXC_DTBOTH = 2182		// Dead Time Both Sides
                                 .equ AWEXC_DTBOTHBUF = 2183		// Dead Time Both Sides Buffer
                                 .equ AWEXC_DTLS = 2184		// Dead Time Low Side
                                 .equ AWEXC_DTHS = 2185		// Dead Time High Side
                                 .equ AWEXC_DTLSBUF = 2186		// Dead Time Low Side Buffer
                                 .equ AWEXC_DTHSBUF = 2187		// Dead Time High Side Buffer
                                 .equ AWEXC_OUTOVEN = 2188		// Output Override Enable
                                 
                                 ;***************************************************************************
                                 ;** HIRESC - High-Resolution Extension C
                                 ;***************************************************************************
                                 	
                                 .equ HIRESC_CTRLA = 2192		// Control Register
                                 
                                 ;***************************************************************************
                                 ;** USARTC0 - Universal Asynchronous Receiver-Transmitter C0
                                 ;***************************************************************************
                                 	
                                 .equ USARTC0_DATA = 2208		// Data Register
                                 .equ USARTC0_STATUS = 2209		// Status Register
                                 .equ USARTC0_CTRLA = 2211		// Control Register A
                                 .equ USARTC0_CTRLB = 2212		// Control Register B
                                 .equ USARTC0_CTRLC = 2213		// Control Register C
                                 .equ USARTC0_BAUDCTRLA = 2214		// Baud Rate Control Register A
                                 .equ USARTC0_BAUDCTRLB = 2215		// Baud Rate Control Register B
                                 
                                 ;***************************************************************************
                                 ;** USARTC1 - Universal Asynchronous Receiver-Transmitter C1
                                 ;***************************************************************************
                                 	
                                 .equ USARTC1_DATA = 2224		// Data Register
                                 .equ USARTC1_STATUS = 2225		// Status Register
                                 .equ USARTC1_CTRLA = 2227		// Control Register A
                                 .equ USARTC1_CTRLB = 2228		// Control Register B
                                 .equ USARTC1_CTRLC = 2229		// Control Register C
                                 .equ USARTC1_BAUDCTRLA = 2230		// Baud Rate Control Register A
                                 .equ USARTC1_BAUDCTRLB = 2231		// Baud Rate Control Register B
                                 
                                 ;***************************************************************************
                                 ;** SPIC - Serial Peripheral Interface C
                                 ;***************************************************************************
                                 	
                                 .equ SPIC_CTRL = 2240		// Control Register
                                 .equ SPIC_INTCTRL = 2241		// Interrupt Control Register
                                 .equ SPIC_STATUS = 2242		// Status Register
                                 .equ SPIC_DATA = 2243		// Data Register
                                 
                                 ;***************************************************************************
                                 ;** IRCOM - IR Communication Module
                                 ;***************************************************************************
                                 	
                                 .equ IRCOM_CTRL = 2296		// Control Register
                                 .equ IRCOM_TXPLCTRL = 2297		// IrDA Transmitter Pulse Length Control Register
                                 .equ IRCOM_RXPLCTRL = 2298		// IrDA Receiver Pulse Length Control Register
                                 
                                 ;***************************************************************************
                                 ;** TCD0 - Timer/Counter D0
                                 ;***************************************************************************
                                 	
                                 .equ TCD0_CTRLA = 2304		// Control  Register A
                                 .equ TCD0_CTRLB = 2305		// Control Register B
                                 .equ TCD0_CTRLC = 2306		// Control register C
                                 .equ TCD0_CTRLD = 2307		// Control Register D
                                 .equ TCD0_CTRLE = 2308		// Control Register E
                                 .equ TCD0_INTCTRLA = 2310		// Interrupt Control Register A
                                 .equ TCD0_INTCTRLB = 2311		// Interrupt Control Register B
                                 .equ TCD0_CTRLFCLR = 2312		// Control Register F Clear
                                 .equ TCD0_CTRLFSET = 2313		// Control Register F Set
                                 .equ TCD0_CTRLGCLR = 2314		// Control Register G Clear
                                 .equ TCD0_CTRLGSET = 2315		// Control Register G Set
                                 .equ TCD0_INTFLAGS = 2316		// Interrupt Flag Register
                                 .equ TCD0_TEMP = 2319		// Temporary Register For 16-bit Access
                                 .equ TCD0_CNT = 2336		// Count
                                 .equ TCD0_PER = 2342		// Period
                                 .equ TCD0_CCA = 2344		// Compare or Capture A
                                 .equ TCD0_CCB = 2346		// Compare or Capture B
                                 .equ TCD0_CCC = 2348		// Compare or Capture C
                                 .equ TCD0_CCD = 2350		// Compare or Capture D
                                 .equ TCD0_PERBUF = 2358		// Period Buffer
                                 .equ TCD0_CCABUF = 2360		// Compare Or Capture A Buffer
                                 .equ TCD0_CCBBUF = 2362		// Compare Or Capture B Buffer
                                 .equ TCD0_CCCBUF = 2364		// Compare Or Capture C Buffer
                                 .equ TCD0_CCDBUF = 2366		// Compare Or Capture D Buffer
                                 
                                 ;***************************************************************************
                                 ;** TCD2 - Timer/Counter D2
                                 ;***************************************************************************
                                 	
                                 .equ TCD2_CTRLA = 2304		// Control Register A
                                 .equ TCD2_CTRLB = 2305		// Control Register B
                                 .equ TCD2_CTRLC = 2306		// Control register C
                                 .equ TCD2_CTRLE = 2308		// Control Register E
                                 .equ TCD2_INTCTRLA = 2310		// Interrupt Control Register A
                                 .equ TCD2_INTCTRLB = 2311		// Interrupt Control Register B
                                 .equ TCD2_CTRLF = 2313		// Control Register F
                                 .equ TCD2_INTFLAGS = 2316		// Interrupt Flag Register
                                 .equ TCD2_LCNT = 2336		// Low Byte Count
                                 .equ TCD2_HCNT = 2337		// High Byte Count
                                 .equ TCD2_LPER = 2342		// Low Byte Period
                                 .equ TCD2_HPER = 2343		// High Byte Period
                                 .equ TCD2_LCMPA = 2344		// Low Byte Compare A
                                 .equ TCD2_HCMPA = 2345		// High Byte Compare A
                                 .equ TCD2_LCMPB = 2346		// Low Byte Compare B
                                 .equ TCD2_HCMPB = 2347		// High Byte Compare B
                                 .equ TCD2_LCMPC = 2348		// Low Byte Compare C
                                 .equ TCD2_HCMPC = 2349		// High Byte Compare C
                                 .equ TCD2_LCMPD = 2350		// Low Byte Compare D
                                 .equ TCD2_HCMPD = 2351		// High Byte Compare D
                                 
                                 ;***************************************************************************
                                 ;** TCD1 - Timer/Counter D1
                                 ;***************************************************************************
                                 	
                                 .equ TCD1_CTRLA = 2368		// Control  Register A
                                 .equ TCD1_CTRLB = 2369		// Control Register B
                                 .equ TCD1_CTRLC = 2370		// Control register C
                                 .equ TCD1_CTRLD = 2371		// Control Register D
                                 .equ TCD1_CTRLE = 2372		// Control Register E
                                 .equ TCD1_INTCTRLA = 2374		// Interrupt Control Register A
                                 .equ TCD1_INTCTRLB = 2375		// Interrupt Control Register B
                                 .equ TCD1_CTRLFCLR = 2376		// Control Register F Clear
                                 .equ TCD1_CTRLFSET = 2377		// Control Register F Set
                                 .equ TCD1_CTRLGCLR = 2378		// Control Register G Clear
                                 .equ TCD1_CTRLGSET = 2379		// Control Register G Set
                                 .equ TCD1_INTFLAGS = 2380		// Interrupt Flag Register
                                 .equ TCD1_TEMP = 2383		// Temporary Register For 16-bit Access
                                 .equ TCD1_CNT = 2400		// Count
                                 .equ TCD1_PER = 2406		// Period
                                 .equ TCD1_CCA = 2408		// Compare or Capture A
                                 .equ TCD1_CCB = 2410		// Compare or Capture B
                                 .equ TCD1_PERBUF = 2422		// Period Buffer
                                 .equ TCD1_CCABUF = 2424		// Compare Or Capture A Buffer
                                 .equ TCD1_CCBBUF = 2426		// Compare Or Capture B Buffer
                                 
                                 ;***************************************************************************
                                 ;** HIRESD - High-Resolution Extension D
                                 ;***************************************************************************
                                 	
                                 .equ HIRESD_CTRLA = 2448		// Control Register
                                 
                                 ;***************************************************************************
                                 ;** USARTD0 - Universal Asynchronous Receiver-Transmitter D0
                                 ;***************************************************************************
                                 	
                                 .equ USARTD0_DATA = 2464		// Data Register
                                 .equ USARTD0_STATUS = 2465		// Status Register
                                 .equ USARTD0_CTRLA = 2467		// Control Register A
                                 .equ USARTD0_CTRLB = 2468		// Control Register B
                                 .equ USARTD0_CTRLC = 2469		// Control Register C
                                 .equ USARTD0_BAUDCTRLA = 2470		// Baud Rate Control Register A
                                 .equ USARTD0_BAUDCTRLB = 2471		// Baud Rate Control Register B
                                 
                                 ;***************************************************************************
                                 ;** USARTD1 - Universal Asynchronous Receiver-Transmitter D1
                                 ;***************************************************************************
                                 	
                                 .equ USARTD1_DATA = 2480		// Data Register
                                 .equ USARTD1_STATUS = 2481		// Status Register
                                 .equ USARTD1_CTRLA = 2483		// Control Register A
                                 .equ USARTD1_CTRLB = 2484		// Control Register B
                                 .equ USARTD1_CTRLC = 2485		// Control Register C
                                 .equ USARTD1_BAUDCTRLA = 2486		// Baud Rate Control Register A
                                 .equ USARTD1_BAUDCTRLB = 2487		// Baud Rate Control Register B
                                 
                                 ;***************************************************************************
                                 ;** SPID - Serial Peripheral Interface D
                                 ;***************************************************************************
                                 	
                                 .equ SPID_CTRL = 2496		// Control Register
                                 .equ SPID_INTCTRL = 2497		// Interrupt Control Register
                                 .equ SPID_STATUS = 2498		// Status Register
                                 .equ SPID_DATA = 2499		// Data Register
                                 
                                 ;***************************************************************************
                                 ;** TCE0 - Timer/Counter E0
                                 ;***************************************************************************
                                 	
                                 .equ TCE0_CTRLA = 2560		// Control  Register A
                                 .equ TCE0_CTRLB = 2561		// Control Register B
                                 .equ TCE0_CTRLC = 2562		// Control register C
                                 .equ TCE0_CTRLD = 2563		// Control Register D
                                 .equ TCE0_CTRLE = 2564		// Control Register E
                                 .equ TCE0_INTCTRLA = 2566		// Interrupt Control Register A
                                 .equ TCE0_INTCTRLB = 2567		// Interrupt Control Register B
                                 .equ TCE0_CTRLFCLR = 2568		// Control Register F Clear
                                 .equ TCE0_CTRLFSET = 2569		// Control Register F Set
                                 .equ TCE0_CTRLGCLR = 2570		// Control Register G Clear
                                 .equ TCE0_CTRLGSET = 2571		// Control Register G Set
                                 .equ TCE0_INTFLAGS = 2572		// Interrupt Flag Register
                                 .equ TCE0_TEMP = 2575		// Temporary Register For 16-bit Access
                                 .equ TCE0_CNT = 2592		// Count
                                 .equ TCE0_PER = 2598		// Period
                                 .equ TCE0_CCA = 2600		// Compare or Capture A
                                 .equ TCE0_CCB = 2602		// Compare or Capture B
                                 .equ TCE0_CCC = 2604		// Compare or Capture C
                                 .equ TCE0_CCD = 2606		// Compare or Capture D
                                 .equ TCE0_PERBUF = 2614		// Period Buffer
                                 .equ TCE0_CCABUF = 2616		// Compare Or Capture A Buffer
                                 .equ TCE0_CCBBUF = 2618		// Compare Or Capture B Buffer
                                 .equ TCE0_CCCBUF = 2620		// Compare Or Capture C Buffer
                                 .equ TCE0_CCDBUF = 2622		// Compare Or Capture D Buffer
                                 
                                 ;***************************************************************************
                                 ;** TCE2 - Timer/Counter E2
                                 ;***************************************************************************
                                 	
                                 .equ TCE2_CTRLA = 2560		// Control Register A
                                 .equ TCE2_CTRLB = 2561		// Control Register B
                                 .equ TCE2_CTRLC = 2562		// Control register C
                                 .equ TCE2_CTRLE = 2564		// Control Register E
                                 .equ TCE2_INTCTRLA = 2566		// Interrupt Control Register A
                                 .equ TCE2_INTCTRLB = 2567		// Interrupt Control Register B
                                 .equ TCE2_CTRLF = 2569		// Control Register F
                                 .equ TCE2_INTFLAGS = 2572		// Interrupt Flag Register
                                 .equ TCE2_LCNT = 2592		// Low Byte Count
                                 .equ TCE2_HCNT = 2593		// High Byte Count
                                 .equ TCE2_LPER = 2598		// Low Byte Period
                                 .equ TCE2_HPER = 2599		// High Byte Period
                                 .equ TCE2_LCMPA = 2600		// Low Byte Compare A
                                 .equ TCE2_HCMPA = 2601		// High Byte Compare A
                                 .equ TCE2_LCMPB = 2602		// Low Byte Compare B
                                 .equ TCE2_HCMPB = 2603		// High Byte Compare B
                                 .equ TCE2_LCMPC = 2604		// Low Byte Compare C
                                 .equ TCE2_HCMPC = 2605		// High Byte Compare C
                                 .equ TCE2_LCMPD = 2606		// Low Byte Compare D
                                 .equ TCE2_HCMPD = 2607		// High Byte Compare D
                                 
                                 ;***************************************************************************
                                 ;** TCE1 - Timer/Counter E1
                                 ;***************************************************************************
                                 	
                                 .equ TCE1_CTRLA = 2624		// Control  Register A
                                 .equ TCE1_CTRLB = 2625		// Control Register B
                                 .equ TCE1_CTRLC = 2626		// Control register C
                                 .equ TCE1_CTRLD = 2627		// Control Register D
                                 .equ TCE1_CTRLE = 2628		// Control Register E
                                 .equ TCE1_INTCTRLA = 2630		// Interrupt Control Register A
                                 .equ TCE1_INTCTRLB = 2631		// Interrupt Control Register B
                                 .equ TCE1_CTRLFCLR = 2632		// Control Register F Clear
                                 .equ TCE1_CTRLFSET = 2633		// Control Register F Set
                                 .equ TCE1_CTRLGCLR = 2634		// Control Register G Clear
                                 .equ TCE1_CTRLGSET = 2635		// Control Register G Set
                                 .equ TCE1_INTFLAGS = 2636		// Interrupt Flag Register
                                 .equ TCE1_TEMP = 2639		// Temporary Register For 16-bit Access
                                 .equ TCE1_CNT = 2656		// Count
                                 .equ TCE1_PER = 2662		// Period
                                 .equ TCE1_CCA = 2664		// Compare or Capture A
                                 .equ TCE1_CCB = 2666		// Compare or Capture B
                                 .equ TCE1_PERBUF = 2678		// Period Buffer
                                 .equ TCE1_CCABUF = 2680		// Compare Or Capture A Buffer
                                 .equ TCE1_CCBBUF = 2682		// Compare Or Capture B Buffer
                                 
                                 ;***************************************************************************
                                 ;** AWEXE - Advanced Waveform Extension E
                                 ;***************************************************************************
                                 	
                                 .equ AWEXE_CTRL = 2688		// Control Register
                                 .equ AWEXE_FDEMASK = 2690		// Fault Detection Event Mask
                                 .equ AWEXE_FDCTRL = 2691		// Fault Detection Control Register
                                 .equ AWEXE_STATUS = 2692		// Status Register
                                 .equ AWEXE_STATUSSET = 2693		// Status Set Register
                                 .equ AWEXE_DTBOTH = 2694		// Dead Time Both Sides
                                 .equ AWEXE_DTBOTHBUF = 2695		// Dead Time Both Sides Buffer
                                 .equ AWEXE_DTLS = 2696		// Dead Time Low Side
                                 .equ AWEXE_DTHS = 2697		// Dead Time High Side
                                 .equ AWEXE_DTLSBUF = 2698		// Dead Time Low Side Buffer
                                 .equ AWEXE_DTHSBUF = 2699		// Dead Time High Side Buffer
                                 .equ AWEXE_OUTOVEN = 2700		// Output Override Enable
                                 
                                 ;***************************************************************************
                                 ;** HIRESE - High-Resolution Extension E
                                 ;***************************************************************************
                                 	
                                 .equ HIRESE_CTRLA = 2704		// Control Register
                                 
                                 ;***************************************************************************
                                 ;** USARTE0 - Universal Asynchronous Receiver-Transmitter E0
                                 ;***************************************************************************
                                 	
                                 .equ USARTE0_DATA = 2720		// Data Register
                                 .equ USARTE0_STATUS = 2721		// Status Register
                                 .equ USARTE0_CTRLA = 2723		// Control Register A
                                 .equ USARTE0_CTRLB = 2724		// Control Register B
                                 .equ USARTE0_CTRLC = 2725		// Control Register C
                                 .equ USARTE0_BAUDCTRLA = 2726		// Baud Rate Control Register A
                                 .equ USARTE0_BAUDCTRLB = 2727		// Baud Rate Control Register B
                                 
                                 ;***************************************************************************
                                 ;** USARTE1 - Universal Asynchronous Receiver-Transmitter E1
                                 ;***************************************************************************
                                 	
                                 .equ USARTE1_DATA = 2736		// Data Register
                                 .equ USARTE1_STATUS = 2737		// Status Register
                                 .equ USARTE1_CTRLA = 2739		// Control Register A
                                 .equ USARTE1_CTRLB = 2740		// Control Register B
                                 .equ USARTE1_CTRLC = 2741		// Control Register C
                                 .equ USARTE1_BAUDCTRLA = 2742		// Baud Rate Control Register A
                                 .equ USARTE1_BAUDCTRLB = 2743		// Baud Rate Control Register B
                                 
                                 ;***************************************************************************
                                 ;** SPIE - Serial Peripheral Interface E
                                 ;***************************************************************************
                                 	
                                 .equ SPIE_CTRL = 2752		// Control Register
                                 .equ SPIE_INTCTRL = 2753		// Interrupt Control Register
                                 .equ SPIE_STATUS = 2754		// Status Register
                                 .equ SPIE_DATA = 2755		// Data Register
                                 
                                 ;***************************************************************************
                                 ;** TCF0 - Timer/Counter F0
                                 ;***************************************************************************
                                 	
                                 .equ TCF0_CTRLA = 2816		// Control  Register A
                                 .equ TCF0_CTRLB = 2817		// Control Register B
                                 .equ TCF0_CTRLC = 2818		// Control register C
                                 .equ TCF0_CTRLD = 2819		// Control Register D
                                 .equ TCF0_CTRLE = 2820		// Control Register E
                                 .equ TCF0_INTCTRLA = 2822		// Interrupt Control Register A
                                 .equ TCF0_INTCTRLB = 2823		// Interrupt Control Register B
                                 .equ TCF0_CTRLFCLR = 2824		// Control Register F Clear
                                 .equ TCF0_CTRLFSET = 2825		// Control Register F Set
                                 .equ TCF0_CTRLGCLR = 2826		// Control Register G Clear
                                 .equ TCF0_CTRLGSET = 2827		// Control Register G Set
                                 .equ TCF0_INTFLAGS = 2828		// Interrupt Flag Register
                                 .equ TCF0_TEMP = 2831		// Temporary Register For 16-bit Access
                                 .equ TCF0_CNT = 2848		// Count
                                 .equ TCF0_PER = 2854		// Period
                                 .equ TCF0_CCA = 2856		// Compare or Capture A
                                 .equ TCF0_CCB = 2858		// Compare or Capture B
                                 .equ TCF0_CCC = 2860		// Compare or Capture C
                                 .equ TCF0_CCD = 2862		// Compare or Capture D
                                 .equ TCF0_PERBUF = 2870		// Period Buffer
                                 .equ TCF0_CCABUF = 2872		// Compare Or Capture A Buffer
                                 .equ TCF0_CCBBUF = 2874		// Compare Or Capture B Buffer
                                 .equ TCF0_CCCBUF = 2876		// Compare Or Capture C Buffer
                                 .equ TCF0_CCDBUF = 2878		// Compare Or Capture D Buffer
                                 
                                 ;***************************************************************************
                                 ;** TCF2 - Timer/Counter F2
                                 ;***************************************************************************
                                 	
                                 .equ TCF2_CTRLA = 2816		// Control Register A
                                 .equ TCF2_CTRLB = 2817		// Control Register B
                                 .equ TCF2_CTRLC = 2818		// Control register C
                                 .equ TCF2_CTRLE = 2820		// Control Register E
                                 .equ TCF2_INTCTRLA = 2822		// Interrupt Control Register A
                                 .equ TCF2_INTCTRLB = 2823		// Interrupt Control Register B
                                 .equ TCF2_CTRLF = 2825		// Control Register F
                                 .equ TCF2_INTFLAGS = 2828		// Interrupt Flag Register
                                 .equ TCF2_LCNT = 2848		// Low Byte Count
                                 .equ TCF2_HCNT = 2849		// High Byte Count
                                 .equ TCF2_LPER = 2854		// Low Byte Period
                                 .equ TCF2_HPER = 2855		// High Byte Period
                                 .equ TCF2_LCMPA = 2856		// Low Byte Compare A
                                 .equ TCF2_HCMPA = 2857		// High Byte Compare A
                                 .equ TCF2_LCMPB = 2858		// Low Byte Compare B
                                 .equ TCF2_HCMPB = 2859		// High Byte Compare B
                                 .equ TCF2_LCMPC = 2860		// Low Byte Compare C
                                 .equ TCF2_HCMPC = 2861		// High Byte Compare C
                                 .equ TCF2_LCMPD = 2862		// Low Byte Compare D
                                 .equ TCF2_HCMPD = 2863		// High Byte Compare D
                                 
                                 ;***************************************************************************
                                 ;** TCF1 - Timer/Counter F1
                                 ;***************************************************************************
                                 	
                                 .equ TCF1_CTRLA = 2880		// Control  Register A
                                 .equ TCF1_CTRLB = 2881		// Control Register B
                                 .equ TCF1_CTRLC = 2882		// Control register C
                                 .equ TCF1_CTRLD = 2883		// Control Register D
                                 .equ TCF1_CTRLE = 2884		// Control Register E
                                 .equ TCF1_INTCTRLA = 2886		// Interrupt Control Register A
                                 .equ TCF1_INTCTRLB = 2887		// Interrupt Control Register B
                                 .equ TCF1_CTRLFCLR = 2888		// Control Register F Clear
                                 .equ TCF1_CTRLFSET = 2889		// Control Register F Set
                                 .equ TCF1_CTRLGCLR = 2890		// Control Register G Clear
                                 .equ TCF1_CTRLGSET = 2891		// Control Register G Set
                                 .equ TCF1_INTFLAGS = 2892		// Interrupt Flag Register
                                 .equ TCF1_TEMP = 2895		// Temporary Register For 16-bit Access
                                 .equ TCF1_CNT = 2912		// Count
                                 .equ TCF1_PER = 2918		// Period
                                 .equ TCF1_CCA = 2920		// Compare or Capture A
                                 .equ TCF1_CCB = 2922		// Compare or Capture B
                                 .equ TCF1_PERBUF = 2934		// Period Buffer
                                 .equ TCF1_CCABUF = 2936		// Compare Or Capture A Buffer
                                 .equ TCF1_CCBBUF = 2938		// Compare Or Capture B Buffer
                                 
                                 ;***************************************************************************
                                 ;** HIRESF - High-Resolution Extension F
                                 ;***************************************************************************
                                 	
                                 .equ HIRESF_CTRLA = 2960		// Control Register
                                 
                                 ;***************************************************************************
                                 ;** USARTF0 - Universal Asynchronous Receiver-Transmitter F0
                                 ;***************************************************************************
                                 	
                                 .equ USARTF0_DATA = 2976		// Data Register
                                 .equ USARTF0_STATUS = 2977		// Status Register
                                 .equ USARTF0_CTRLA = 2979		// Control Register A
                                 .equ USARTF0_CTRLB = 2980		// Control Register B
                                 .equ USARTF0_CTRLC = 2981		// Control Register C
                                 .equ USARTF0_BAUDCTRLA = 2982		// Baud Rate Control Register A
                                 .equ USARTF0_BAUDCTRLB = 2983		// Baud Rate Control Register B
                                 
                                 ;***************************************************************************
                                 ;** USARTF1 - Universal Asynchronous Receiver-Transmitter F1
                                 ;***************************************************************************
                                 	
                                 .equ USARTF1_DATA = 2992		// Data Register
                                 .equ USARTF1_STATUS = 2993		// Status Register
                                 .equ USARTF1_CTRLA = 2995		// Control Register A
                                 .equ USARTF1_CTRLB = 2996		// Control Register B
                                 .equ USARTF1_CTRLC = 2997		// Control Register C
                                 .equ USARTF1_BAUDCTRLA = 2998		// Baud Rate Control Register A
                                 .equ USARTF1_BAUDCTRLB = 2999		// Baud Rate Control Register B
                                 
                                 ;***************************************************************************
                                 ;** SPIF - Serial Peripheral Interface F
                                 ;***************************************************************************
                                 	
                                 .equ SPIF_CTRL = 3008		// Control Register
                                 .equ SPIF_INTCTRL = 3009		// Interrupt Control Register
                                 .equ SPIF_STATUS = 3010		// Status Register
                                 .equ SPIF_DATA = 3011		// Data Register
                                 
                                 
                                 ; ***** ALL MODULE BASE ADRESSES *****************************************
                                 
                                 .equ GPIO_base = 0x0000		// General Purpose IO Registers
                                 .equ VPORT0_base = 0x0010		// Virtual Port 0
                                 .equ VPORT1_base = 0x0014		// Virtual Port 1
                                 .equ VPORT2_base = 0x0018		// Virtual Port 2
                                 .equ VPORT3_base = 0x001C		// Virtual Port 3
                                 .equ OCD_base = 0x002E		// On-Chip Debug System
                                 .equ CPU_base = 0x0030		// CPU Registers
                                 .equ CLK_base = 0x0040		// Clock System
                                 .equ SLEEP_base = 0x0048		// Sleep Controller
                                 .equ OSC_base = 0x0050		// Oscillator Control
                                 .equ DFLLRC32M_base = 0x0060		// DFLL for 32MHz RC Oscillator
                                 .equ DFLLRC2M_base = 0x0068		// DFLL for 2MHz RC Oscillator
                                 .equ PR_base = 0x0070		// Power Reduction
                                 .equ RST_base = 0x0078		// Reset Controller
                                 .equ WDT_base = 0x0080		// Watch-Dog Timer
                                 .equ MCU_base = 0x0090		// MCU Control
                                 .equ PMIC_base = 0x00A0		// Programmable Interrupt Controller
                                 .equ PORTCFG_base = 0x00B0		// Port Configuration
                                 .equ AES_base = 0x0C0		// AES Crypto Module
                                 .equ CRC_base = 0x0D0		// CRC Module
                                 .equ DMA_base = 0x0100		// DMA Controller
                                 .equ EVSYS_base = 0x0180		// Event System
                                 .equ NVM_base = 0x01C0		// Non Volatile Memory Controller
                                 .equ ADCA_base = 0x0200		// Analog to Digital Converter A
                                 .equ ADCB_base = 0x0240		// Analog to Digital Converter B
                                 .equ DACA_base = 0x0300		// Digital to Analog Converter A
                                 .equ DACB_base = 0x0320		// Digital to Analog Converter B
                                 .equ ACA_base = 0x0380		// Analog Comparator A
                                 .equ ACB_base = 0x0390		// Analog Comparator B
                                 .equ RTC_base = 0x0400		// Real-Time Counter
                                 .equ EBI_base = 0x0440		// External Bus Interface
                                 .equ TWIC_base = 0x480		// Two-Wire Interface C
                                 .equ TWID_base = 0x490		// Two-Wire Interface D
                                 .equ TWIE_base = 0x4A0		// Two-Wire Interface E
                                 .equ TWIF_base = 0x4B0		// Two-Wire Interface F
                                 .equ USB_base = 0x4C0		// Universal Serial Bus
                                 .equ PORTA_base = 0x0600		// Port A
                                 .equ PORTB_base = 0x0620		// Port B
                                 .equ PORTC_base = 0x0640		// Port C
                                 .equ PORTD_base = 0x0660		// Port D
                                 .equ PORTE_base = 0x0680		// Port E
                                 .equ PORTF_base = 0x06A0		// Port F
                                 .equ PORTH_base = 0x06E0		// Port H
                                 .equ PORTJ_base = 0x0700		// Port J
                                 .equ PORTK_base = 0x0720		// Port K
                                 .equ PORTQ_base = 0x07C0		// Port Q
                                 .equ PORTR_base = 0x07E0		// Port R
                                 .equ TCC0_base = 0x800		// Timer/Counter C0
                                 .equ TCC2_base = 0x800		// Timer/Counter C2
                                 .equ TCC1_base = 0x840		// Timer/Counter C1
                                 .equ AWEXC_base = 0x880		// Advanced Waveform Extension C
                                 .equ HIRESC_base = 0x890		// High-Resolution Extension C
                                 .equ USARTC0_base = 0x8A0		// Universal Asynchronous Receiver-Transmitter C0
                                 .equ USARTC1_base = 0x8B0		// Universal Asynchronous Receiver-Transmitter C1
                                 .equ SPIC_base = 0x8C0		// Serial Peripheral Interface C
                                 .equ IRCOM_base = 0x8F8		// IR Communication Module
                                 .equ TCD0_base = 0x900		// Timer/Counter D0
                                 .equ TCD2_base = 0x900		// Timer/Counter D2
                                 .equ TCD1_base = 0x940		// Timer/Counter D1
                                 .equ HIRESD_base = 0x990		// High-Resolution Extension D
                                 .equ USARTD0_base = 0x9A0		// Universal Asynchronous Receiver-Transmitter D0
                                 .equ USARTD1_base = 0x9B0		// Universal Asynchronous Receiver-Transmitter D1
                                 .equ SPID_base = 0x9C0		// Serial Peripheral Interface D
                                 .equ TCE0_base = 0xA00		// Timer/Counter E0
                                 .equ TCE2_base = 0xA00		// Timer/Counter E2
                                 .equ TCE1_base = 0xA40		// Timer/Counter E1
                                 .equ AWEXE_base = 0xA80		// Advanced Waveform Extension E
                                 .equ HIRESE_base = 0xA90		// High-Resolution Extension E
                                 .equ USARTE0_base = 0xAA0		// Universal Asynchronous Receiver-Transmitter E0
                                 .equ USARTE1_base = 0xAB0		// Universal Asynchronous Receiver-Transmitter E1
                                 .equ SPIE_base = 0xAC0		// Serial Peripheral Interface E
                                 .equ TCF0_base = 0xB00		// Timer/Counter F0
                                 .equ TCF2_base = 0xB00		// Timer/Counter F2
                                 .equ TCF1_base = 0xB40		// Timer/Counter F1
                                 .equ HIRESF_base = 0xB90		// High-Resolution Extension F
                                 .equ USARTF0_base = 0xBA0		// Universal Asynchronous Receiver-Transmitter F0
                                 .equ USARTF1_base = 0xBB0		// Universal Asynchronous Receiver-Transmitter F1
                                 .equ SPIF_base = 0xBC0		// Serial Peripheral Interface F
                                 
                                 
                                 ; ***** IO REGISTER OFFSETS **********************************************
                                 
                                 
                                 ;***************************************************************************
                                 ;** GPIO - General Purpose IO
                                 ;***************************************************************************/
                                 .equ GPIO_GPIOR0_offset = 0x00		// General Purpose IO Register 0
                                 .equ GPIO_GPIOR1_offset = 0x01		// General Purpose IO Register 1
                                 .equ GPIO_GPIOR2_offset = 0x02		// General Purpose IO Register 2
                                 .equ GPIO_GPIOR3_offset = 0x03		// General Purpose IO Register 3
                                 .equ GPIO_GPIOR4_offset = 0x04		// General Purpose IO Register 4
                                 .equ GPIO_GPIOR5_offset = 0x05		// General Purpose IO Register 5
                                 .equ GPIO_GPIOR6_offset = 0x06		// General Purpose IO Register 6
                                 .equ GPIO_GPIOR7_offset = 0x07		// General Purpose IO Register 7
                                 .equ GPIO_GPIOR8_offset = 0x08		// General Purpose IO Register 8
                                 .equ GPIO_GPIOR9_offset = 0x09		// General Purpose IO Register 9
                                 .equ GPIO_GPIORA_offset = 0x0A		// General Purpose IO Register 10
                                 .equ GPIO_GPIORB_offset = 0x0B		// General Purpose IO Register 11
                                 .equ GPIO_GPIORC_offset = 0x0C		// General Purpose IO Register 12
                                 .equ GPIO_GPIORD_offset = 0x0D		// General Purpose IO Register 13
                                 .equ GPIO_GPIORE_offset = 0x0E		// General Purpose IO Register 14
                                 .equ GPIO_GPIORF_offset = 0x0F		// General Purpose IO Register 15
                                 
                                 ;***************************************************************************
                                 ;** VPORT - Virtual Ports
                                 ;***************************************************************************/
                                 .equ VPORT_DIR_offset = 0x00		// I/O Port Data Direction
                                 .equ VPORT_OUT_offset = 0x01		// I/O Port Output
                                 .equ VPORT_IN_offset = 0x02		// I/O Port Input
                                 .equ VPORT_INTFLAGS_offset = 0x03		// Interrupt Flag Register
                                 
                                 ;***************************************************************************
                                 ;** XOCD - On-Chip Debug System
                                 ;***************************************************************************/
                                 .equ OCD_OCDR0_offset = 0x00		// OCD Register 0
                                 .equ OCD_OCDR1_offset = 0x01		// OCD Register 1
                                 
                                 ;***************************************************************************
                                 ;** CPU - CPU
                                 ;***************************************************************************/
                                 .equ CPU_CCP_offset = 0x04		// Configuration Change Protection
                                 .equ CPU_RAMPD_offset = 0x08		// Ramp D
                                 .equ CPU_RAMPX_offset = 0x09		// Ramp X
                                 .equ CPU_RAMPY_offset = 0x0A		// Ramp Y
                                 .equ CPU_RAMPZ_offset = 0x0B		// Ramp Z
                                 .equ CPU_EIND_offset = 0x0C		// Extended Indirect Jump
                                 .equ CPU_SPL_offset = 0x0D		// Stack Pointer Low
                                 .equ CPU_SPH_offset = 0x0E		// Stack Pointer High
                                 .equ CPU_SREG_offset = 0x0F		// Status Register
                                 
                                 ;***************************************************************************
                                 ;** CLK - Clock System
                                 ;***************************************************************************/
                                 .equ CLK_CTRL_offset = 0x00		// Control Register
                                 .equ CLK_PSCTRL_offset = 0x01		// Prescaler Control Register
                                 .equ CLK_LOCK_offset = 0x02		// Lock register
                                 .equ CLK_RTCCTRL_offset = 0x03		// RTC Control Register
                                 .equ CLK_USBCTRL_offset = 0x04		// USB Control Register
                                 .equ PR_PRGEN_offset = 0x00		// General Power Reduction
                                 .equ PR_PRPA_offset = 0x01		// Power Reduction Port A
                                 .equ PR_PRPB_offset = 0x02		// Power Reduction Port B
                                 .equ PR_PRPC_offset = 0x03		// Power Reduction Port C
                                 .equ PR_PRPD_offset = 0x04		// Power Reduction Port D
                                 .equ PR_PRPE_offset = 0x05		// Power Reduction Port E
                                 .equ PR_PRPF_offset = 0x06		// Power Reduction Port F
                                 
                                 ;***************************************************************************
                                 ;** SLEEP - Sleep Controller
                                 ;***************************************************************************/
                                 .equ SLEEP_CTRL_offset = 0x00		// Control Register
                                 
                                 ;***************************************************************************
                                 ;** OSC - Oscillator
                                 ;***************************************************************************/
                                 .equ OSC_CTRL_offset = 0x00		// Control Register
                                 .equ OSC_STATUS_offset = 0x01		// Status Register
                                 .equ OSC_XOSCCTRL_offset = 0x02		// External Oscillator Control Register
                                 .equ OSC_XOSCFAIL_offset = 0x03		// Oscillator Failure Detection Register
                                 .equ OSC_RC32KCAL_offset = 0x04		// 32.768 kHz Internal Oscillator Calibration Register
                                 .equ OSC_PLLCTRL_offset = 0x05		// PLL Control Register
                                 .equ OSC_DFLLCTRL_offset = 0x06		// DFLL Control Register
                                 
                                 ;***************************************************************************
                                 ;** DFLL - DFLL
                                 ;***************************************************************************/
                                 .equ DFLL_CTRL_offset = 0x00		// Control Register
                                 .equ DFLL_CALA_offset = 0x02		// Calibration Register A
                                 .equ DFLL_CALB_offset = 0x03		// Calibration Register B
                                 .equ DFLL_COMP0_offset = 0x04		// Oscillator Compare Register 0
                                 .equ DFLL_COMP1_offset = 0x05		// Oscillator Compare Register 1
                                 .equ DFLL_COMP2_offset = 0x06		// Oscillator Compare Register 2
                                 
                                 ;***************************************************************************
                                 ;** RST - Reset
                                 ;***************************************************************************/
                                 .equ RST_STATUS_offset = 0x00		// Status Register
                                 .equ RST_CTRL_offset = 0x01		// Control Register
                                 
                                 ;***************************************************************************
                                 ;** WDT - Watch-Dog Timer
                                 ;***************************************************************************/
                                 .equ WDT_CTRL_offset = 0x00		// Control
                                 .equ WDT_WINCTRL_offset = 0x01		// Windowed Mode Control
                                 .equ WDT_STATUS_offset = 0x02		// Status
                                 
                                 ;***************************************************************************
                                 ;** MCU - MCU Control
                                 ;***************************************************************************/
                                 .equ MCU_DEVID0_offset = 0x00		// Device ID byte 0
                                 .equ MCU_DEVID1_offset = 0x01		// Device ID byte 1
                                 .equ MCU_DEVID2_offset = 0x02		// Device ID byte 2
                                 .equ MCU_REVID_offset = 0x03		// Revision ID
                                 .equ MCU_JTAGUID_offset = 0x04		// JTAG User ID
                                 .equ MCU_MCUCR_offset = 0x06		// MCU Control
                                 .equ MCU_ANAINIT_offset = 0x07		// Analog Startup Delay
                                 .equ MCU_EVSYSLOCK_offset = 0x08		// Event System Lock
                                 .equ MCU_AWEXLOCK_offset = 0x09		// AWEX Lock
                                 
                                 ;***************************************************************************
                                 ;** PMIC - Programmable Multi-level Interrupt Controller
                                 ;***************************************************************************/
                                 .equ PMIC_STATUS_offset = 0x00		// Status Register
                                 .equ PMIC_INTPRI_offset = 0x01		// Interrupt Priority
                                 .equ PMIC_CTRL_offset = 0x02		// Control Register
                                 
                                 ;***************************************************************************
                                 ;** PORTCFG - Port Configuration
                                 ;***************************************************************************/
                                 .equ PORTCFG_MPCMASK_offset = 0x00		// Multi-pin Configuration Mask
                                 .equ PORTCFG_VPCTRLA_offset = 0x02		// Virtual Port Control Register A
                                 .equ PORTCFG_VPCTRLB_offset = 0x03		// Virtual Port Control Register B
                                 .equ PORTCFG_CLKEVOUT_offset = 0x04		// Clock and Event Out Register
                                 .equ PORTCFG_EBIOUT_offset = 0x05       // EBI Output register
                                 .equ PORTCFG_EVOUTSEL_offset = 0x06		// Event Output Select
                                 
                                 ;***************************************************************************
                                 ;** AES - AES Module
                                 ;***************************************************************************/
                                 .equ AES_CTRL_offset = 0x00		// AES Control Register
                                 .equ AES_STATUS_offset = 0x01		// AES Status Register
                                 .equ AES_STATE_offset = 0x02		// AES State Register
                                 .equ AES_KEY_offset = 0x03		// AES Key Register
                                 .equ AES_INTCTRL_offset = 0x04		// AES Interrupt Control Register
                                 
                                 ;***************************************************************************
                                 ;** CRC - Cyclic Redundancy Checker
                                 ;***************************************************************************/
                                 .equ CRC_CTRL_offset = 0x00		// Control Register
                                 .equ CRC_STATUS_offset = 0x01		// Status Register
                                 .equ CRC_DATAIN_offset = 0x03		// Data Input
                                 .equ CRC_CHECKSUM0_offset = 0x04		// Checksum byte 0
                                 .equ CRC_CHECKSUM1_offset = 0x05		// Checksum byte 1
                                 .equ CRC_CHECKSUM2_offset = 0x06		// Checksum byte 2
                                 .equ CRC_CHECKSUM3_offset = 0x07		// Checksum byte 3
                                 
                                 ;***************************************************************************
                                 ;** DMA - DMA Controller
                                 ;***************************************************************************/
                                 .equ DMA_CH_CTRLA_offset = 0x00		// Channel Control
                                 .equ DMA_CH_CTRLB_offset = 0x01		// Channel Control
                                 .equ DMA_CH_ADDRCTRL_offset = 0x02		// Address Control
                                 .equ DMA_CH_TRIGSRC_offset = 0x03		// Channel Trigger Source
                                 .equ DMA_CH_TRIGSRC_AES_gc = (0x04<<0) ; AES
                                 .equ DMA_CH_TRFCNT_offset = 0x04		// Channel Block Transfer Count
                                 .equ DMA_CH_REPCNT_offset = 0x06		// Channel Repeat Count
                                 .equ DMA_CH_SRCADDR0_offset = 0x08		// Channel Source Address 0
                                 .equ DMA_CH_SRCADDR1_offset = 0x09		// Channel Source Address 1
                                 .equ DMA_CH_SRCADDR2_offset = 0x0A		// Channel Source Address 2
                                 .equ DMA_CH_DESTADDR0_offset = 0x0C		// Channel Destination Address 0
                                 .equ DMA_CH_DESTADDR1_offset = 0x0D		// Channel Destination Address 1
                                 .equ DMA_CH_DESTADDR2_offset = 0x0E		// Channel Destination Address 2
                                 .equ DMA_CTRL_offset = 0x00		// Control
                                 .equ DMA_INTFLAGS_offset = 0x03		// Transfer Interrupt Status
                                 .equ DMA_STATUS_offset = 0x04		// Status
                                 .equ DMA_TEMP_offset = 0x06		// Temporary Register For 16/24-bit Access
                                 .equ DMA_CH0_offset = 0x10		// DMA Channel 0
                                 .equ DMA_CH1_offset = 0x20		// DMA Channel 1
                                 .equ DMA_CH2_offset = 0x30		// DMA Channel 2
                                 .equ DMA_CH3_offset = 0x40		// DMA Channel 3
                                 
                                 ;***************************************************************************
                                 ;** EVSYS - Event System
                                 ;***************************************************************************/
                                 .equ EVSYS_CH0MUX_offset = 0x00		// Event Channel 0 Multiplexer
                                 .equ EVSYS_CH1MUX_offset = 0x01		// Event Channel 1 Multiplexer
                                 .equ EVSYS_CH2MUX_offset = 0x02		// Event Channel 2 Multiplexer
                                 .equ EVSYS_CH3MUX_offset = 0x03		// Event Channel 3 Multiplexer
                                 .equ EVSYS_CH4MUX_offset = 0x04		// Event Channel 4 Multiplexer
                                 .equ EVSYS_CH5MUX_offset = 0x05		// Event Channel 5 Multiplexer
                                 .equ EVSYS_CH6MUX_offset = 0x06		// Event Channel 6 Multiplexer
                                 .equ EVSYS_CH7MUX_offset = 0x07		// Event Channel 7 Multiplexer
                                 .equ EVSYS_CH0CTRL_offset = 0x08		// Channel 0 Control Register
                                 .equ EVSYS_CH1CTRL_offset = 0x09		// Channel 1 Control Register
                                 .equ EVSYS_CH2CTRL_offset = 0x0A		// Channel 2 Control Register
                                 .equ EVSYS_CH3CTRL_offset = 0x0B		// Channel 3 Control Register
                                 .equ EVSYS_CH4CTRL_offset = 0x0C		// Channel 4 Control Register
                                 .equ EVSYS_CH5CTRL_offset = 0x0D		// Channel 5 Control Register
                                 .equ EVSYS_CH6CTRL_offset = 0x0E		// Channel 6 Control Register
                                 .equ EVSYS_CH7CTRL_offset = 0x0F		// Channel 7 Control Register
                                 .equ EVSYS_STROBE_offset = 0x10		// Event Strobe
                                 .equ EVSYS_DATA_offset = 0x11		// Event Data
                                 
                                 ;***************************************************************************
                                 ;** NVM - Non Volatile Memory Controller
                                 ;***************************************************************************/
                                 .equ NVM_ADDR0_offset = 0x00		// Address Register 0
                                 .equ NVM_ADDR1_offset = 0x01		// Address Register 1
                                 .equ NVM_ADDR2_offset = 0x02		// Address Register 2
                                 .equ NVM_DATA0_offset = 0x04		// Data Register 0
                                 .equ NVM_DATA1_offset = 0x05		// Data Register 1
                                 .equ NVM_DATA2_offset = 0x06		// Data Register 2
                                 .equ NVM_CMD_offset = 0x0A		// Command
                                 .equ NVM_CTRLA_offset = 0x0B		// Control Register A
                                 .equ NVM_CTRLB_offset = 0x0C		// Control Register B
                                 .equ NVM_INTCTRL_offset = 0x0D		// Interrupt Control
                                 .equ NVM_STATUS_offset = 0x0F		// Status
                                 .equ NVM_LOCKBITS_offset = 0x10		// Lock Bits
                                 
                                 ;***************************************************************************
                                 ;** ADC - Analog/Digital Converter
                                 ;***************************************************************************/
                                 .equ ADC_CH_CTRL_offset = 0x00		// Control Register
                                 .equ ADC_CH_MUXCTRL_offset = 0x01		// MUX Control
                                 .equ ADC_CH_INTCTRL_offset = 0x02		// Channel Interrupt Control Register
                                 .equ ADC_CH_INTFLAGS_offset = 0x03		// Interrupt Flags
                                 .equ ADC_CH_RES_offset = 0x04		// Channel Result
                                 .equ ADC_CH_SCAN_offset = 0x06		// Input Channel Scan
                                 .equ ADC_CTRLA_offset = 0x00		// Control Register A
                                 .equ ADC_CTRLB_offset = 0x01		// Control Register B
                                 .equ ADC_REFCTRL_offset = 0x02		// Reference Control
                                 .equ ADC_EVCTRL_offset = 0x03		// Event Control
                                 .equ ADC_PRESCALER_offset = 0x04		// Clock Prescaler
                                 .equ ADC_INTFLAGS_offset = 0x06		// Interrupt Flags
                                 .equ ADC_TEMP_offset = 0x07		// Temporary Register
                                 .equ ADC_CAL_offset = 0x0C		// Calibration Value
                                 .equ ADC_CH0RES_offset = 0x10		// Channel 0 Result
                                 .equ ADC_CH1RES_offset = 0x12		// Channel 1 Result
                                 .equ ADC_CH2RES_offset = 0x14		// Channel 2 Result
                                 .equ ADC_CH3RES_offset = 0x16		// Channel 3 Result
                                 .equ ADC_CMP_offset = 0x18		// Compare Value
                                 .equ ADC_CH0_offset = 0x20		// ADC Channel 0
                                 .equ ADC_CH1_offset = 0x28		// ADC Channel 1
                                 .equ ADC_CH2_offset = 0x30		// ADC Channel 2
                                 .equ ADC_CH3_offset = 0x38		// ADC Channel 3
                                 
                                 ;***************************************************************************
                                 ;** DAC - Digital/Analog Converter
                                 ;***************************************************************************/
                                 .equ DAC_CTRLA_offset = 0x00		// Control Register A
                                 .equ DAC_CTRLB_offset = 0x01		// Control Register B
                                 .equ DAC_CTRLC_offset = 0x02		// Control Register C
                                 .equ DAC_EVCTRL_offset = 0x03		// Event Input Control
                                 .equ DAC_STATUS_offset = 0x05		// Status
                                 .equ DAC_CH0GAINCAL_offset = 0x08		// Gain Calibration
                                 .equ DAC_CH0OFFSETCAL_offset = 0x09		// Offset Calibration
                                 .equ DAC_CH1GAINCAL_offset = 0x0A		// Gain Calibration
                                 .equ DAC_CH1OFFSETCAL_offset = 0x0B		// Offset Calibration
                                 .equ DAC_CH0DATA_offset = 0x18		// Channel 0 Data
                                 .equ DAC_CH1DATA_offset = 0x1A		// Channel 1 Data
                                 
                                 ;***************************************************************************
                                 ;** AC - Analog Comparator
                                 ;***************************************************************************/
                                 .equ AC_AC0CTRL_offset = 0x00		// Analog Comparator 0 Control
                                 .equ AC_AC1CTRL_offset = 0x01		// Analog Comparator 1 Control
                                 .equ AC_AC0MUXCTRL_offset = 0x02		// Analog Comparator 0 MUX Control
                                 .equ AC_AC1MUXCTRL_offset = 0x03		// Analog Comparator 1 MUX Control
                                 .equ AC_CTRLA_offset = 0x04		// Control Register A
                                 .equ AC_CTRLB_offset = 0x05		// Control Register B
                                 .equ AC_WINCTRL_offset = 0x06		// Window Mode Control
                                 .equ AC_STATUS_offset = 0x07		// Status
                                 
                                 ;***************************************************************************
                                 ;** RTC - Real-Time Counter
                                 ;***************************************************************************/
                                 .equ RTC_CTRL_offset = 0x00		// Control Register
                                 .equ RTC_STATUS_offset = 0x01		// Status Register
                                 .equ RTC_INTCTRL_offset = 0x02		// Interrupt Control Register
                                 .equ RTC_INTFLAGS_offset = 0x03		// Interrupt Flags
                                 .equ RTC_TEMP_offset = 0x04		// Temporary register
                                 .equ RTC_CNT_offset = 0x08		// Count Register
                                 .equ RTC_PER_offset = 0x0A		// Period Register
                                 .equ RTC_COMP_offset = 0x0C		// Compare Register
                                 
                                 ;***************************************************************************
                                 ;** EBI - External Bus Interface
                                 ;***************************************************************************/
                                 .equ EBI_CS_CTRLA_offset = 0x00		// Chip Select Control Register A
                                 .equ EBI_CS_CTRLB_offset = 0x01		// Chip Select Control Register B
                                 .equ EBI_CS_BASEADDR_offset = 0x02		// Chip Select Base Address
                                 .equ EBI_CTRL_offset = 0x00		// Control
                                 .equ EBI_SDRAMCTRLA_offset = 0x01		// SDRAM Control Register A
                                 .equ EBI_REFRESH_offset = 0x04		// SDRAM Refresh Period
                                 .equ EBI_INITDLY_offset = 0x06		// SDRAM Initialization Delay
                                 .equ EBI_SDRAMCTRLB_offset = 0x08		// SDRAM Control Register B
                                 .equ EBI_SDRAMCTRLC_offset = 0x09		// SDRAM Control Register C
                                 .equ EBI_CS0_offset = 0x10		// Chip Select 0
                                 .equ EBI_CS1_offset = 0x14		// Chip Select 1
                                 .equ EBI_CS2_offset = 0x18		// Chip Select 2
                                 .equ EBI_CS3_offset = 0x1C		// Chip Select 3
                                 
                                 ;***************************************************************************
                                 ;** TWI - Two-Wire Interface
                                 ;***************************************************************************/
                                 .equ TWI_MASTER_CTRLA_offset = 0x00		// Control Register A
                                 .equ TWI_MASTER_CTRLB_offset = 0x01		// Control Register B
                                 .equ TWI_MASTER_CTRLC_offset = 0x02		// Control Register C
                                 .equ TWI_MASTER_STATUS_offset = 0x03		// Status Register
                                 .equ TWI_MASTER_BAUD_offset = 0x04		// Baurd Rate Control Register
                                 .equ TWI_MASTER_ADDR_offset = 0x05		// Address Register
                                 .equ TWI_MASTER_DATA_offset = 0x06		// Data Register
                                 .equ TWI_SLAVE_CTRLA_offset = 0x00		// Control Register A
                                 .equ TWI_SLAVE_CTRLB_offset = 0x01		// Control Register B
                                 .equ TWI_SLAVE_STATUS_offset = 0x02		// Status Register
                                 .equ TWI_SLAVE_ADDR_offset = 0x03		// Address Register
                                 .equ TWI_SLAVE_DATA_offset = 0x04		// Data Register
                                 .equ TWI_SLAVE_ADDRMASK_offset = 0x05		// Address Mask Register
                                 .equ TWI_CTRL_offset = 0x00		// TWI Common Control Register
                                 .equ TWI_MASTER_offset = 0x0001		// TWI master module
                                 .equ TWI_SLAVE_offset = 0x0008		// TWI slave module
                                 
                                 ;***************************************************************************
                                 ;** USB - USB
                                 ;***************************************************************************/
                                 .equ USB_EP_STATUS_offset = 0x00		// Endpoint Status
                                 .equ USB_EP_CTRL_offset = 0x01		// Endpoint Control
                                 .equ USB_EP_CNT_offset = 0x02		// USB Endpoint Counter
                                 .equ USB_EP_DATAPTR_offset = 0x04		// Data Pointer
                                 .equ USB_EP_AUXDATA_offset = 0x06		// Auxiliary Data
                                 .equ USB_CTRLA_offset = 0x00		// Control Register A
                                 .equ USB_CTRLB_offset = 0x01		// Control Register B
                                 .equ USB_STATUS_offset = 0x02		// Status Register
                                 .equ USB_ADDR_offset = 0x03		// Address Register
                                 .equ USB_FIFOWP_offset = 0x04		// FIFO Write Pointer Register
                                 .equ USB_FIFORP_offset = 0x05		// FIFO Read Pointer Register
                                 .equ USB_EPPTR_offset = 0x06		// Endpoint Configuration Table Pointer
                                 .equ USB_INTCTRLA_offset = 0x08		// Interrupt Control Register A
                                 .equ USB_INTCTRLB_offset = 0x09		// Interrupt Control Register B
                                 .equ USB_INTFLAGSACLR_offset = 0x0A		// Clear Interrupt Flag Register A
                                 .equ USB_INTFLAGSASET_offset = 0x0B		// Set Interrupt Flag Register A
                                 .equ USB_INTFLAGSBCLR_offset = 0x0C		// Clear Interrupt Flag Register B
                                 .equ USB_INTFLAGSBSET_offset = 0x0D		// Set Interrupt Flag Register B
                                 .equ USB_CAL0_offset = 0x3A		// Calibration Byte 0
                                 .equ USB_CAL1_offset = 0x3B		// Calibration Byte 1
                                 .equ USB_EP_TABLE_EP0OUT_offset = 0x00		// Endpoint 0
                                 .equ USB_EP_TABLE_EP0IN_offset = 0x08		// Endpoint 0
                                 .equ USB_EP_TABLE_EP1OUT_offset = 0x10		// Endpoint 1
                                 .equ USB_EP_TABLE_EP1IN_offset = 0x18		// Endpoint 1
                                 .equ USB_EP_TABLE_EP2OUT_offset = 0x20		// Endpoint 2
                                 .equ USB_EP_TABLE_EP2IN_offset = 0x28		// Endpoint 2
                                 .equ USB_EP_TABLE_EP3OUT_offset = 0x30		// Endpoint 3
                                 .equ USB_EP_TABLE_EP3IN_offset = 0x38		// Endpoint 3
                                 .equ USB_EP_TABLE_EP4OUT_offset = 0x40		// Endpoint 4
                                 .equ USB_EP_TABLE_EP4IN_offset = 0x48		// Endpoint 4
                                 .equ USB_EP_TABLE_EP5OUT_offset = 0x50		// Endpoint 5
                                 .equ USB_EP_TABLE_EP5IN_offset = 0x58		// Endpoint 5
                                 .equ USB_EP_TABLE_EP6OUT_offset = 0x60		// Endpoint 6
                                 .equ USB_EP_TABLE_EP6IN_offset = 0x68		// Endpoint 6
                                 .equ USB_EP_TABLE_EP7OUT_offset = 0x70		// Endpoint 7
                                 .equ USB_EP_TABLE_EP7IN_offset = 0x78		// Endpoint 7
                                 .equ USB_EP_TABLE_EP8OUT_offset = 0x80		// Endpoint 8
                                 .equ USB_EP_TABLE_EP8IN_offset = 0x88		// Endpoint 8
                                 .equ USB_EP_TABLE_EP9OUT_offset = 0x90		// Endpoint 9
                                 .equ USB_EP_TABLE_EP9IN_offset = 0x98		// Endpoint 9
                                 .equ USB_EP_TABLE_EP10OUT_offset = 0xA0		// Endpoint 10
                                 .equ USB_EP_TABLE_EP10IN_offset = 0xA8		// Endpoint 10
                                 .equ USB_EP_TABLE_EP11OUT_offset = 0xB0		// Endpoint 11
                                 .equ USB_EP_TABLE_EP11IN_offset = 0xB8		// Endpoint 11
                                 .equ USB_EP_TABLE_EP12OUT_offset = 0xC0		// Endpoint 12
                                 .equ USB_EP_TABLE_EP12IN_offset = 0xC8		// Endpoint 12
                                 .equ USB_EP_TABLE_EP13OUT_offset = 0xD0		// Endpoint 13
                                 .equ USB_EP_TABLE_EP13IN_offset = 0xD8		// Endpoint 13
                                 .equ USB_EP_TABLE_EP14OUT_offset = 0xE0		// Endpoint 14
                                 .equ USB_EP_TABLE_EP14IN_offset = 0xE8		// Endpoint 14
                                 .equ USB_EP_TABLE_EP15OUT_offset = 0xF0		// Endpoint 15
                                 .equ USB_EP_TABLE_EP15IN_offset = 0xF8		// Endpoint 15
                                 .equ USB_EP_TABLE_FRAMENUML_offset = 0x110		// Frame Number Low Byte
                                 .equ USB_EP_TABLE_FRAMENUMH_offset = 0x111		// Frame Number High Byte
                                 
                                 ;***************************************************************************
                                 ;** PORT - I/O Port Configuration
                                 ;***************************************************************************/
                                 .equ PORT_DIR_offset = 0x00		// I/O Port Data Direction
                                 .equ PORT_DIRSET_offset = 0x01		// I/O Port Data Direction Set
                                 .equ PORT_DIRCLR_offset = 0x02		// I/O Port Data Direction Clear
                                 .equ PORT_DIRTGL_offset = 0x03		// I/O Port Data Direction Toggle
                                 .equ PORT_OUT_offset = 0x04		// I/O Port Output
                                 .equ PORT_OUTSET_offset = 0x05		// I/O Port Output Set
                                 .equ PORT_OUTCLR_offset = 0x06		// I/O Port Output Clear
                                 .equ PORT_OUTTGL_offset = 0x07		// I/O Port Output Toggle
                                 .equ PORT_IN_offset = 0x08		// I/O port Input
                                 .equ PORT_INTCTRL_offset = 0x09		// Interrupt Control Register
                                 .equ PORT_INT0MASK_offset = 0x0A		// Port Interrupt 0 Mask
                                 .equ PORT_INT1MASK_offset = 0x0B		// Port Interrupt 1 Mask
                                 .equ PORT_INTFLAGS_offset = 0x0C		// Interrupt Flag Register
                                 .equ PORT_REMAP_offset = 0x0E		// I/O Port Pin Remap Register
                                 .equ PORT_PIN0CTRL_offset = 0x10		// Pin 0 Control Register
                                 .equ PORT_PIN1CTRL_offset = 0x11		// Pin 1 Control Register
                                 .equ PORT_PIN2CTRL_offset = 0x12		// Pin 2 Control Register
                                 .equ PORT_PIN3CTRL_offset = 0x13		// Pin 3 Control Register
                                 .equ PORT_PIN4CTRL_offset = 0x14		// Pin 4 Control Register
                                 .equ PORT_PIN5CTRL_offset = 0x15		// Pin 5 Control Register
                                 .equ PORT_PIN6CTRL_offset = 0x16		// Pin 6 Control Register
                                 .equ PORT_PIN7CTRL_offset = 0x17		// Pin 7 Control Register
                                 
                                 ;***************************************************************************
                                 ;** TC - 16-bit Timer/Counter With PWM
                                 ;***************************************************************************/
                                 .equ TC0_CTRLA_offset = 0x00		// Control  Register A
                                 .equ TC0_CTRLB_offset = 0x01		// Control Register B
                                 .equ TC0_CTRLC_offset = 0x02		// Control register C
                                 .equ TC0_CTRLD_offset = 0x03		// Control Register D
                                 .equ TC0_CTRLE_offset = 0x04		// Control Register E
                                 .equ TC0_INTCTRLA_offset = 0x06		// Interrupt Control Register A
                                 .equ TC0_INTCTRLB_offset = 0x07		// Interrupt Control Register B
                                 .equ TC0_CTRLFCLR_offset = 0x08		// Control Register F Clear
                                 .equ TC0_CTRLFSET_offset = 0x09		// Control Register F Set
                                 .equ TC0_CTRLGCLR_offset = 0x0A		// Control Register G Clear
                                 .equ TC0_CTRLGSET_offset = 0x0B		// Control Register G Set
                                 .equ TC0_INTFLAGS_offset = 0x0C		// Interrupt Flag Register
                                 .equ TC0_TEMP_offset = 0x0F		// Temporary Register For 16-bit Access
                                 .equ TC0_CNT_offset = 0x20		// Count
                                 .equ TC0_PER_offset = 0x26		// Period
                                 .equ TC0_CCA_offset = 0x28		// Compare or Capture A
                                 .equ TC0_CCB_offset = 0x2A		// Compare or Capture B
                                 .equ TC0_CCC_offset = 0x2C		// Compare or Capture C
                                 .equ TC0_CCD_offset = 0x2E		// Compare or Capture D
                                 .equ TC0_PERBUF_offset = 0x36		// Period Buffer
                                 .equ TC0_CCABUF_offset = 0x38		// Compare Or Capture A Buffer
                                 .equ TC0_CCBBUF_offset = 0x3A		// Compare Or Capture B Buffer
                                 .equ TC0_CCCBUF_offset = 0x3C		// Compare Or Capture C Buffer
                                 .equ TC0_CCDBUF_offset = 0x3E		// Compare Or Capture D Buffer
                                 .equ TC1_CTRLA_offset = 0x00		// Control  Register A
                                 .equ TC1_CTRLB_offset = 0x01		// Control Register B
                                 .equ TC1_CTRLC_offset = 0x02		// Control register C
                                 .equ TC1_CTRLD_offset = 0x03		// Control Register D
                                 .equ TC1_CTRLE_offset = 0x04		// Control Register E
                                 .equ TC1_INTCTRLA_offset = 0x06		// Interrupt Control Register A
                                 .equ TC1_INTCTRLB_offset = 0x07		// Interrupt Control Register B
                                 .equ TC1_CTRLFCLR_offset = 0x08		// Control Register F Clear
                                 .equ TC1_CTRLFSET_offset = 0x09		// Control Register F Set
                                 .equ TC1_CTRLGCLR_offset = 0x0A		// Control Register G Clear
                                 .equ TC1_CTRLGSET_offset = 0x0B		// Control Register G Set
                                 .equ TC1_INTFLAGS_offset = 0x0C		// Interrupt Flag Register
                                 .equ TC1_TEMP_offset = 0x0F		// Temporary Register For 16-bit Access
                                 .equ TC1_CNT_offset = 0x20		// Count
                                 .equ TC1_PER_offset = 0x26		// Period
                                 .equ TC1_CCA_offset = 0x28		// Compare or Capture A
                                 .equ TC1_CCB_offset = 0x2A		// Compare or Capture B
                                 .equ TC1_PERBUF_offset = 0x36		// Period Buffer
                                 .equ TC1_CCABUF_offset = 0x38		// Compare Or Capture A Buffer
                                 .equ TC1_CCBBUF_offset = 0x3A		// Compare Or Capture B Buffer
                                 
                                 ;***************************************************************************
                                 ;** TC2 - 16-bit Timer/Counter type 2
                                 ;***************************************************************************/
                                 .equ TC2_CTRLA_offset = 0x00		// Control Register A
                                 .equ TC2_CTRLB_offset = 0x01		// Control Register B
                                 .equ TC2_CTRLC_offset = 0x02		// Control register C
                                 .equ TC2_CTRLE_offset = 0x04		// Control Register E
                                 .equ TC2_INTCTRLA_offset = 0x06		// Interrupt Control Register A
                                 .equ TC2_INTCTRLB_offset = 0x07		// Interrupt Control Register B
                                 .equ TC2_CTRLF_offset = 0x09		// Control Register F
                                 .equ TC2_INTFLAGS_offset = 0x0C		// Interrupt Flag Register
                                 .equ TC2_LCNT_offset = 0x20		// Low Byte Count
                                 .equ TC2_HCNT_offset = 0x21		// High Byte Count
                                 .equ TC2_LPER_offset = 0x26		// Low Byte Period
                                 .equ TC2_HPER_offset = 0x27		// High Byte Period
                                 .equ TC2_LCMPA_offset = 0x28		// Low Byte Compare A
                                 .equ TC2_HCMPA_offset = 0x29		// High Byte Compare A
                                 .equ TC2_LCMPB_offset = 0x2A		// Low Byte Compare B
                                 .equ TC2_HCMPB_offset = 0x2B		// High Byte Compare B
                                 .equ TC2_LCMPC_offset = 0x2C		// Low Byte Compare C
                                 .equ TC2_HCMPC_offset = 0x2D		// High Byte Compare C
                                 .equ TC2_LCMPD_offset = 0x2E		// Low Byte Compare D
                                 .equ TC2_HCMPD_offset = 0x2F		// High Byte Compare D
                                 
                                 ;***************************************************************************
                                 ;** AWEX - Timer/Counter Advanced Waveform Extension
                                 ;***************************************************************************/
                                 .equ AWEX_CTRL_offset = 0x00		// Control Register
                                 .equ AWEX_FDEMASK_offset = 0x02		// Fault Detection Event Mask
                                 .equ AWEX_FDCTRL_offset = 0x03		// Fault Detection Control Register
                                 .equ AWEX_STATUS_offset = 0x04		// Status Register
                                 .equ AWEX_STATUSSET_offset = 0x05		// Status Set Register
                                 .equ AWEX_DTBOTH_offset = 0x06		// Dead Time Both Sides
                                 .equ AWEX_DTBOTHBUF_offset = 0x07		// Dead Time Both Sides Buffer
                                 .equ AWEX_DTLS_offset = 0x08		// Dead Time Low Side
                                 .equ AWEX_DTHS_offset = 0x09		// Dead Time High Side
                                 .equ AWEX_DTLSBUF_offset = 0x0A		// Dead Time Low Side Buffer
                                 .equ AWEX_DTHSBUF_offset = 0x0B		// Dead Time High Side Buffer
                                 .equ AWEX_OUTOVEN_offset = 0x0C		// Output Override Enable
                                 
                                 ;***************************************************************************
                                 ;** HIRES - Timer/Counter High-Resolution Extension
                                 ;***************************************************************************/
                                 .equ HIRES_CTRLA_offset = 0x00		// Control Register
                                 
                                 ;***************************************************************************
                                 ;** USART - Universal Asynchronous Receiver-Transmitter
                                 ;***************************************************************************/
                                 .equ USART_DATA_offset = 0x00		// Data Register
                                 .equ USART_STATUS_offset = 0x01		// Status Register
                                 .equ USART_CTRLA_offset = 0x03		// Control Register A
                                 .equ USART_CTRLB_offset = 0x04		// Control Register B
                                 .equ USART_CTRLC_offset = 0x05		// Control Register C
                                 .equ USART_BAUDCTRLA_offset = 0x06		// Baud Rate Control Register A
                                 .equ USART_BAUDCTRLB_offset = 0x07		// Baud Rate Control Register B
                                 
                                 ;***************************************************************************
                                 ;** SPI - Serial Peripheral Interface
                                 ;***************************************************************************/
                                 .equ SPI_CTRL_offset = 0x00		// Control Register
                                 .equ SPI_INTCTRL_offset = 0x01		// Interrupt Control Register
                                 .equ SPI_STATUS_offset = 0x02		// Status Register
                                 .equ SPI_DATA_offset = 0x03		// Data Register
                                 
                                 ;***************************************************************************
                                 ;** IRCOM - IR Communication Module
                                 ;***************************************************************************/
                                 .equ IRCOM_CTRL_offset = 0x00		// Control Register
                                 .equ IRCOM_TXPLCTRL_offset = 0x01		// IrDA Transmitter Pulse Length Control Register
                                 .equ IRCOM_RXPLCTRL_offset = 0x02		// IrDA Receiver Pulse Length Control Register
                                 
                                 ;***************************************************************************
                                 ;** FUSE - Fuses and Lockbits
                                 ;***************************************************************************/
                                 .equ NVM_LOCKBITS_LOCKBITS_offset = 0x00		// Lock Bits
                                 .equ NVM_FUSES_FUSEBYTE0_offset = 0x00		// JTAG User ID
                                 .equ NVM_FUSES_FUSEBYTE1_offset = 0x01		// Watchdog Configuration
                                 .equ NVM_FUSES_FUSEBYTE2_offset = 0x02		// Reset Configuration
                                 .equ NVM_FUSES_FUSEBYTE4_offset = 0x04		// Start-up Configuration
                                 .equ NVM_FUSES_FUSEBYTE5_offset = 0x05		// EESAVE and BOD Level
                                 
                                 ;***************************************************************************
                                 ;** SIGROW - Signature Row
                                 ;***************************************************************************/
                                 .equ NVM_PROD_SIGNATURES_RCOSC2M_offset = 0x00		// RCOSC 2 MHz Calibration Value B
                                 .equ NVM_PROD_SIGNATURES_RCOSC2MA_offset = 0x01		// RCOSC 2 MHz Calibration Value A
                                 .equ NVM_PROD_SIGNATURES_RCOSC32K_offset = 0x02		// RCOSC 32.768 kHz Calibration Value
                                 .equ NVM_PROD_SIGNATURES_RCOSC32M_offset = 0x03		// RCOSC 32 MHz Calibration Value B
                                 .equ NVM_PROD_SIGNATURES_RCOSC32MA_offset = 0x04		// RCOSC 32 MHz Calibration Value A
                                 .equ NVM_PROD_SIGNATURES_LOTNUM0_offset = 0x08		// Lot Number Byte 0, ASCII
                                 .equ NVM_PROD_SIGNATURES_LOTNUM1_offset = 0x09		// Lot Number Byte 1, ASCII
                                 .equ NVM_PROD_SIGNATURES_LOTNUM2_offset = 0x0A		// Lot Number Byte 2, ASCII
                                 .equ NVM_PROD_SIGNATURES_LOTNUM3_offset = 0x0B		// Lot Number Byte 3, ASCII
                                 .equ NVM_PROD_SIGNATURES_LOTNUM4_offset = 0x0C		// Lot Number Byte 4, ASCII
                                 .equ NVM_PROD_SIGNATURES_LOTNUM5_offset = 0x0D		// Lot Number Byte 5, ASCII
                                 .equ NVM_PROD_SIGNATURES_WAFNUM_offset = 0x10		// Wafer Number
                                 .equ NVM_PROD_SIGNATURES_COORDX0_offset = 0x12		// Wafer Coordinate X Byte 0
                                 .equ NVM_PROD_SIGNATURES_COORDX1_offset = 0x13		// Wafer Coordinate X Byte 1
                                 .equ NVM_PROD_SIGNATURES_COORDY0_offset = 0x14		// Wafer Coordinate Y Byte 0
                                 .equ NVM_PROD_SIGNATURES_COORDY1_offset = 0x15		// Wafer Coordinate Y Byte 1
                                 .equ NVM_PROD_SIGNATURES_USBCAL0_offset = 0x1A		// USB Calibration Byte 0
                                 .equ NVM_PROD_SIGNATURES_USBCAL1_offset = 0x1B		// USB Calibration Byte 1
                                 .equ NVM_PROD_SIGNATURES_USBRCOSC_offset = 0x1C		// USB RCOSC Calibration Value B
                                 .equ NVM_PROD_SIGNATURES_USBRCOSCA_offset = 0x1D		// USB RCOSC Calibration Value A
                                 .equ NVM_PROD_SIGNATURES_ADCACAL0_offset = 0x20		// ADCA Calibration Byte 0
                                 .equ NVM_PROD_SIGNATURES_ADCACAL1_offset = 0x21		// ADCA Calibration Byte 1
                                 .equ NVM_PROD_SIGNATURES_ADCBCAL0_offset = 0x24		// ADCB Calibration Byte 0
                                 .equ NVM_PROD_SIGNATURES_ADCBCAL1_offset = 0x25		// ADCB Calibration Byte 1
                                 .equ NVM_PROD_SIGNATURES_TEMPSENSE0_offset = 0x2E		// Temperature Sensor Calibration Byte 0
                                 .equ NVM_PROD_SIGNATURES_TEMPSENSE1_offset = 0x2F		// Temperature Sensor Calibration Byte 1
                                 .equ NVM_PROD_SIGNATURES_DACA0OFFCAL_offset = 0x30		// DACA0 Calibration Byte 0
                                 .equ NVM_PROD_SIGNATURES_DACA0GAINCAL_offset = 0x31		// DACA0 Calibration Byte 1
                                 .equ NVM_PROD_SIGNATURES_DACB0OFFCAL_offset = 0x32		// DACB0 Calibration Byte 0
                                 .equ NVM_PROD_SIGNATURES_DACB0GAINCAL_offset = 0x33		// DACB0 Calibration Byte 1
                                 .equ NVM_PROD_SIGNATURES_DACA1OFFCAL_offset = 0x34		// DACA1 Calibration Byte 0
                                 .equ NVM_PROD_SIGNATURES_DACA1GAINCAL_offset = 0x35		// DACA1 Calibration Byte 1
                                 .equ NVM_PROD_SIGNATURES_DACB1OFFCAL_offset = 0x36		// DACB1 Calibration Byte 0
                                 .equ NVM_PROD_SIGNATURES_DACB1GAINCAL_offset = 0x37		// DACB1 Calibration Byte 1
                                 
                                 
                                 ; ***** LOCKBIT REGISTER LOCATIONS ***************************************
                                 
                                 
                                 ;***************************************************************************
                                 ;** LOCKBIT - Lockbits
                                 ;***************************************************************************
                                 	
                                 .equ LOCKBIT_LOCKBITS = 0		// Lock Bits
                                 
                                 
                                 ; ***** FUSE REGISTER LOCATIONS ******************************************
                                 
                                 
                                 ;***************************************************************************
                                 ;** FUSE - Fuses
                                 ;***************************************************************************
                                 	
                                 .equ FUSE_FUSEBYTE0 = 0		// JTAG User ID
                                 .equ FUSE_FUSEBYTE1 = 1		// Watchdog Configuration
                                 .equ FUSE_FUSEBYTE2 = 2		// Reset Configuration
                                 .equ FUSE_FUSEBYTE4 = 4		// Start-up Configuration
                                 .equ FUSE_FUSEBYTE5 = 5		// EESAVE and BOD Level
                                 
                                 
                                 ; ***** BIT AND VALUE DEFINITIONS ****************************************
                                 
                                 
                                 ;***************************************************************************
                                 ;** GPIO - General Purpose IO
                                 ;***************************************************************************/
                                  
                                 
                                 ;***************************************************************************
                                 ;** VPORT - Virtual Ports
                                 ;***************************************************************************/
                                 
                                 ; VPORT_INTFLAGS masks
                                 .equ VPORT_INT1IF_bm = 0x02 ; Port Interrupt 1 Flag bit mask
                                 .equ VPORT_INT1IF_bp = 1 ; Port Interrupt 1 Flag bit position
                                 .equ VPORT_INT0IF_bm = 0x01 ; Port Interrupt 0 Flag bit mask
                                 .equ VPORT_INT0IF_bp = 0 ; Port Interrupt 0 Flag bit position
                                  
                                 
                                 ;***************************************************************************
                                 ;** XOCD - On-Chip Debug System
                                 ;***************************************************************************/
                                 
                                 ; OCD_OCDR1 masks
                                 .equ OCD_OCDRD_bm = 0x01 ; OCDR Dirty bit mask
                                 .equ OCD_OCDRD_bp = 0 ; OCDR Dirty bit position
                                  
                                 
                                 ;***************************************************************************
                                 ;** CPU - CPU
                                 ;***************************************************************************/
                                 
                                 ; CPU_CCP masks
                                 .equ CPU_CCP_gm = 0xFF ; CCP signature group mask
                                 .equ CPU_CCP_gp = 0 ; CCP signature group position
                                 .equ CPU_CCP0_bm = (1<<0) ; CCP signature bit 0 mask
                                 .equ CPU_CCP0_bp = 0 ; CCP signature bit 0 position
                                 .equ CPU_CCP1_bm = (1<<1) ; CCP signature bit 1 mask
                                 .equ CPU_CCP1_bp = 1 ; CCP signature bit 1 position
                                 .equ CPU_CCP2_bm = (1<<2) ; CCP signature bit 2 mask
                                 .equ CPU_CCP2_bp = 2 ; CCP signature bit 2 position
                                 .equ CPU_CCP3_bm = (1<<3) ; CCP signature bit 3 mask
                                 .equ CPU_CCP3_bp = 3 ; CCP signature bit 3 position
                                 .equ CPU_CCP4_bm = (1<<4) ; CCP signature bit 4 mask
                                 .equ CPU_CCP4_bp = 4 ; CCP signature bit 4 position
                                 .equ CPU_CCP5_bm = (1<<5) ; CCP signature bit 5 mask
                                 .equ CPU_CCP5_bp = 5 ; CCP signature bit 5 position
                                 .equ CPU_CCP6_bm = (1<<6) ; CCP signature bit 6 mask
                                 .equ CPU_CCP6_bp = 6 ; CCP signature bit 6 position
                                 .equ CPU_CCP7_bm = (1<<7) ; CCP signature bit 7 mask
                                 .equ CPU_CCP7_bp = 7 ; CCP signature bit 7 position
                                 
                                 ; CPU_SREG masks
                                 .equ CPU_I_bm = 0x80 ; Global Interrupt Enable Flag bit mask
                                 .equ CPU_I_bp = 7 ; Global Interrupt Enable Flag bit position
                                 .equ CPU_T_bm = 0x40 ; Transfer Bit bit mask
                                 .equ CPU_T_bp = 6 ; Transfer Bit bit position
                                 .equ CPU_H_bm = 0x20 ; Half Carry Flag bit mask
                                 .equ CPU_H_bp = 5 ; Half Carry Flag bit position
                                 .equ CPU_S_bm = 0x10 ; N Exclusive Or V Flag bit mask
                                 .equ CPU_S_bp = 4 ; N Exclusive Or V Flag bit position
                                 .equ CPU_V_bm = 0x08 ; Two's Complement Overflow Flag bit mask
                                 .equ CPU_V_bp = 3 ; Two's Complement Overflow Flag bit position
                                 .equ CPU_N_bm = 0x04 ; Negative Flag bit mask
                                 .equ CPU_N_bp = 2 ; Negative Flag bit position
                                 .equ CPU_Z_bm = 0x02 ; Zero Flag bit mask
                                 .equ CPU_Z_bp = 1 ; Zero Flag bit position
                                 .equ CPU_C_bm = 0x01 ; Carry Flag bit mask
                                 .equ CPU_C_bp = 0 ; Carry Flag bit position
                                  
                                 ; CCP signatures
                                 .equ CCP_SPM_gc = (0x9D<<0) ; SPM Instruction Protection
                                 .equ CCP_IOREG_gc = (0xD8<<0) ; IO Register Protection
                                 
                                 
                                 ;***************************************************************************
                                 ;** CLK - Clock System
                                 ;***************************************************************************/
                                 
                                 ; CLK_CTRL masks
                                 .equ CLK_SCLKSEL_gm = 0x07 ; System Clock Selection group mask
                                 .equ CLK_SCLKSEL_gp = 0 ; System Clock Selection group position
                                 .equ CLK_SCLKSEL0_bm = (1<<0) ; System Clock Selection bit 0 mask
                                 .equ CLK_SCLKSEL0_bp = 0 ; System Clock Selection bit 0 position
                                 .equ CLK_SCLKSEL1_bm = (1<<1) ; System Clock Selection bit 1 mask
                                 .equ CLK_SCLKSEL1_bp = 1 ; System Clock Selection bit 1 position
                                 .equ CLK_SCLKSEL2_bm = (1<<2) ; System Clock Selection bit 2 mask
                                 .equ CLK_SCLKSEL2_bp = 2 ; System Clock Selection bit 2 position
                                 
                                 ; CLK_PSCTRL masks
                                 .equ CLK_PSADIV_gm = 0x7C ; Prescaler A Division Factor group mask
                                 .equ CLK_PSADIV_gp = 2 ; Prescaler A Division Factor group position
                                 .equ CLK_PSADIV0_bm = (1<<2) ; Prescaler A Division Factor bit 0 mask
                                 .equ CLK_PSADIV0_bp = 2 ; Prescaler A Division Factor bit 0 position
                                 .equ CLK_PSADIV1_bm = (1<<3) ; Prescaler A Division Factor bit 1 mask
                                 .equ CLK_PSADIV1_bp = 3 ; Prescaler A Division Factor bit 1 position
                                 .equ CLK_PSADIV2_bm = (1<<4) ; Prescaler A Division Factor bit 2 mask
                                 .equ CLK_PSADIV2_bp = 4 ; Prescaler A Division Factor bit 2 position
                                 .equ CLK_PSADIV3_bm = (1<<5) ; Prescaler A Division Factor bit 3 mask
                                 .equ CLK_PSADIV3_bp = 5 ; Prescaler A Division Factor bit 3 position
                                 .equ CLK_PSADIV4_bm = (1<<6) ; Prescaler A Division Factor bit 4 mask
                                 .equ CLK_PSADIV4_bp = 6 ; Prescaler A Division Factor bit 4 position
                                 .equ CLK_PSBCDIV_gm = 0x03 ; Prescaler B and C Division factor group mask
                                 .equ CLK_PSBCDIV_gp = 0 ; Prescaler B and C Division factor group position
                                 .equ CLK_PSBCDIV0_bm = (1<<0) ; Prescaler B and C Division factor bit 0 mask
                                 .equ CLK_PSBCDIV0_bp = 0 ; Prescaler B and C Division factor bit 0 position
                                 .equ CLK_PSBCDIV1_bm = (1<<1) ; Prescaler B and C Division factor bit 1 mask
                                 .equ CLK_PSBCDIV1_bp = 1 ; Prescaler B and C Division factor bit 1 position
                                 
                                 ; CLK_LOCK masks
                                 .equ CLK_LOCK_bm = 0x01 ; Clock System Lock bit mask
                                 .equ CLK_LOCK_bp = 0 ; Clock System Lock bit position
                                 
                                 ; CLK_RTCCTRL masks
                                 .equ CLK_RTCSRC_gm = 0x0E ; Clock Source group mask
                                 .equ CLK_RTCSRC_gp = 1 ; Clock Source group position
                                 .equ CLK_RTCSRC0_bm = (1<<1) ; Clock Source bit 0 mask
                                 .equ CLK_RTCSRC0_bp = 1 ; Clock Source bit 0 position
                                 .equ CLK_RTCSRC1_bm = (1<<2) ; Clock Source bit 1 mask
                                 .equ CLK_RTCSRC1_bp = 2 ; Clock Source bit 1 position
                                 .equ CLK_RTCSRC2_bm = (1<<3) ; Clock Source bit 2 mask
                                 .equ CLK_RTCSRC2_bp = 3 ; Clock Source bit 2 position
                                 .equ CLK_RTCEN_bm = 0x01 ; Clock Source Enable bit mask
                                 .equ CLK_RTCEN_bp = 0 ; Clock Source Enable bit position
                                 
                                 ; CLK_USBCTRL masks
                                 .equ CLK_USBPSDIV_gm = 0x38 ; Prescaler Division Factor group mask
                                 .equ CLK_USBPSDIV_gp = 3 ; Prescaler Division Factor group position
                                 .equ CLK_USBPSDIV0_bm = (1<<3) ; Prescaler Division Factor bit 0 mask
                                 .equ CLK_USBPSDIV0_bp = 3 ; Prescaler Division Factor bit 0 position
                                 .equ CLK_USBPSDIV1_bm = (1<<4) ; Prescaler Division Factor bit 1 mask
                                 .equ CLK_USBPSDIV1_bp = 4 ; Prescaler Division Factor bit 1 position
                                 .equ CLK_USBPSDIV2_bm = (1<<5) ; Prescaler Division Factor bit 2 mask
                                 .equ CLK_USBPSDIV2_bp = 5 ; Prescaler Division Factor bit 2 position
                                 .equ CLK_USBSRC_gm = 0x06 ; Clock Source group mask
                                 .equ CLK_USBSRC_gp = 1 ; Clock Source group position
                                 .equ CLK_USBSRC0_bm = (1<<1) ; Clock Source bit 0 mask
                                 .equ CLK_USBSRC0_bp = 1 ; Clock Source bit 0 position
                                 .equ CLK_USBSRC1_bm = (1<<2) ; Clock Source bit 1 mask
                                 .equ CLK_USBSRC1_bp = 2 ; Clock Source bit 1 position
                                 .equ CLK_USBSEN_bm = 0x01 ; Clock Source Enable bit mask
                                 .equ CLK_USBSEN_bp = 0 ; Clock Source Enable bit position
                                 
                                 ; PR_PRGEN masks
                                 .equ PR_USB_bm = 0x40 ; USB bit mask
                                 .equ PR_USB_bp = 6 ; USB bit position
                                 .equ PR_AES_bm = 0x10 ; AES bit mask
                                 .equ PR_AES_bp = 4 ; AES bit position
                                 .equ PR_EBI_bm = 0x08 ; External Bus Interface bit mask
                                 .equ PR_EBI_bp = 3 ; External Bus Interface bit position
                                 .equ PR_RTC_bm = 0x04 ; Real-time Counter bit mask
                                 .equ PR_RTC_bp = 2 ; Real-time Counter bit position
                                 .equ PR_EVSYS_bm = 0x02 ; Event System bit mask
                                 .equ PR_EVSYS_bp = 1 ; Event System bit position
                                 .equ PR_DMA_bm = 0x01 ; DMA-Controller bit mask
                                 .equ PR_DMA_bp = 0 ; DMA-Controller bit position
                                 
                                 ; PR_PRPA masks
                                 .equ PR_DAC_bm = 0x04 ; Port A DAC bit mask
                                 .equ PR_DAC_bp = 2 ; Port A DAC bit position
                                 .equ PR_ADC_bm = 0x02 ; Port A ADC bit mask
                                 .equ PR_ADC_bp = 1 ; Port A ADC bit position
                                 .equ PR_AC_bm = 0x01 ; Port A Analog Comparator bit mask
                                 .equ PR_AC_bp = 0 ; Port A Analog Comparator bit position
                                 
                                 ; PR_PRPB masks
                                 ; Masks for DAC aready defined
                                 ; Masks for ADC aready defined
                                 ; Masks for AC aready defined
                                 
                                 ; PR_PRPC masks
                                 .equ PR_TWI_bm = 0x40 ; Port C Two-wire Interface bit mask
                                 .equ PR_TWI_bp = 6 ; Port C Two-wire Interface bit position
                                 .equ PR_USART1_bm = 0x20 ; Port C USART1 bit mask
                                 .equ PR_USART1_bp = 5 ; Port C USART1 bit position
                                 .equ PR_USART0_bm = 0x10 ; Port C USART0 bit mask
                                 .equ PR_USART0_bp = 4 ; Port C USART0 bit position
                                 .equ PR_SPI_bm = 0x08 ; Port C SPI bit mask
                                 .equ PR_SPI_bp = 3 ; Port C SPI bit position
                                 .equ PR_HIRES_bm = 0x04 ; Port C AWEX bit mask
                                 .equ PR_HIRES_bp = 2 ; Port C AWEX bit position
                                 .equ PR_TC1_bm = 0x02 ; Port C Timer/Counter1 bit mask
                                 .equ PR_TC1_bp = 1 ; Port C Timer/Counter1 bit position
                                 .equ PR_TC0_bm = 0x01 ; Port C Timer/Counter0 bit mask
                                 .equ PR_TC0_bp = 0 ; Port C Timer/Counter0 bit position
                                 
                                 ; PR_PRPD masks
                                 ; Masks for TWI aready defined
                                 ; Masks for USART1 aready defined
                                 ; Masks for USART0 aready defined
                                 ; Masks for SPI aready defined
                                 ; Masks for HIRES aready defined
                                 ; Masks for TC1 aready defined
                                 ; Masks for TC0 aready defined
                                 
                                 ; PR_PRPE masks
                                 ; Masks for TWI aready defined
                                 ; Masks for USART1 aready defined
                                 ; Masks for USART0 aready defined
                                 ; Masks for SPI aready defined
                                 ; Masks for HIRES aready defined
                                 ; Masks for TC1 aready defined
                                 ; Masks for TC0 aready defined
                                 
                                 ; PR_PRPF masks
                                 ; Masks for TWI aready defined
                                 ; Masks for USART1 aready defined
                                 ; Masks for USART0 aready defined
                                 ; Masks for SPI aready defined
                                 ; Masks for HIRES aready defined
                                 ; Masks for TC1 aready defined
                                 ; Masks for TC0 aready defined
                                  
                                 ; System Clock Selection
                                 .equ CLK_SCLKSEL_RC2M_gc = (0x00<<0) ; Internal 2 MHz RC Oscillator
                                 .equ CLK_SCLKSEL_RC32M_gc = (0x01<<0) ; Internal 32 MHz RC Oscillator
                                 .equ CLK_SCLKSEL_RC32K_gc = (0x02<<0) ; Internal 32.768 kHz RC Oscillator
                                 .equ CLK_SCLKSEL_XOSC_gc = (0x03<<0) ; External Crystal Oscillator or Clock
                                 .equ CLK_SCLKSEL_PLL_gc = (0x04<<0) ; Phase Locked Loop
                                 
                                 ; Prescaler A Division Factor
                                 .equ CLK_PSADIV_1_gc = (0x00<<2) ; Divide by 1
                                 .equ CLK_PSADIV_2_gc = (0x01<<2) ; Divide by 2
                                 .equ CLK_PSADIV_4_gc = (0x03<<2) ; Divide by 4
                                 .equ CLK_PSADIV_8_gc = (0x05<<2) ; Divide by 8
                                 .equ CLK_PSADIV_16_gc = (0x07<<2) ; Divide by 16
                                 .equ CLK_PSADIV_32_gc = (0x09<<2) ; Divide by 32
                                 .equ CLK_PSADIV_64_gc = (0x0B<<2) ; Divide by 64
                                 .equ CLK_PSADIV_128_gc = (0x0D<<2) ; Divide by 128
                                 .equ CLK_PSADIV_256_gc = (0x0F<<2) ; Divide by 256
                                 .equ CLK_PSADIV_512_gc = (0x11<<2) ; Divide by 512
                                 
                                 ; Prescaler B and C Division Factor
                                 .equ CLK_PSBCDIV_1_1_gc = (0x00<<0) ; Divide B by 1 and C by 1
                                 .equ CLK_PSBCDIV_1_2_gc = (0x01<<0) ; Divide B by 1 and C by 2
                                 .equ CLK_PSBCDIV_4_1_gc = (0x02<<0) ; Divide B by 4 and C by 1
                                 .equ CLK_PSBCDIV_2_2_gc = (0x03<<0) ; Divide B by 2 and C by 2
                                 
                                 ; RTC Clock Source
                                 .equ CLK_RTCSRC_ULP_gc = (0x00<<1) ; 1.024 kHz from internal 32kHz ULP
                                 .equ CLK_RTCSRC_TOSC_gc = (0x01<<1) ; 1.024 kHz from 32.768 kHz crystal oscillator on TOSC
                                 .equ CLK_RTCSRC_RCOSC_gc = (0x02<<1) ; 1.024 kHz from internal 32.768 kHz RC oscillator
                                 .equ CLK_RTCSRC_TOSC32_gc = (0x05<<1) ; 32.768 kHz from 32.768 kHz crystal oscillator on TOSC
                                 .equ CLK_RTCSRC_RCOSC32_gc = (0x06<<1) ; 32.768 kHz from internal 32.768 kHz RC oscillator
                                 .equ CLK_RTCSRC_EXTCLK_gc = (0x07<<1) ; External Clock from TOSC1
                                 
                                 ; USB Prescaler Division Factor
                                 .equ CLK_USBPSDIV_1_gc = (0x00<<3) ; Divide by 1
                                 .equ CLK_USBPSDIV_2_gc = (0x01<<3) ; Divide by 2
                                 .equ CLK_USBPSDIV_4_gc = (0x02<<3) ; Divide by 4
                                 .equ CLK_USBPSDIV_8_gc = (0x03<<3) ; Divide by 8
                                 .equ CLK_USBPSDIV_16_gc = (0x04<<3) ; Divide by 16
                                 .equ CLK_USBPSDIV_32_gc = (0x05<<3) ; Divide by 32
                                 
                                 ; USB Clock Source
                                 .equ CLK_USBSRC_PLL_gc = (0x00<<1) ; PLL
                                 .equ CLK_USBSRC_RC32M_gc = (0x01<<1) ; Internal 32 MHz RC Oscillator
                                 
                                 
                                 ;***************************************************************************
                                 ;** SLEEP - Sleep Controller
                                 ;***************************************************************************/
                                 
                                 ; SLEEP_CTRL masks
                                 .equ SLEEP_SMODE_gm = 0x0E ; Sleep Mode group mask
                                 .equ SLEEP_SMODE_gp = 1 ; Sleep Mode group position
                                 .equ SLEEP_SMODE0_bm = (1<<1) ; Sleep Mode bit 0 mask
                                 .equ SLEEP_SMODE0_bp = 1 ; Sleep Mode bit 0 position
                                 .equ SLEEP_SMODE1_bm = (1<<2) ; Sleep Mode bit 1 mask
                                 .equ SLEEP_SMODE1_bp = 2 ; Sleep Mode bit 1 position
                                 .equ SLEEP_SMODE2_bm = (1<<3) ; Sleep Mode bit 2 mask
                                 .equ SLEEP_SMODE2_bp = 3 ; Sleep Mode bit 2 position
                                 .equ SLEEP_SEN_bm = 0x01 ; Sleep Enable bit mask
                                 .equ SLEEP_SEN_bp = 0 ; Sleep Enable bit position
                                  
                                 ; Sleep Mode
                                 .equ SLEEP_SMODE_IDLE_gc = (0x00<<1) ; Idle mode
                                 .equ SLEEP_SMODE_PDOWN_gc = (0x02<<1) ; Power-down Mode
                                 .equ SLEEP_SMODE_PSAVE_gc = (0x03<<1) ; Power-save Mode
                                 .equ SLEEP_SMODE_STDBY_gc = (0x06<<1) ; Standby Mode
                                 .equ SLEEP_SMODE_ESTDBY_gc = (0x07<<1) ; Extended Standby Mode
                                 
                                 
                                 ;***************************************************************************
                                 ;** OSC - Oscillator
                                 ;***************************************************************************/
                                 
                                 ; OSC_CTRL masks
                                 .equ OSC_PLLEN_bm = 0x10 ; PLL Enable bit mask
                                 .equ OSC_PLLEN_bp = 4 ; PLL Enable bit position
                                 .equ OSC_XOSCEN_bm = 0x08 ; External Oscillator Enable bit mask
                                 .equ OSC_XOSCEN_bp = 3 ; External Oscillator Enable bit position
                                 .equ OSC_RC32KEN_bm = 0x04 ; Internal 32.768 kHz RC Oscillator Enable bit mask
                                 .equ OSC_RC32KEN_bp = 2 ; Internal 32.768 kHz RC Oscillator Enable bit position
                                 .equ OSC_RC32MEN_bm = 0x02 ; Internal 32 MHz RC Oscillator Enable bit mask
                                 .equ OSC_RC32MEN_bp = 1 ; Internal 32 MHz RC Oscillator Enable bit position
                                 .equ OSC_RC2MEN_bm = 0x01 ; Internal 2 MHz RC Oscillator Enable bit mask
                                 .equ OSC_RC2MEN_bp = 0 ; Internal 2 MHz RC Oscillator Enable bit position
                                 
                                 ; OSC_STATUS masks
                                 .equ OSC_PLLRDY_bm = 0x10 ; PLL Ready bit mask
                                 .equ OSC_PLLRDY_bp = 4 ; PLL Ready bit position
                                 .equ OSC_XOSCRDY_bm = 0x08 ; External Oscillator Ready bit mask
                                 .equ OSC_XOSCRDY_bp = 3 ; External Oscillator Ready bit position
                                 .equ OSC_RC32KRDY_bm = 0x04 ; Internal 32.768 kHz RC Oscillator Ready bit mask
                                 .equ OSC_RC32KRDY_bp = 2 ; Internal 32.768 kHz RC Oscillator Ready bit position
                                 .equ OSC_RC32MRDY_bm = 0x02 ; Internal 32 MHz RC Oscillator Ready bit mask
                                 .equ OSC_RC32MRDY_bp = 1 ; Internal 32 MHz RC Oscillator Ready bit position
                                 .equ OSC_RC2MRDY_bm = 0x01 ; Internal 2 MHz RC Oscillator Ready bit mask
                                 .equ OSC_RC2MRDY_bp = 0 ; Internal 2 MHz RC Oscillator Ready bit position
                                 
                                 ; OSC_XOSCCTRL masks
                                 .equ OSC_FRQRANGE_gm = 0xC0 ; Frequency Range group mask
                                 .equ OSC_FRQRANGE_gp = 6 ; Frequency Range group position
                                 .equ OSC_FRQRANGE0_bm = (1<<6) ; Frequency Range bit 0 mask
                                 .equ OSC_FRQRANGE0_bp = 6 ; Frequency Range bit 0 position
                                 .equ OSC_FRQRANGE1_bm = (1<<7) ; Frequency Range bit 1 mask
                                 .equ OSC_FRQRANGE1_bp = 7 ; Frequency Range bit 1 position
                                 .equ OSC_X32KLPM_bm = 0x20 ; 32.768 kHz XTAL OSC Low-power Mode bit mask
                                 .equ OSC_X32KLPM_bp = 5 ; 32.768 kHz XTAL OSC Low-power Mode bit position
                                 .equ OSC_XOSCPWR_bm = 0x10 ; 16 MHz Crystal Oscillator High Power mode bit mask
                                 .equ OSC_XOSCPWR_bp = 4 ; 16 MHz Crystal Oscillator High Power mode bit position
                                 .equ OSC_XOSCSEL_gm = 0x0F ; External Oscillator Selection and Startup Time group mask
                                 .equ OSC_XOSCSEL_gp = 0 ; External Oscillator Selection and Startup Time group position
                                 .equ OSC_XOSCSEL0_bm = (1<<0) ; External Oscillator Selection and Startup Time bit 0 mask
                                 .equ OSC_XOSCSEL0_bp = 0 ; External Oscillator Selection and Startup Time bit 0 position
                                 .equ OSC_XOSCSEL1_bm = (1<<1) ; External Oscillator Selection and Startup Time bit 1 mask
                                 .equ OSC_XOSCSEL1_bp = 1 ; External Oscillator Selection and Startup Time bit 1 position
                                 .equ OSC_XOSCSEL2_bm = (1<<2) ; External Oscillator Selection and Startup Time bit 2 mask
                                 .equ OSC_XOSCSEL2_bp = 2 ; External Oscillator Selection and Startup Time bit 2 position
                                 .equ OSC_XOSCSEL3_bm = (1<<3) ; External Oscillator Selection and Startup Time bit 3 mask
                                 .equ OSC_XOSCSEL3_bp = 3 ; External Oscillator Selection and Startup Time bit 3 position
                                 
                                 ; OSC_XOSCFAIL masks
                                 .equ OSC_PLLFDIF_bm = 0x08 ; PLL Failure Detection Interrupt Flag bit mask
                                 .equ OSC_PLLFDIF_bp = 3 ; PLL Failure Detection Interrupt Flag bit position
                                 .equ OSC_PLLFDEN_bm = 0x04 ; PLL Failure Detection Enable bit mask
                                 .equ OSC_PLLFDEN_bp = 2 ; PLL Failure Detection Enable bit position
                                 .equ OSC_XOSCFDIF_bm = 0x02 ; XOSC Failure Detection Interrupt Flag bit mask
                                 .equ OSC_XOSCFDIF_bp = 1 ; XOSC Failure Detection Interrupt Flag bit position
                                 .equ OSC_XOSCFDEN_bm = 0x01 ; XOSC Failure Detection Enable bit mask
                                 .equ OSC_XOSCFDEN_bp = 0 ; XOSC Failure Detection Enable bit position
                                 
                                 ; OSC_PLLCTRL masks
                                 .equ OSC_PLLSRC_gm = 0xC0 ; Clock Source group mask
                                 .equ OSC_PLLSRC_gp = 6 ; Clock Source group position
                                 .equ OSC_PLLSRC0_bm = (1<<6) ; Clock Source bit 0 mask
                                 .equ OSC_PLLSRC0_bp = 6 ; Clock Source bit 0 position
                                 .equ OSC_PLLSRC1_bm = (1<<7) ; Clock Source bit 1 mask
                                 .equ OSC_PLLSRC1_bp = 7 ; Clock Source bit 1 position
                                 .equ OSC_PLLDIV_bm = 0x20 ; Divide by 2 bit mask
                                 .equ OSC_PLLDIV_bp = 5 ; Divide by 2 bit position
                                 .equ OSC_PLLFAC_gm = 0x1F ; Multiplication Factor group mask
                                 .equ OSC_PLLFAC_gp = 0 ; Multiplication Factor group position
                                 .equ OSC_PLLFAC0_bm = (1<<0) ; Multiplication Factor bit 0 mask
                                 .equ OSC_PLLFAC0_bp = 0 ; Multiplication Factor bit 0 position
                                 .equ OSC_PLLFAC1_bm = (1<<1) ; Multiplication Factor bit 1 mask
                                 .equ OSC_PLLFAC1_bp = 1 ; Multiplication Factor bit 1 position
                                 .equ OSC_PLLFAC2_bm = (1<<2) ; Multiplication Factor bit 2 mask
                                 .equ OSC_PLLFAC2_bp = 2 ; Multiplication Factor bit 2 position
                                 .equ OSC_PLLFAC3_bm = (1<<3) ; Multiplication Factor bit 3 mask
                                 .equ OSC_PLLFAC3_bp = 3 ; Multiplication Factor bit 3 position
                                 .equ OSC_PLLFAC4_bm = (1<<4) ; Multiplication Factor bit 4 mask
                                 .equ OSC_PLLFAC4_bp = 4 ; Multiplication Factor bit 4 position
                                 
                                 ; OSC_DFLLCTRL masks
                                 .equ OSC_RC32MCREF_gm = 0x06 ; 32 MHz DFLL Calibration Reference group mask
                                 .equ OSC_RC32MCREF_gp = 1 ; 32 MHz DFLL Calibration Reference group position
                                 .equ OSC_RC32MCREF0_bm = (1<<1) ; 32 MHz DFLL Calibration Reference bit 0 mask
                                 .equ OSC_RC32MCREF0_bp = 1 ; 32 MHz DFLL Calibration Reference bit 0 position
                                 .equ OSC_RC32MCREF1_bm = (1<<2) ; 32 MHz DFLL Calibration Reference bit 1 mask
                                 .equ OSC_RC32MCREF1_bp = 2 ; 32 MHz DFLL Calibration Reference bit 1 position
                                 .equ OSC_RC2MCREF_bm = 0x01 ; 2 MHz DFLL Calibration Reference bit mask
                                 .equ OSC_RC2MCREF_bp = 0 ; 2 MHz DFLL Calibration Reference bit position
                                  
                                 ; Oscillator Frequency Range
                                 .equ OSC_FRQRANGE_04TO2_gc = (0x00<<6) ; 0.4 - 2 MHz
                                 .equ OSC_FRQRANGE_2TO9_gc = (0x01<<6) ; 2 - 9 MHz
                                 .equ OSC_FRQRANGE_9TO12_gc = (0x02<<6) ; 9 - 12 MHz
                                 .equ OSC_FRQRANGE_12TO16_gc = (0x03<<6) ; 12 - 16 MHz
                                 
                                 ; External Oscillator Selection and Startup Time
                                 .equ OSC_XOSCSEL_EXTCLK_gc = (0x00<<0) ; External Clock - 6 CLK
                                 .equ OSC_XOSCSEL_32KHz_gc = (0x02<<0) ; 32.768 kHz TOSC - 32K CLK
                                 .equ OSC_XOSCSEL_XTAL_256CLK_gc = (0x03<<0) ; 0.4-16 MHz XTAL - 256 CLK
                                 .equ OSC_XOSCSEL_XTAL_1KCLK_gc = (0x07<<0) ; 0.4-16 MHz XTAL - 1K CLK
                                 .equ OSC_XOSCSEL_XTAL_16KCLK_gc = (0x0B<<0) ; 0.4-16 MHz XTAL - 16K CLK
                                 
                                 ; PLL Clock Source
                                 .equ OSC_PLLSRC_RC2M_gc = (0x00<<6) ; Internal 2 MHz RC Oscillator
                                 .equ OSC_PLLSRC_RC32M_gc = (0x02<<6) ; Internal 32 MHz RC Oscillator
                                 .equ OSC_PLLSRC_XOSC_gc = (0x03<<6) ; External Oscillator
                                 
                                 ; 2 MHz DFLL Calibration Reference
                                 .equ OSC_RC2MCREF_RC32K_gc = (0x00<<0) ; Internal 32.768 kHz RC Oscillator
                                 .equ OSC_RC2MCREF_XOSC32K_gc = (0x01<<0) ; External 32.768 kHz Crystal Oscillator
                                 
                                 ; 32 MHz DFLL Calibration Reference
                                 .equ OSC_RC32MCREF_RC32K_gc = (0x00<<1) ; Internal 32.768 kHz RC Oscillator
                                 .equ OSC_RC32MCREF_XOSC32K_gc = (0x01<<1) ; External 32.768 kHz Crystal Oscillator
                                 .equ OSC_RC32MCREF_USBSOF_gc = (0x02<<1) ; USB Start of Frame
                                 
                                 
                                 ;***************************************************************************
                                 ;** DFLL - DFLL
                                 ;***************************************************************************/
                                 
                                 ; DFLL_CTRL masks
                                 .equ DFLL_ENABLE_bm = 0x01 ; DFLL Enable bit mask
                                 .equ DFLL_ENABLE_bp = 0 ; DFLL Enable bit position
                                 
                                 ; DFLL_CALA masks
                                 .equ DFLL_CALL_gm = 0x7F ; DFLL Calibration Value A group mask
                                 .equ DFLL_CALL_gp = 0 ; DFLL Calibration Value A group position
                                 .equ DFLL_CALL0_bm = (1<<0) ; DFLL Calibration Value A bit 0 mask
                                 .equ DFLL_CALL0_bp = 0 ; DFLL Calibration Value A bit 0 position
                                 .equ DFLL_CALL1_bm = (1<<1) ; DFLL Calibration Value A bit 1 mask
                                 .equ DFLL_CALL1_bp = 1 ; DFLL Calibration Value A bit 1 position
                                 .equ DFLL_CALL2_bm = (1<<2) ; DFLL Calibration Value A bit 2 mask
                                 .equ DFLL_CALL2_bp = 2 ; DFLL Calibration Value A bit 2 position
                                 .equ DFLL_CALL3_bm = (1<<3) ; DFLL Calibration Value A bit 3 mask
                                 .equ DFLL_CALL3_bp = 3 ; DFLL Calibration Value A bit 3 position
                                 .equ DFLL_CALL4_bm = (1<<4) ; DFLL Calibration Value A bit 4 mask
                                 .equ DFLL_CALL4_bp = 4 ; DFLL Calibration Value A bit 4 position
                                 .equ DFLL_CALL5_bm = (1<<5) ; DFLL Calibration Value A bit 5 mask
                                 .equ DFLL_CALL5_bp = 5 ; DFLL Calibration Value A bit 5 position
                                 .equ DFLL_CALL6_bm = (1<<6) ; DFLL Calibration Value A bit 6 mask
                                 .equ DFLL_CALL6_bp = 6 ; DFLL Calibration Value A bit 6 position
                                 
                                 ; DFLL_CALB masks
                                 .equ DFLL_CALH_gm = 0x3F ; DFLL Calibration Value B group mask
                                 .equ DFLL_CALH_gp = 0 ; DFLL Calibration Value B group position
                                 .equ DFLL_CALH0_bm = (1<<0) ; DFLL Calibration Value B bit 0 mask
                                 .equ DFLL_CALH0_bp = 0 ; DFLL Calibration Value B bit 0 position
                                 .equ DFLL_CALH1_bm = (1<<1) ; DFLL Calibration Value B bit 1 mask
                                 .equ DFLL_CALH1_bp = 1 ; DFLL Calibration Value B bit 1 position
                                 .equ DFLL_CALH2_bm = (1<<2) ; DFLL Calibration Value B bit 2 mask
                                 .equ DFLL_CALH2_bp = 2 ; DFLL Calibration Value B bit 2 position
                                 .equ DFLL_CALH3_bm = (1<<3) ; DFLL Calibration Value B bit 3 mask
                                 .equ DFLL_CALH3_bp = 3 ; DFLL Calibration Value B bit 3 position
                                 .equ DFLL_CALH4_bm = (1<<4) ; DFLL Calibration Value B bit 4 mask
                                 .equ DFLL_CALH4_bp = 4 ; DFLL Calibration Value B bit 4 position
                                 .equ DFLL_CALH5_bm = (1<<5) ; DFLL Calibration Value B bit 5 mask
                                 .equ DFLL_CALH5_bp = 5 ; DFLL Calibration Value B bit 5 position
                                  
                                 
                                 ;***************************************************************************
                                 ;** RST - Reset
                                 ;***************************************************************************/
                                 
                                 ; RST_STATUS masks
                                 .equ RST_SDRF_bm = 0x40 ; Spike Detection Reset Flag bit mask
                                 .equ RST_SDRF_bp = 6 ; Spike Detection Reset Flag bit position
                                 .equ RST_SRF_bm = 0x20 ; Software Reset Flag bit mask
                                 .equ RST_SRF_bp = 5 ; Software Reset Flag bit position
                                 .equ RST_PDIRF_bm = 0x10 ; Programming and Debug Interface Interface Reset Flag bit mask
                                 .equ RST_PDIRF_bp = 4 ; Programming and Debug Interface Interface Reset Flag bit position
                                 .equ RST_WDRF_bm = 0x08 ; Watchdog Reset Flag bit mask
                                 .equ RST_WDRF_bp = 3 ; Watchdog Reset Flag bit position
                                 .equ RST_BORF_bm = 0x04 ; Brown-out Reset Flag bit mask
                                 .equ RST_BORF_bp = 2 ; Brown-out Reset Flag bit position
                                 .equ RST_EXTRF_bm = 0x02 ; External Reset Flag bit mask
                                 .equ RST_EXTRF_bp = 1 ; External Reset Flag bit position
                                 .equ RST_PORF_bm = 0x01 ; Power-on Reset Flag bit mask
                                 .equ RST_PORF_bp = 0 ; Power-on Reset Flag bit position
                                 
                                 ; RST_CTRL masks
                                 .equ RST_SWRST_bm = 0x01 ; Software Reset bit mask
                                 .equ RST_SWRST_bp = 0 ; Software Reset bit position
                                  
                                 
                                 ;***************************************************************************
                                 ;** WDT - Watch-Dog Timer
                                 ;***************************************************************************/
                                 
                                 ; WDT_CTRL masks
                                 .equ WDT_PER_gm = 0x3C ; Period group mask
                                 .equ WDT_PER_gp = 2 ; Period group position
                                 .equ WDT_PER0_bm = (1<<2) ; Period bit 0 mask
                                 .equ WDT_PER0_bp = 2 ; Period bit 0 position
                                 .equ WDT_PER1_bm = (1<<3) ; Period bit 1 mask
                                 .equ WDT_PER1_bp = 3 ; Period bit 1 position
                                 .equ WDT_PER2_bm = (1<<4) ; Period bit 2 mask
                                 .equ WDT_PER2_bp = 4 ; Period bit 2 position
                                 .equ WDT_PER3_bm = (1<<5) ; Period bit 3 mask
                                 .equ WDT_PER3_bp = 5 ; Period bit 3 position
                                 .equ WDT_ENABLE_bm = 0x02 ; Enable bit mask
                                 .equ WDT_ENABLE_bp = 1 ; Enable bit position
                                 .equ WDT_CEN_bm = 0x01 ; Change Enable bit mask
                                 .equ WDT_CEN_bp = 0 ; Change Enable bit position
                                 
                                 ; WDT_WINCTRL masks
                                 .equ WDT_WPER_gm = 0x3C ; Windowed Mode Period group mask
                                 .equ WDT_WPER_gp = 2 ; Windowed Mode Period group position
                                 .equ WDT_WPER0_bm = (1<<2) ; Windowed Mode Period bit 0 mask
                                 .equ WDT_WPER0_bp = 2 ; Windowed Mode Period bit 0 position
                                 .equ WDT_WPER1_bm = (1<<3) ; Windowed Mode Period bit 1 mask
                                 .equ WDT_WPER1_bp = 3 ; Windowed Mode Period bit 1 position
                                 .equ WDT_WPER2_bm = (1<<4) ; Windowed Mode Period bit 2 mask
                                 .equ WDT_WPER2_bp = 4 ; Windowed Mode Period bit 2 position
                                 .equ WDT_WPER3_bm = (1<<5) ; Windowed Mode Period bit 3 mask
                                 .equ WDT_WPER3_bp = 5 ; Windowed Mode Period bit 3 position
                                 .equ WDT_WEN_bm = 0x02 ; Windowed Mode Enable bit mask
                                 .equ WDT_WEN_bp = 1 ; Windowed Mode Enable bit position
                                 .equ WDT_WCEN_bm = 0x01 ; Windowed Mode Change Enable bit mask
                                 .equ WDT_WCEN_bp = 0 ; Windowed Mode Change Enable bit position
                                 
                                 ; WDT_STATUS masks
                                 .equ WDT_SYNCBUSY_bm = 0x01 ; Syncronization busy bit mask
                                 .equ WDT_SYNCBUSY_bp = 0 ; Syncronization busy bit position
                                  
                                 ; Period setting
                                 .equ WDT_PER_8CLK_gc = (0x00<<2) ; 8 cycles (8ms @ 3.3V)
                                 .equ WDT_PER_16CLK_gc = (0x01<<2) ; 16 cycles (16ms @ 3.3V)
                                 .equ WDT_PER_32CLK_gc = (0x02<<2) ; 32 cycles (32ms @ 3.3V)
                                 .equ WDT_PER_64CLK_gc = (0x03<<2) ; 64 cycles (64ms @ 3.3V)
                                 .equ WDT_PER_125CLK_gc = (0x04<<2) ; 125 cycles (0.125s @ 3.3V)
                                 .equ WDT_PER_250CLK_gc = (0x05<<2) ; 250 cycles (0.25s @ 3.3V)
                                 .equ WDT_PER_500CLK_gc = (0x06<<2) ; 500 cycles (0.5s @ 3.3V)
                                 .equ WDT_PER_1KCLK_gc = (0x07<<2) ; 1K cycles (1s @ 3.3V)
                                 .equ WDT_PER_2KCLK_gc = (0x08<<2) ; 2K cycles (2s @ 3.3V)
                                 .equ WDT_PER_4KCLK_gc = (0x09<<2) ; 4K cycles (4s @ 3.3V)
                                 .equ WDT_PER_8KCLK_gc = (0x0A<<2) ; 8K cycles (8s @ 3.3V)
                                 
                                 ; Closed window period
                                 .equ WDT_WPER_8CLK_gc = (0x00<<2) ; 8 cycles (8ms @ 3.3V)
                                 .equ WDT_WPER_16CLK_gc = (0x01<<2) ; 16 cycles (16ms @ 3.3V)
                                 .equ WDT_WPER_32CLK_gc = (0x02<<2) ; 32 cycles (32ms @ 3.3V)
                                 .equ WDT_WPER_64CLK_gc = (0x03<<2) ; 64 cycles (64ms @ 3.3V)
                                 .equ WDT_WPER_125CLK_gc = (0x04<<2) ; 125 cycles (0.125s @ 3.3V)
                                 .equ WDT_WPER_250CLK_gc = (0x05<<2) ; 250 cycles (0.25s @ 3.3V)
                                 .equ WDT_WPER_500CLK_gc = (0x06<<2) ; 500 cycles (0.5s @ 3.3V)
                                 .equ WDT_WPER_1KCLK_gc = (0x07<<2) ; 1K cycles (1s @ 3.3V)
                                 .equ WDT_WPER_2KCLK_gc = (0x08<<2) ; 2K cycles (2s @ 3.3V)
                                 .equ WDT_WPER_4KCLK_gc = (0x09<<2) ; 4K cycles (4s @ 3.3V)
                                 .equ WDT_WPER_8KCLK_gc = (0x0A<<2) ; 8K cycles (8s @ 3.3V)
                                 
                                 
                                 ;***************************************************************************
                                 ;** MCU - MCU Control
                                 ;***************************************************************************/
                                 
                                 ; MCU_MCUCR masks
                                 .equ MCU_JTAGD_bm = 0x01 ; JTAG Disable bit mask
                                 .equ MCU_JTAGD_bp = 0 ; JTAG Disable bit position
                                 
                                 ; MCU_ANAINIT masks
                                 .equ MCU_STARTUPDLYB_gm = 0x0C ; Analog startup delay Port B group mask
                                 .equ MCU_STARTUPDLYB_gp = 2 ; Analog startup delay Port B group position
                                 .equ MCU_STARTUPDLYB0_bm = (1<<2) ; Analog startup delay Port B bit 0 mask
                                 .equ MCU_STARTUPDLYB0_bp = 2 ; Analog startup delay Port B bit 0 position
                                 .equ MCU_STARTUPDLYB1_bm = (1<<3) ; Analog startup delay Port B bit 1 mask
                                 .equ MCU_STARTUPDLYB1_bp = 3 ; Analog startup delay Port B bit 1 position
                                 .equ MCU_STARTUPDLYA_gm = 0x03 ; Analog startup delay Port A group mask
                                 .equ MCU_STARTUPDLYA_gp = 0 ; Analog startup delay Port A group position
                                 .equ MCU_STARTUPDLYA0_bm = (1<<0) ; Analog startup delay Port A bit 0 mask
                                 .equ MCU_STARTUPDLYA0_bp = 0 ; Analog startup delay Port A bit 0 position
                                 .equ MCU_STARTUPDLYA1_bm = (1<<1) ; Analog startup delay Port A bit 1 mask
                                 .equ MCU_STARTUPDLYA1_bp = 1 ; Analog startup delay Port A bit 1 position
                                 
                                 ; MCU_EVSYSLOCK masks
                                 .equ MCU_EVSYS1LOCK_bm = 0x10 ; Event Channel 4-7 Lock bit mask
                                 .equ MCU_EVSYS1LOCK_bp = 4 ; Event Channel 4-7 Lock bit position
                                 .equ MCU_EVSYS0LOCK_bm = 0x01 ; Event Channel 0-3 Lock bit mask
                                 .equ MCU_EVSYS0LOCK_bp = 0 ; Event Channel 0-3 Lock bit position
                                 
                                 ; MCU_AWEXLOCK masks
                                 .equ MCU_AWEXFLOCK_bm = 0x08 ; AWeX on T/C F0 Lock bit mask
                                 .equ MCU_AWEXFLOCK_bp = 3 ; AWeX on T/C F0 Lock bit position
                                 .equ MCU_AWEXELOCK_bm = 0x04 ; AWeX on T/C E0 Lock bit mask
                                 .equ MCU_AWEXELOCK_bp = 2 ; AWeX on T/C E0 Lock bit position
                                 .equ MCU_AWEXDLOCK_bm = 0x02 ; AWeX on T/C D0 Lock bit mask
                                 .equ MCU_AWEXDLOCK_bp = 1 ; AWeX on T/C D0 Lock bit position
                                 .equ MCU_AWEXCLOCK_bm = 0x01 ; AWeX on T/C C0 Lock bit mask
                                 .equ MCU_AWEXCLOCK_bp = 0 ; AWeX on T/C C0 Lock bit position
                                  
                                 
                                 ;***************************************************************************
                                 ;** PMIC - Programmable Multi-level Interrupt Controller
                                 ;***************************************************************************/
                                 
                                 ; PMIC_STATUS masks
                                 .equ PMIC_NMIEX_bm = 0x80 ; Non-maskable Interrupt Executing bit mask
                                 .equ PMIC_NMIEX_bp = 7 ; Non-maskable Interrupt Executing bit position
                                 .equ PMIC_HILVLEX_bm = 0x04 ; High Level Interrupt Executing bit mask
                                 .equ PMIC_HILVLEX_bp = 2 ; High Level Interrupt Executing bit position
                                 .equ PMIC_MEDLVLEX_bm = 0x02 ; Medium Level Interrupt Executing bit mask
                                 .equ PMIC_MEDLVLEX_bp = 1 ; Medium Level Interrupt Executing bit position
                                 .equ PMIC_LOLVLEX_bm = 0x01 ; Low Level Interrupt Executing bit mask
                                 .equ PMIC_LOLVLEX_bp = 0 ; Low Level Interrupt Executing bit position
                                 
                                 ; PMIC_CTRL masks
                                 .equ PMIC_RREN_bm = 0x80 ; Round-Robin Priority Enable bit mask
                                 .equ PMIC_RREN_bp = 7 ; Round-Robin Priority Enable bit position
                                 .equ PMIC_IVSEL_bm = 0x40 ; Interrupt Vector Select bit mask
                                 .equ PMIC_IVSEL_bp = 6 ; Interrupt Vector Select bit position
                                 .equ PMIC_HILVLEN_bm = 0x04 ; High Level Enable bit mask
                                 .equ PMIC_HILVLEN_bp = 2 ; High Level Enable bit position
                                 .equ PMIC_MEDLVLEN_bm = 0x02 ; Medium Level Enable bit mask
                                 .equ PMIC_MEDLVLEN_bp = 1 ; Medium Level Enable bit position
                                 .equ PMIC_LOLVLEN_bm = 0x01 ; Low Level Enable bit mask
                                 .equ PMIC_LOLVLEN_bp = 0 ; Low Level Enable bit position
                                  
                                 
                                 ;***************************************************************************
                                 ;** PORTCFG - Port Configuration
                                 ;***************************************************************************/
                                 
                                 ; PORTCFG_VPCTRLA masks
                                 .equ PORTCFG_VP1MAP_gm = 0xF0 ; Virtual Port 1 Mapping group mask
                                 .equ PORTCFG_VP1MAP_gp = 4 ; Virtual Port 1 Mapping group position
                                 .equ PORTCFG_VP1MAP0_bm = (1<<4) ; Virtual Port 1 Mapping bit 0 mask
                                 .equ PORTCFG_VP1MAP0_bp = 4 ; Virtual Port 1 Mapping bit 0 position
                                 .equ PORTCFG_VP1MAP1_bm = (1<<5) ; Virtual Port 1 Mapping bit 1 mask
                                 .equ PORTCFG_VP1MAP1_bp = 5 ; Virtual Port 1 Mapping bit 1 position
                                 .equ PORTCFG_VP1MAP2_bm = (1<<6) ; Virtual Port 1 Mapping bit 2 mask
                                 .equ PORTCFG_VP1MAP2_bp = 6 ; Virtual Port 1 Mapping bit 2 position
                                 .equ PORTCFG_VP1MAP3_bm = (1<<7) ; Virtual Port 1 Mapping bit 3 mask
                                 .equ PORTCFG_VP1MAP3_bp = 7 ; Virtual Port 1 Mapping bit 3 position
                                 .equ PORTCFG_VP0MAP_gm = 0x0F ; Virtual Port 0 Mapping group mask
                                 .equ PORTCFG_VP0MAP_gp = 0 ; Virtual Port 0 Mapping group position
                                 .equ PORTCFG_VP0MAP0_bm = (1<<0) ; Virtual Port 0 Mapping bit 0 mask
                                 .equ PORTCFG_VP0MAP0_bp = 0 ; Virtual Port 0 Mapping bit 0 position
                                 .equ PORTCFG_VP0MAP1_bm = (1<<1) ; Virtual Port 0 Mapping bit 1 mask
                                 .equ PORTCFG_VP0MAP1_bp = 1 ; Virtual Port 0 Mapping bit 1 position
                                 .equ PORTCFG_VP0MAP2_bm = (1<<2) ; Virtual Port 0 Mapping bit 2 mask
                                 .equ PORTCFG_VP0MAP2_bp = 2 ; Virtual Port 0 Mapping bit 2 position
                                 .equ PORTCFG_VP0MAP3_bm = (1<<3) ; Virtual Port 0 Mapping bit 3 mask
                                 .equ PORTCFG_VP0MAP3_bp = 3 ; Virtual Port 0 Mapping bit 3 position
                                 
                                 ; PORTCFG_VPCTRLB masks
                                 .equ PORTCFG_VP3MAP_gm = 0xF0 ; Virtual Port 3 Mapping group mask
                                 .equ PORTCFG_VP3MAP_gp = 4 ; Virtual Port 3 Mapping group position
                                 .equ PORTCFG_VP3MAP0_bm = (1<<4) ; Virtual Port 3 Mapping bit 0 mask
                                 .equ PORTCFG_VP3MAP0_bp = 4 ; Virtual Port 3 Mapping bit 0 position
                                 .equ PORTCFG_VP3MAP1_bm = (1<<5) ; Virtual Port 3 Mapping bit 1 mask
                                 .equ PORTCFG_VP3MAP1_bp = 5 ; Virtual Port 3 Mapping bit 1 position
                                 .equ PORTCFG_VP3MAP2_bm = (1<<6) ; Virtual Port 3 Mapping bit 2 mask
                                 .equ PORTCFG_VP3MAP2_bp = 6 ; Virtual Port 3 Mapping bit 2 position
                                 .equ PORTCFG_VP3MAP3_bm = (1<<7) ; Virtual Port 3 Mapping bit 3 mask
                                 .equ PORTCFG_VP3MAP3_bp = 7 ; Virtual Port 3 Mapping bit 3 position
                                 .equ PORTCFG_VP2MAP_gm = 0x0F ; Virtual Port 2 Mapping group mask
                                 .equ PORTCFG_VP2MAP_gp = 0 ; Virtual Port 2 Mapping group position
                                 .equ PORTCFG_VP2MAP0_bm = (1<<0) ; Virtual Port 2 Mapping bit 0 mask
                                 .equ PORTCFG_VP2MAP0_bp = 0 ; Virtual Port 2 Mapping bit 0 position
                                 .equ PORTCFG_VP2MAP1_bm = (1<<1) ; Virtual Port 2 Mapping bit 1 mask
                                 .equ PORTCFG_VP2MAP1_bp = 1 ; Virtual Port 2 Mapping bit 1 position
                                 .equ PORTCFG_VP2MAP2_bm = (1<<2) ; Virtual Port 2 Mapping bit 2 mask
                                 .equ PORTCFG_VP2MAP2_bp = 2 ; Virtual Port 2 Mapping bit 2 position
                                 .equ PORTCFG_VP2MAP3_bm = (1<<3) ; Virtual Port 2 Mapping bit 3 mask
                                 .equ PORTCFG_VP2MAP3_bp = 3 ; Virtual Port 2 Mapping bit 3 position
                                 
                                 ; PORTCFG_CLKEVOUT masks
                                 .equ PORTCFG_CLKOUT_gm = 0x03 ; Peripheral Clock Output Port group mask
                                 .equ PORTCFG_CLKOUT_gp = 0 ; Peripheral Clock Output Port group position
                                 .equ PORTCFG_CLKOUT0_bm = (1<<0) ; Peripheral Clock Output Port bit 0 mask
                                 .equ PORTCFG_CLKOUT0_bp = 0 ; Peripheral Clock Output Port bit 0 position
                                 .equ PORTCFG_CLKOUT1_bm = (1<<1) ; Peripheral Clock Output Port bit 1 mask
                                 .equ PORTCFG_CLKOUT1_bp = 1 ; Peripheral Clock Output Port bit 1 position
                                 .equ PORTCFG_CLKOUTSEL_gm = 0x0C ; Peripheral Clock Output Select group mask
                                 .equ PORTCFG_CLKOUTSEL_gp = 2 ; Peripheral Clock Output Select group position
                                 .equ PORTCFG_CLKOUTSEL0_bm = (1<<2) ; Peripheral Clock Output Select bit 0 mask
                                 .equ PORTCFG_CLKOUTSEL0_bp = 2 ; Peripheral Clock Output Select bit 0 position
                                 .equ PORTCFG_CLKOUTSEL1_bm = (1<<3) ; Peripheral Clock Output Select bit 1 mask
                                 .equ PORTCFG_CLKOUTSEL1_bp = 3 ; Peripheral Clock Output Select bit 1 position
                                 .equ PORTCFG_EVOUT_gm = 0x30 ; Event Output Port group mask
                                 .equ PORTCFG_EVOUT_gp = 4 ; Event Output Port group position
                                 .equ PORTCFG_EVOUT0_bm = (1<<4) ; Event Output Port bit 0 mask
                                 .equ PORTCFG_EVOUT0_bp = 4 ; Event Output Port bit 0 position
                                 .equ PORTCFG_EVOUT1_bm = (1<<5) ; Event Output Port bit 1 mask
                                 .equ PORTCFG_EVOUT1_bp = 5 ; Event Output Port bit 1 position
                                 .equ PORTCFG_RTCOUT_bm = 0x40 ; RTC Clock Output bit mask
                                 .equ PORTCFG_RTCOUT_bp = 6 ; RTC Clock Output bit position
                                 .equ PORTCFG_CLKEVPIN_bm = 0x80 ; Peripheral Clock and Event Output pin Select bit mask
                                 .equ PORTCFG_CLKEVPIN_bp = 7 ; Peripheral Clock and Event Output pin Select bit position
                                 
                                 ; PORTCFG.EBIOUT masks
                                 .equ PORTCFG_EBICSOUT_gm = 0x03  ; EBI Chip Select Output group mask. 
                                 .equ PORTCFG_EBICSOUT_gp = 0  ; EBI Chip Select Output group position. 
                                 .equ PORTCFG_EBICSOUT0_bm = (1<<0)  ; EBI Chip Select Output bit 0 mask. 
                                 .equ PORTCFG_EBICSOUT0_bp = 0  ; EBI Chip Select Output bit 0 position. 
                                 .equ PORTCFG_EBICSOUT1_bm = (1<<1)  ; EBI Chip Select Output bit 1 mask. 
                                 .equ PORTCFG_EBICSOUT1_bp = 1  ; EBI Chip Select Output bit 1 position. 
                                 .equ PORTCFG_EBIADROUT_gm = 0x0C  ; EBI Address Output group mask. 
                                 .equ PORTCFG_EBIADROUT_gp = 2  ; EBI Address Output group position. 
                                 .equ PORTCFG_EBIADROUT0_bm = (1<<2)  ; EBI Address Output bit 0 mask. 
                                 .equ PORTCFG_EBIADROUT0_bp = 2  ; EBI Address Output bit 0 position. 
                                 .equ PORTCFG_EBIADROUT1_bm = (1<<3)  ; EBI Address Output bit 1 mask. 
                                 .equ PORTCFG_EBIADROUT1_bp = 3  ; EBI Address Output bit 1 position. 
                                 
                                 
                                 ; PORTCFG_EVOUTSEL masks
                                 .equ PORTCFG_EVOUTSEL_gm = 0x07 ; Event Output Select group mask
                                 .equ PORTCFG_EVOUTSEL_gp = 0 ; Event Output Select group position
                                 .equ PORTCFG_EVOUTSEL0_bm = (1<<0) ; Event Output Select bit 0 mask
                                 .equ PORTCFG_EVOUTSEL0_bp = 0 ; Event Output Select bit 0 position
                                 .equ PORTCFG_EVOUTSEL1_bm = (1<<1) ; Event Output Select bit 1 mask
                                 .equ PORTCFG_EVOUTSEL1_bp = 1 ; Event Output Select bit 1 position
                                 .equ PORTCFG_EVOUTSEL2_bm = (1<<2) ; Event Output Select bit 2 mask
                                 .equ PORTCFG_EVOUTSEL2_bp = 2 ; Event Output Select bit 2 position
                                  
                                 ; Virtual Port Mapping
                                 .equ PORTCFG_VP02MAP_PORTA_gc = (0x00<<0) ; Mapped To PORTA
                                 .equ PORTCFG_VP02MAP_PORTB_gc = (0x01<<0) ; Mapped To PORTB
                                 .equ PORTCFG_VP02MAP_PORTC_gc = (0x02<<0) ; Mapped To PORTC
                                 .equ PORTCFG_VP02MAP_PORTD_gc = (0x03<<0) ; Mapped To PORTD
                                 .equ PORTCFG_VP02MAP_PORTE_gc = (0x04<<0) ; Mapped To PORTE
                                 .equ PORTCFG_VP02MAP_PORTF_gc = (0x05<<0) ; Mapped To PORTF
                                 .equ PORTCFG_VP02MAP_PORTG_gc = (0x06<<0) ; Mapped To PORTG
                                 .equ PORTCFG_VP02MAP_PORTH_gc = (0x07<<0) ; Mapped To PORTH
                                 .equ PORTCFG_VP02MAP_PORTJ_gc = (0x08<<0) ; Mapped To PORTJ
                                 .equ PORTCFG_VP02MAP_PORTK_gc = (0x09<<0) ; Mapped To PORTK
                                 .equ PORTCFG_VP02MAP_PORTL_gc = (0x0A<<0) ; Mapped To PORTL
                                 .equ PORTCFG_VP02MAP_PORTM_gc = (0x0B<<0) ; Mapped To PORTM
                                 .equ PORTCFG_VP02MAP_PORTN_gc = (0x0C<<0) ; Mapped To PORTN
                                 .equ PORTCFG_VP02MAP_PORTP_gc = (0x0D<<0) ; Mapped To PORTP
                                 .equ PORTCFG_VP02MAP_PORTQ_gc = (0x0E<<0) ; Mapped To PORTQ
                                 .equ PORTCFG_VP02MAP_PORTR_gc = (0x0F<<0) ; Mapped To PORTR
                                 
                                 ; Virtual Port Mapping
                                 .equ PORTCFG_VP13MAP_PORTA_gc = (0x00<<4) ; Mapped To PORTA
                                 .equ PORTCFG_VP13MAP_PORTB_gc = (0x01<<4) ; Mapped To PORTB
                                 .equ PORTCFG_VP13MAP_PORTC_gc = (0x02<<4) ; Mapped To PORTC
                                 .equ PORTCFG_VP13MAP_PORTD_gc = (0x03<<4) ; Mapped To PORTD
                                 .equ PORTCFG_VP13MAP_PORTE_gc = (0x04<<4) ; Mapped To PORTE
                                 .equ PORTCFG_VP13MAP_PORTF_gc = (0x05<<4) ; Mapped To PORTF
                                 .equ PORTCFG_VP13MAP_PORTG_gc = (0x06<<4) ; Mapped To PORTG
                                 .equ PORTCFG_VP13MAP_PORTH_gc = (0x07<<4) ; Mapped To PORTH
                                 .equ PORTCFG_VP13MAP_PORTJ_gc = (0x08<<4) ; Mapped To PORTJ
                                 .equ PORTCFG_VP13MAP_PORTK_gc = (0x09<<4) ; Mapped To PORTK
                                 .equ PORTCFG_VP13MAP_PORTL_gc = (0x0A<<4) ; Mapped To PORTL
                                 .equ PORTCFG_VP13MAP_PORTM_gc = (0x0B<<4) ; Mapped To PORTM
                                 .equ PORTCFG_VP13MAP_PORTN_gc = (0x0C<<4) ; Mapped To PORTN
                                 .equ PORTCFG_VP13MAP_PORTP_gc = (0x0D<<4) ; Mapped To PORTP
                                 .equ PORTCFG_VP13MAP_PORTQ_gc = (0x0E<<4) ; Mapped To PORTQ
                                 .equ PORTCFG_VP13MAP_PORTR_gc = (0x0F<<4) ; Mapped To PORTR
                                 
                                 ; System Clock Output Port
                                 .equ PORTCFG_CLKOUT_OFF_gc = (0x00<<0) ; System Clock Output Disabled
                                 .equ PORTCFG_CLKOUT_PC7_gc = (0x01<<0) ; System Clock Output on Port C pin 7
                                 .equ PORTCFG_CLKOUT_PD7_gc = (0x02<<0) ; System Clock Output on Port D pin 7
                                 .equ PORTCFG_CLKOUT_PE7_gc = (0x03<<0) ; System Clock Output on Port E pin 7
                                 
                                 ; Peripheral Clock Output Select
                                 .equ PORTCFG_CLKOUTSEL_CLK1X_gc = (0x00<<2) ; 1x Peripheral Clock Output to pin
                                 .equ PORTCFG_CLKOUTSEL_CLK2X_gc = (0x01<<2) ; 2x Peripheral Clock Output to pin
                                 .equ PORTCFG_CLKOUTSEL_CLK4X_gc = (0x02<<2) ; 4x Peripheral Clock Output to pin
                                 
                                 ; Event Output Port
                                 .equ PORTCFG_EVOUT_OFF_gc = (0x00<<4) ; Event Output Disabled
                                 .equ PORTCFG_EVOUT_PC7_gc = (0x01<<4) ; Event Channel 7 Output on Port C pin 7
                                 .equ PORTCFG_EVOUT_PD7_gc = (0x02<<4) ; Event Channel 7 Output on Port D pin 7
                                 .equ PORTCFG_EVOUT_PE7_gc = (0x03<<4) ; Event Channel 7 Output on Port E pin 7
                                 
                                 ; Clock and Event Output Port
                                 .equ PORTCFG_CLKEVPIN_PIN7_gc = (0x00<<7) ; Clock and Event Ouput on PIN 7
                                 .equ PORTCFG_CLKEVPIN_PIN4_gc = (0x01<<7) ; Clock and Event Ouput on PIN 4
                                 
                                 ; Event Output Select
                                 .equ PORTCFG_EVOUTSEL_0_gc = (0x00<<0) ; Event Channel 0 output to pin
                                 .equ PORTCFG_EVOUTSEL_1_gc = (0x01<<0) ; Event Channel 1 output to pin
                                 .equ PORTCFG_EVOUTSEL_2_gc = (0x02<<0) ; Event Channel 2 output to pin
                                 .equ PORTCFG_EVOUTSEL_3_gc = (0x03<<0) ; Event Channel 3 output to pin
                                 .equ PORTCFG_EVOUTSEL_4_gc = (0x04<<0) ; Event Channel 4 output to pin
                                 .equ PORTCFG_EVOUTSEL_5_gc = (0x05<<0) ; Event Channel 5 output to pin
                                 .equ PORTCFG_EVOUTSEL_6_gc = (0x06<<0) ; Event Channel 6 output to pin
                                 .equ PORTCFG_EVOUTSEL_7_gc = (0x07<<0) ; Event Channel 7 output to pin
                                 
                                 
                                 ;***************************************************************************
                                 ;** AES - AES Module
                                 ;***************************************************************************/
                                 
                                 ; AES_CTRL masks
                                 .equ AES_START_bm = 0x80 ; Start/Run bit mask
                                 .equ AES_START_bp = 7 ; Start/Run bit position
                                 .equ AES_AUTO_bm = 0x40 ; Auto Start Trigger bit mask
                                 .equ AES_AUTO_bp = 6 ; Auto Start Trigger bit position
                                 .equ AES_RESET_bm = 0x20 ; AES Software Reset bit mask
                                 .equ AES_RESET_bp = 5 ; AES Software Reset bit position
                                 .equ AES_DECRYPT_bm = 0x10 ; Decryption / Direction bit mask
                                 .equ AES_DECRYPT_bp = 4 ; Decryption / Direction bit position
                                 .equ AES_XOR_bm = 0x04 ; State XOR Load Enable bit mask
                                 .equ AES_XOR_bp = 2 ; State XOR Load Enable bit position
                                 
                                 ; AES_STATUS masks
                                 .equ AES_ERROR_bm = 0x80 ; AES Error bit mask
                                 .equ AES_ERROR_bp = 7 ; AES Error bit position
                                 .equ AES_SRIF_bm = 0x01 ; State Ready Interrupt Flag bit mask
                                 .equ AES_SRIF_bp = 0 ; State Ready Interrupt Flag bit position
                                 
                                 ; AES_INTCTRL masks
                                 .equ AES_INTLVL_gm = 0x03 ; Interrupt level group mask
                                 .equ AES_INTLVL_gp = 0 ; Interrupt level group position
                                 .equ AES_INTLVL0_bm = (1<<0) ; Interrupt level bit 0 mask
                                 .equ AES_INTLVL0_bp = 0 ; Interrupt level bit 0 position
                                 .equ AES_INTLVL1_bm = (1<<1) ; Interrupt level bit 1 mask
                                 .equ AES_INTLVL1_bp = 1 ; Interrupt level bit 1 position
                                  
                                 ; Interrupt level
                                 .equ AES_INTLVL_OFF_gc = (0x00<<0) ; Interrupt Disabled
                                 .equ AES_INTLVL_LO_gc = (0x01<<0) ; Low Level
                                 .equ AES_INTLVL_MED_gc = (0x02<<0) ; Medium Level
                                 .equ AES_INTLVL_HI_gc = (0x03<<0) ; High Level
                                 
                                 
                                 ;***************************************************************************
                                 ;** CRC - Cyclic Redundancy Checker
                                 ;***************************************************************************/
                                 
                                 ; CRC_CTRL masks
                                 .equ CRC_RESET_gm = 0xC0 ; Reset group mask
                                 .equ CRC_RESET_gp = 6 ; Reset group position
                                 .equ CRC_RESET0_bm = (1<<6) ; Reset bit 0 mask
                                 .equ CRC_RESET0_bp = 6 ; Reset bit 0 position
                                 .equ CRC_RESET1_bm = (1<<7) ; Reset bit 1 mask
                                 .equ CRC_RESET1_bp = 7 ; Reset bit 1 position
                                 .equ CRC_CRC32_bm = 0x20 ; CRC Mode bit mask
                                 .equ CRC_CRC32_bp = 5 ; CRC Mode bit position
                                 .equ CRC_SOURCE_gm = 0x0F ; Input Source group mask
                                 .equ CRC_SOURCE_gp = 0 ; Input Source group position
                                 .equ CRC_SOURCE0_bm = (1<<0) ; Input Source bit 0 mask
                                 .equ CRC_SOURCE0_bp = 0 ; Input Source bit 0 position
                                 .equ CRC_SOURCE1_bm = (1<<1) ; Input Source bit 1 mask
                                 .equ CRC_SOURCE1_bp = 1 ; Input Source bit 1 position
                                 .equ CRC_SOURCE2_bm = (1<<2) ; Input Source bit 2 mask
                                 .equ CRC_SOURCE2_bp = 2 ; Input Source bit 2 position
                                 .equ CRC_SOURCE3_bm = (1<<3) ; Input Source bit 3 mask
                                 .equ CRC_SOURCE3_bp = 3 ; Input Source bit 3 position
                                 
                                 ; CRC_STATUS masks
                                 .equ CRC_ZERO_bm = 0x02 ; Zero detection bit mask
                                 .equ CRC_ZERO_bp = 1 ; Zero detection bit position
                                 .equ CRC_BUSY_bm = 0x01 ; Busy bit mask
                                 .equ CRC_BUSY_bp = 0 ; Busy bit position
                                  
                                 ; Reset
                                 .equ CRC_RESET_NO_gc = (0x00<<6) ; No Reset
                                 .equ CRC_RESET_RESET0_gc = (0x02<<6) ; Reset CRC with CHECKSUM to all zeros
                                 .equ CRC_RESET_RESET1_gc = (0x03<<6) ; Reset CRC with CHECKSUM to all ones
                                 
                                 ; Input Source
                                 .equ CRC_SOURCE_DISABLE_gc = (0x00<<0) ; Disabled
                                 .equ CRC_SOURCE_IO_gc = (0x01<<0) ; I/O Interface
                                 .equ CRC_SOURCE_FLASH_gc = (0x02<<0) ; Flash
                                 .equ CRC_SOURCE_DMAC0_gc = (0x04<<0) ; DMAC Channel 0
                                 .equ CRC_SOURCE_DMAC1_gc = (0x05<<0) ; DMAC Channel 1
                                 .equ CRC_SOURCE_DMAC2_gc = (0x06<<0) ; DMAC Channel 2
                                 .equ CRC_SOURCE_DMAC3_gc = (0x07<<0) ; DMAC Channel 3
                                 
                                 
                                 ;***************************************************************************
                                 ;** DMA - DMA Controller
                                 ;***************************************************************************/
                                 
                                 ; DMA_CH_CTRLA masks
                                 .equ DMA_CH_ENABLE_bm = 0x80 ; Channel Enable bit mask
                                 .equ DMA_CH_ENABLE_bp = 7 ; Channel Enable bit position
                                 .equ DMA_CH_RESET_bm = 0x40 ; Channel Software Reset bit mask
                                 .equ DMA_CH_RESET_bp = 6 ; Channel Software Reset bit position
                                 .equ DMA_CH_REPEAT_bm = 0x20 ; Channel Repeat Mode bit mask
                                 .equ DMA_CH_REPEAT_bp = 5 ; Channel Repeat Mode bit position
                                 .equ DMA_CH_TRFREQ_bm = 0x10 ; Channel Transfer Request bit mask
                                 .equ DMA_CH_TRFREQ_bp = 4 ; Channel Transfer Request bit position
                                 .equ DMA_CH_SINGLE_bm = 0x04 ; Channel Single Shot Data Transfer bit mask
                                 .equ DMA_CH_SINGLE_bp = 2 ; Channel Single Shot Data Transfer bit position
                                 .equ DMA_CH_BURSTLEN_gm = 0x03 ; Channel Transfer Mode group mask
                                 .equ DMA_CH_BURSTLEN_gp = 0 ; Channel Transfer Mode group position
                                 .equ DMA_CH_BURSTLEN0_bm = (1<<0) ; Channel Transfer Mode bit 0 mask
                                 .equ DMA_CH_BURSTLEN0_bp = 0 ; Channel Transfer Mode bit 0 position
                                 .equ DMA_CH_BURSTLEN1_bm = (1<<1) ; Channel Transfer Mode bit 1 mask
                                 .equ DMA_CH_BURSTLEN1_bp = 1 ; Channel Transfer Mode bit 1 position
                                 
                                 ; DMA_CH_CTRLB masks
                                 .equ DMA_CH_CHBUSY_bm = 0x80 ; Block Transfer Busy bit mask
                                 .equ DMA_CH_CHBUSY_bp = 7 ; Block Transfer Busy bit position
                                 .equ DMA_CH_CHPEND_bm = 0x40 ; Block Transfer Pending bit mask
                                 .equ DMA_CH_CHPEND_bp = 6 ; Block Transfer Pending bit position
                                 .equ DMA_CH_ERRIF_bm = 0x20 ; Block Transfer Error Interrupt Flag bit mask
                                 .equ DMA_CH_ERRIF_bp = 5 ; Block Transfer Error Interrupt Flag bit position
                                 .equ DMA_CH_TRNIF_bm = 0x10 ; Transaction Complete Interrup Flag bit mask
                                 .equ DMA_CH_TRNIF_bp = 4 ; Transaction Complete Interrup Flag bit position
                                 .equ DMA_CH_ERRINTLVL_gm = 0x0C ; Transfer Error Interrupt Level group mask
                                 .equ DMA_CH_ERRINTLVL_gp = 2 ; Transfer Error Interrupt Level group position
                                 .equ DMA_CH_ERRINTLVL0_bm = (1<<2) ; Transfer Error Interrupt Level bit 0 mask
                                 .equ DMA_CH_ERRINTLVL0_bp = 2 ; Transfer Error Interrupt Level bit 0 position
                                 .equ DMA_CH_ERRINTLVL1_bm = (1<<3) ; Transfer Error Interrupt Level bit 1 mask
                                 .equ DMA_CH_ERRINTLVL1_bp = 3 ; Transfer Error Interrupt Level bit 1 position
                                 .equ DMA_CH_TRNINTLVL_gm = 0x03 ; Transaction Complete Interrupt Level group mask
                                 .equ DMA_CH_TRNINTLVL_gp = 0 ; Transaction Complete Interrupt Level group position
                                 .equ DMA_CH_TRNINTLVL0_bm = (1<<0) ; Transaction Complete Interrupt Level bit 0 mask
                                 .equ DMA_CH_TRNINTLVL0_bp = 0 ; Transaction Complete Interrupt Level bit 0 position
                                 .equ DMA_CH_TRNINTLVL1_bm = (1<<1) ; Transaction Complete Interrupt Level bit 1 mask
                                 .equ DMA_CH_TRNINTLVL1_bp = 1 ; Transaction Complete Interrupt Level bit 1 position
                                 
                                 ; DMA_CH_ADDRCTRL masks
                                 .equ DMA_CH_SRCRELOAD_gm = 0xC0 ; Channel Source Address Reload group mask
                                 .equ DMA_CH_SRCRELOAD_gp = 6 ; Channel Source Address Reload group position
                                 .equ DMA_CH_SRCRELOAD0_bm = (1<<6) ; Channel Source Address Reload bit 0 mask
                                 .equ DMA_CH_SRCRELOAD0_bp = 6 ; Channel Source Address Reload bit 0 position
                                 .equ DMA_CH_SRCRELOAD1_bm = (1<<7) ; Channel Source Address Reload bit 1 mask
                                 .equ DMA_CH_SRCRELOAD1_bp = 7 ; Channel Source Address Reload bit 1 position
                                 .equ DMA_CH_SRCDIR_gm = 0x30 ; Channel Source Address Mode group mask
                                 .equ DMA_CH_SRCDIR_gp = 4 ; Channel Source Address Mode group position
                                 .equ DMA_CH_SRCDIR0_bm = (1<<4) ; Channel Source Address Mode bit 0 mask
                                 .equ DMA_CH_SRCDIR0_bp = 4 ; Channel Source Address Mode bit 0 position
                                 .equ DMA_CH_SRCDIR1_bm = (1<<5) ; Channel Source Address Mode bit 1 mask
                                 .equ DMA_CH_SRCDIR1_bp = 5 ; Channel Source Address Mode bit 1 position
                                 .equ DMA_CH_DESTRELOAD_gm = 0x0C ; Channel Destination Address Reload group mask
                                 .equ DMA_CH_DESTRELOAD_gp = 2 ; Channel Destination Address Reload group position
                                 .equ DMA_CH_DESTRELOAD0_bm = (1<<2) ; Channel Destination Address Reload bit 0 mask
                                 .equ DMA_CH_DESTRELOAD0_bp = 2 ; Channel Destination Address Reload bit 0 position
                                 .equ DMA_CH_DESTRELOAD1_bm = (1<<3) ; Channel Destination Address Reload bit 1 mask
                                 .equ DMA_CH_DESTRELOAD1_bp = 3 ; Channel Destination Address Reload bit 1 position
                                 .equ DMA_CH_DESTDIR_gm = 0x03 ; Channel Destination Address Mode group mask
                                 .equ DMA_CH_DESTDIR_gp = 0 ; Channel Destination Address Mode group position
                                 .equ DMA_CH_DESTDIR0_bm = (1<<0) ; Channel Destination Address Mode bit 0 mask
                                 .equ DMA_CH_DESTDIR0_bp = 0 ; Channel Destination Address Mode bit 0 position
                                 .equ DMA_CH_DESTDIR1_bm = (1<<1) ; Channel Destination Address Mode bit 1 mask
                                 .equ DMA_CH_DESTDIR1_bp = 1 ; Channel Destination Address Mode bit 1 position
                                 
                                 ; DMA_CH_TRIGSRC masks
                                 .equ DMA_CH_TRIGSRC_gm = 0xFF ; Channel Trigger Source group mask
                                 .equ DMA_CH_TRIGSRC_gp = 0 ; Channel Trigger Source group position
                                 .equ DMA_CH_TRIGSRC0_bm = (1<<0) ; Channel Trigger Source bit 0 mask
                                 .equ DMA_CH_TRIGSRC0_bp = 0 ; Channel Trigger Source bit 0 position
                                 .equ DMA_CH_TRIGSRC1_bm = (1<<1) ; Channel Trigger Source bit 1 mask
                                 .equ DMA_CH_TRIGSRC1_bp = 1 ; Channel Trigger Source bit 1 position
                                 .equ DMA_CH_TRIGSRC2_bm = (1<<2) ; Channel Trigger Source bit 2 mask
                                 .equ DMA_CH_TRIGSRC2_bp = 2 ; Channel Trigger Source bit 2 position
                                 .equ DMA_CH_TRIGSRC3_bm = (1<<3) ; Channel Trigger Source bit 3 mask
                                 .equ DMA_CH_TRIGSRC3_bp = 3 ; Channel Trigger Source bit 3 position
                                 .equ DMA_CH_TRIGSRC4_bm = (1<<4) ; Channel Trigger Source bit 4 mask
                                 .equ DMA_CH_TRIGSRC4_bp = 4 ; Channel Trigger Source bit 4 position
                                 .equ DMA_CH_TRIGSRC5_bm = (1<<5) ; Channel Trigger Source bit 5 mask
                                 .equ DMA_CH_TRIGSRC5_bp = 5 ; Channel Trigger Source bit 5 position
                                 .equ DMA_CH_TRIGSRC6_bm = (1<<6) ; Channel Trigger Source bit 6 mask
                                 .equ DMA_CH_TRIGSRC6_bp = 6 ; Channel Trigger Source bit 6 position
                                 .equ DMA_CH_TRIGSRC7_bm = (1<<7) ; Channel Trigger Source bit 7 mask
                                 .equ DMA_CH_TRIGSRC7_bp = 7 ; Channel Trigger Source bit 7 position
                                 
                                 ; DMA_CTRL masks
                                 .equ DMA_ENABLE_bm = 0x80 ; Enable bit mask
                                 .equ DMA_ENABLE_bp = 7 ; Enable bit position
                                 .equ DMA_RESET_bm = 0x40 ; Software Reset bit mask
                                 .equ DMA_RESET_bp = 6 ; Software Reset bit position
                                 .equ DMA_DBUFMODE_gm = 0x0C ; Double Buffering Mode group mask
                                 .equ DMA_DBUFMODE_gp = 2 ; Double Buffering Mode group position
                                 .equ DMA_DBUFMODE0_bm = (1<<2) ; Double Buffering Mode bit 0 mask
                                 .equ DMA_DBUFMODE0_bp = 2 ; Double Buffering Mode bit 0 position
                                 .equ DMA_DBUFMODE1_bm = (1<<3) ; Double Buffering Mode bit 1 mask
                                 .equ DMA_DBUFMODE1_bp = 3 ; Double Buffering Mode bit 1 position
                                 .equ DMA_PRIMODE_gm = 0x03 ; Channel Priority Mode group mask
                                 .equ DMA_PRIMODE_gp = 0 ; Channel Priority Mode group position
                                 .equ DMA_PRIMODE0_bm = (1<<0) ; Channel Priority Mode bit 0 mask
                                 .equ DMA_PRIMODE0_bp = 0 ; Channel Priority Mode bit 0 position
                                 .equ DMA_PRIMODE1_bm = (1<<1) ; Channel Priority Mode bit 1 mask
                                 .equ DMA_PRIMODE1_bp = 1 ; Channel Priority Mode bit 1 position
                                 
                                 ; DMA_INTFLAGS masks
                                 .equ DMA_CH3ERRIF_bm = 0x80 ; Channel 3 Block Transfer Error Interrupt Flag bit mask
                                 .equ DMA_CH3ERRIF_bp = 7 ; Channel 3 Block Transfer Error Interrupt Flag bit position
                                 .equ DMA_CH2ERRIF_bm = 0x40 ; Channel 2 Block Transfer Error Interrupt Flag bit mask
                                 .equ DMA_CH2ERRIF_bp = 6 ; Channel 2 Block Transfer Error Interrupt Flag bit position
                                 .equ DMA_CH1ERRIF_bm = 0x20 ; Channel 1 Block Transfer Error Interrupt Flag bit mask
                                 .equ DMA_CH1ERRIF_bp = 5 ; Channel 1 Block Transfer Error Interrupt Flag bit position
                                 .equ DMA_CH0ERRIF_bm = 0x10 ; Channel 0 Block Transfer Error Interrupt Flag bit mask
                                 .equ DMA_CH0ERRIF_bp = 4 ; Channel 0 Block Transfer Error Interrupt Flag bit position
                                 .equ DMA_CH3TRNIF_bm = 0x08 ; Channel 3 Transaction Complete Interrupt Flag bit mask
                                 .equ DMA_CH3TRNIF_bp = 3 ; Channel 3 Transaction Complete Interrupt Flag bit position
                                 .equ DMA_CH2TRNIF_bm = 0x04 ; Channel 2 Transaction Complete Interrupt Flag bit mask
                                 .equ DMA_CH2TRNIF_bp = 2 ; Channel 2 Transaction Complete Interrupt Flag bit position
                                 .equ DMA_CH1TRNIF_bm = 0x02 ; Channel 1 Transaction Complete Interrupt Flag bit mask
                                 .equ DMA_CH1TRNIF_bp = 1 ; Channel 1 Transaction Complete Interrupt Flag bit position
                                 .equ DMA_CH0TRNIF_bm = 0x01 ; Channel 0 Transaction Complete Interrupt Flag bit mask
                                 .equ DMA_CH0TRNIF_bp = 0 ; Channel 0 Transaction Complete Interrupt Flag bit position
                                 
                                 ; DMA_STATUS masks
                                 .equ DMA_CH3BUSY_bm = 0x80 ; Channel 3 Block Transfer Busy bit mask
                                 .equ DMA_CH3BUSY_bp = 7 ; Channel 3 Block Transfer Busy bit position
                                 .equ DMA_CH2BUSY_bm = 0x40 ; Channel 2 Block Transfer Busy bit mask
                                 .equ DMA_CH2BUSY_bp = 6 ; Channel 2 Block Transfer Busy bit position
                                 .equ DMA_CH1BUSY_bm = 0x20 ; Channel 1 Block Transfer Busy bit mask
                                 .equ DMA_CH1BUSY_bp = 5 ; Channel 1 Block Transfer Busy bit position
                                 .equ DMA_CH0BUSY_bm = 0x10 ; Channel 0 Block Transfer Busy bit mask
                                 .equ DMA_CH0BUSY_bp = 4 ; Channel 0 Block Transfer Busy bit position
                                 .equ DMA_CH3PEND_bm = 0x08 ; Channel 3 Block Transfer Pending bit mask
                                 .equ DMA_CH3PEND_bp = 3 ; Channel 3 Block Transfer Pending bit position
                                 .equ DMA_CH2PEND_bm = 0x04 ; Channel 2 Block Transfer Pending bit mask
                                 .equ DMA_CH2PEND_bp = 2 ; Channel 2 Block Transfer Pending bit position
                                 .equ DMA_CH1PEND_bm = 0x02 ; Channel 1 Block Transfer Pending bit mask
                                 .equ DMA_CH1PEND_bp = 1 ; Channel 1 Block Transfer Pending bit position
                                 .equ DMA_CH0PEND_bm = 0x01 ; Channel 0 Block Transfer Pending bit mask
                                 .equ DMA_CH0PEND_bp = 0 ; Channel 0 Block Transfer Pending bit position
                                  
                                 ; Burst mode
                                 .equ DMA_CH_BURSTLEN_1BYTE_gc = (0x00<<0) ; 1-byte burst mode
                                 .equ DMA_CH_BURSTLEN_2BYTE_gc = (0x01<<0) ; 2-byte burst mode
                                 .equ DMA_CH_BURSTLEN_4BYTE_gc = (0x02<<0) ; 4-byte burst mode
                                 .equ DMA_CH_BURSTLEN_8BYTE_gc = (0x03<<0) ; 8-byte burst mode
                                 
                                 ; Source address reload mode
                                 .equ DMA_CH_SRCRELOAD_NONE_gc = (0x00<<6) ; No reload
                                 .equ DMA_CH_SRCRELOAD_BLOCK_gc = (0x01<<6) ; Reload at end of block
                                 .equ DMA_CH_SRCRELOAD_BURST_gc = (0x02<<6) ; Reload at end of burst
                                 .equ DMA_CH_SRCRELOAD_TRANSACTION_gc = (0x03<<6) ; Reload at end of transaction
                                 
                                 ; Source addressing mode
                                 .equ DMA_CH_SRCDIR_FIXED_gc = (0x00<<4) ; Fixed
                                 .equ DMA_CH_SRCDIR_INC_gc = (0x01<<4) ; Increment
                                 .equ DMA_CH_SRCDIR_DEC_gc = (0x02<<4) ; Decrement
                                 
                                 ; Destination adress reload mode
                                 .equ DMA_CH_DESTRELOAD_NONE_gc = (0x00<<2) ; No reload
                                 .equ DMA_CH_DESTRELOAD_BLOCK_gc = (0x01<<2) ; Reload at end of block
                                 .equ DMA_CH_DESTRELOAD_BURST_gc = (0x02<<2) ; Reload at end of burst
                                 .equ DMA_CH_DESTRELOAD_TRANSACTION_gc = (0x03<<2) ; Reload at end of transaction
                                 
                                 ; Destination adressing mode
                                 .equ DMA_CH_DESTDIR_FIXED_gc = (0x00<<0) ; Fixed
                                 .equ DMA_CH_DESTDIR_INC_gc = (0x01<<0) ; Increment
                                 .equ DMA_CH_DESTDIR_DEC_gc = (0x02<<0) ; Decrement
                                 
                                 ; Transfer trigger source
                                 .equ DMA_CH_TRIGSRC_OFF_gc = (0x00<<0) ; Off software triggers only
                                 .equ DMA_CH_TRIGSRC_EVSYS_CH0_gc = (0x01<<0) ; Event System Channel 0
                                 .equ DMA_CH_TRIGSRC_EVSYS_CH1_gc = (0x02<<0) ; Event System Channel 1
                                 .equ DMA_CH_TRIGSRC_EVSYS_CH2_gc = (0x03<<0) ; Event System Channel 2
                                 .equ DMA_CH_TRIGSRC_ADCA_CH0_gc = (0x10<<0) ; ADCA Channel 0
                                 .equ DMA_CH_TRIGSRC_ADCA_CH1_gc = (0x11<<0) ; ADCA Channel 1
                                 .equ DMA_CH_TRIGSRC_ADCA_CH2_gc = (0x12<<0) ; ADCA Channel 2
                                 .equ DMA_CH_TRIGSRC_ADCA_CH3_gc = (0x13<<0) ; ADCA Channel 3
                                 .equ DMA_CH_TRIGSRC_ADCA_CH4_gc = (0x14<<0) ; ADCA Channel 0,1,2,3 combined
                                 .equ DMA_CH_TRIGSRC_DACA_CH0_gc = (0x15<<0) ; DACA Channel 0
                                 .equ DMA_CH_TRIGSRC_DACA_CH1_gc = (0x16<<0) ; DACA Channel 1
                                 .equ DMA_CH_TRIGSRC_ADCB_CH0_gc = (0x20<<0) ; ADCB Channel 0
                                 .equ DMA_CH_TRIGSRC_ADCB_CH1_gc = (0x21<<0) ; ADCB Channel 1
                                 .equ DMA_CH_TRIGSRC_ADCB_CH2_gc = (0x22<<0) ; ADCB Channel 2
                                 .equ DMA_CH_TRIGSRC_ADCB_CH3_gc = (0x23<<0) ; ADCB Channel 3
                                 .equ DMA_CH_TRIGSRC_ADCB_CH4_gc = (0x24<<0) ; ADCB Channel 0,1,2,3 combined
                                 .equ DMA_CH_TRIGSRC_DACB_CH0_gc = (0x25<<0) ; DACB Channel 0
                                 .equ DMA_CH_TRIGSRC_DACB_CH1_gc = (0x26<<0) ; DACB Channel 1
                                 .equ DMA_CH_TRIGSRC_TCC0_OVF_gc = (0x40<<0) ; Timer/Counter C0 Overflow
                                 .equ DMA_CH_TRIGSRC_TCC0_ERR_gc = (0x41<<0) ; Timer/Counter C0 Error
                                 .equ DMA_CH_TRIGSRC_TCC0_CCA_gc = (0x42<<0) ; Timer/Counter C0 Compare or Capture A
                                 .equ DMA_CH_TRIGSRC_TCC0_CCB_gc = (0x43<<0) ; Timer/Counter C0 Compare or Capture B
                                 .equ DMA_CH_TRIGSRC_TCC0_CCC_gc = (0x44<<0) ; Timer/Counter C0 Compare or Capture C
                                 .equ DMA_CH_TRIGSRC_TCC0_CCD_gc = (0x45<<0) ; Timer/Counter C0 Compare or Capture D
                                 .equ DMA_CH_TRIGSRC_TCC1_OVF_gc = (0x46<<0) ; Timer/Counter C1 Overflow
                                 .equ DMA_CH_TRIGSRC_TCC1_ERR_gc = (0x47<<0) ; Timer/Counter C1 Error
                                 .equ DMA_CH_TRIGSRC_TCC1_CCA_gc = (0x48<<0) ; Timer/Counter C1 Compare or Capture A
                                 .equ DMA_CH_TRIGSRC_TCC1_CCB_gc = (0x49<<0) ; Timer/Counter C1 Compare or Capture B
                                 .equ DMA_CH_TRIGSRC_SPIC_gc = (0x4A<<0) ; SPI C Transfer Complete
                                 .equ DMA_CH_TRIGSRC_USARTC0_RXC_gc = (0x4B<<0) ; USART C0 Receive Complete
                                 .equ DMA_CH_TRIGSRC_USARTC0_DRE_gc = (0x4C<<0) ; USART C0 Data Register Empty
                                 .equ DMA_CH_TRIGSRC_USARTC1_RXC_gc = (0x4E<<0) ; USART C1 Receive Complete
                                 .equ DMA_CH_TRIGSRC_USARTC1_DRE_gc = (0x4F<<0) ; USART C1 Data Register Empty
                                 .equ DMA_CH_TRIGSRC_TCD0_OVF_gc = (0x60<<0) ; Timer/Counter D0 Overflow
                                 .equ DMA_CH_TRIGSRC_TCD0_ERR_gc = (0x61<<0) ; Timer/Counter D0 Error
                                 .equ DMA_CH_TRIGSRC_TCD0_CCA_gc = (0x62<<0) ; Timer/Counter D0 Compare or Capture A
                                 .equ DMA_CH_TRIGSRC_TCD0_CCB_gc = (0x63<<0) ; Timer/Counter D0 Compare or Capture B
                                 .equ DMA_CH_TRIGSRC_TCD0_CCC_gc = (0x64<<0) ; Timer/Counter D0 Compare or Capture C
                                 .equ DMA_CH_TRIGSRC_TCD0_CCD_gc = (0x65<<0) ; Timer/Counter D0 Compare or Capture D
                                 .equ DMA_CH_TRIGSRC_TCD1_OVF_gc = (0x66<<0) ; Timer/Counter D1 Overflow
                                 .equ DMA_CH_TRIGSRC_TCD1_ERR_gc = (0x67<<0) ; Timer/Counter D1 Error
                                 .equ DMA_CH_TRIGSRC_TCD1_CCA_gc = (0x68<<0) ; Timer/Counter D1 Compare or Capture A
                                 .equ DMA_CH_TRIGSRC_TCD1_CCB_gc = (0x69<<0) ; Timer/Counter D1 Compare or Capture B
                                 .equ DMA_CH_TRIGSRC_SPID_gc = (0x6A<<0) ; SPI D Transfer Complete
                                 .equ DMA_CH_TRIGSRC_USARTD0_RXC_gc = (0x6B<<0) ; USART D0 Receive Complete
                                 .equ DMA_CH_TRIGSRC_USARTD0_DRE_gc = (0x6C<<0) ; USART D0 Data Register Empty
                                 .equ DMA_CH_TRIGSRC_USARTD1_RXC_gc = (0x6E<<0) ; USART D1 Receive Complete
                                 .equ DMA_CH_TRIGSRC_USARTD1_DRE_gc = (0x6F<<0) ; USART D1 Data Register Empty
                                 .equ DMA_CH_TRIGSRC_TCE0_OVF_gc = (0x80<<0) ; Timer/Counter E0 Overflow
                                 .equ DMA_CH_TRIGSRC_TCE0_ERR_gc = (0x81<<0) ; Timer/Counter E0 Error
                                 .equ DMA_CH_TRIGSRC_TCE0_CCA_gc = (0x82<<0) ; Timer/Counter E0 Compare or Capture A
                                 .equ DMA_CH_TRIGSRC_TCE0_CCB_gc = (0x83<<0) ; Timer/Counter E0 Compare or Capture B
                                 .equ DMA_CH_TRIGSRC_TCE0_CCC_gc = (0x84<<0) ; Timer/Counter E0 Compare or Capture C
                                 .equ DMA_CH_TRIGSRC_TCE0_CCD_gc = (0x85<<0) ; Timer/Counter E0 Compare or Capture D
                                 .equ DMA_CH_TRIGSRC_TCE1_OVF_gc = (0x86<<0) ; Timer/Counter E1 Overflow
                                 .equ DMA_CH_TRIGSRC_TCE1_ERR_gc = (0x87<<0) ; Timer/Counter E1 Error
                                 .equ DMA_CH_TRIGSRC_TCE1_CCA_gc = (0x88<<0) ; Timer/Counter E1 Compare or Capture A
                                 .equ DMA_CH_TRIGSRC_TCE1_CCB_gc = (0x89<<0) ; Timer/Counter E1 Compare or Capture B
                                 .equ DMA_CH_TRIGSRC_SPIE_gc = (0x8A<<0) ; SPI E Transfer Complete
                                 .equ DMA_CH_TRIGSRC_USARTE0_RXC_gc = (0x8B<<0) ; USART E0 Receive Complete
                                 .equ DMA_CH_TRIGSRC_USARTE0_DRE_gc = (0x8C<<0) ; USART E0 Data Register Empty
                                 .equ DMA_CH_TRIGSRC_USARTE1_RXC_gc = (0x8E<<0) ; USART E1 Receive Complete
                                 .equ DMA_CH_TRIGSRC_USARTE1_DRE_gc = (0x8F<<0) ; USART E1 Data Register Empty
                                 .equ DMA_CH_TRIGSRC_TCF0_OVF_gc = (0xA0<<0) ; Timer/Counter F0 Overflow
                                 .equ DMA_CH_TRIGSRC_TCF0_ERR_gc = (0xA1<<0) ; Timer/Counter F0 Error
                                 .equ DMA_CH_TRIGSRC_TCF0_CCA_gc = (0xA2<<0) ; Timer/Counter F0 Compare or Capture A
                                 .equ DMA_CH_TRIGSRC_TCF0_CCB_gc = (0xA3<<0) ; Timer/Counter F0 Compare or Capture B
                                 .equ DMA_CH_TRIGSRC_TCF0_CCC_gc = (0xA4<<0) ; Timer/Counter F0 Compare or Capture C
                                 .equ DMA_CH_TRIGSRC_TCF0_CCD_gc = (0xA5<<0) ; Timer/Counter F0 Compare or Capture D
                                 .equ DMA_CH_TRIGSRC_TCF1_OVF_gc = (0xA6<<0) ; Timer/Counter F1 Overflow
                                 .equ DMA_CH_TRIGSRC_TCF1_ERR_gc = (0xA7<<0) ; Timer/Counter F1 Error
                                 .equ DMA_CH_TRIGSRC_TCF1_CCA_gc = (0xA8<<0) ; Timer/Counter F1 Compare or Capture A
                                 .equ DMA_CH_TRIGSRC_TCF1_CCB_gc = (0xA9<<0) ; Timer/Counter F1 Compare or Capture B
                                 .equ DMA_CH_TRIGSRC_SPIF_gc = (0xAA<<0) ; SPI F Transfer Complete
                                 .equ DMA_CH_TRIGSRC_USARTF0_RXC_gc = (0xAB<<0) ; USART F0 Receive Complete
                                 .equ DMA_CH_TRIGSRC_USARTF0_DRE_gc = (0xAC<<0) ; USART F0 Data Register Empty
                                 .equ DMA_CH_TRIGSRC_USARTF1_RXC_gc = (0xAE<<0) ; USART F1 Receive Complete
                                 .equ DMA_CH_TRIGSRC_USARTF1_DRE_gc = (0xAF<<0) ; USART F1 Data Register Empty
                                 
                                 ; Double buffering mode
                                 .equ DMA_DBUFMODE_DISABLED_gc = (0x00<<2) ; Double buffering disabled
                                 .equ DMA_DBUFMODE_CH01_gc = (0x01<<2) ; Double buffering enabled on channel 0/1
                                 .equ DMA_DBUFMODE_CH23_gc = (0x02<<2) ; Double buffering enabled on channel 2/3
                                 .equ DMA_DBUFMODE_CH01CH23_gc = (0x03<<2) ; Double buffering enabled on ch. 0/1 and ch. 2/3
                                 
                                 ; Priority mode
                                 .equ DMA_PRIMODE_RR0123_gc = (0x00<<0) ; Round Robin
                                 .equ DMA_PRIMODE_CH0RR123_gc = (0x01<<0) ; Channel 0 > Round Robin on channel 1/2/3
                                 .equ DMA_PRIMODE_CH01RR23_gc = (0x02<<0) ; Channel 0 > channel 1 > Round Robin on channel 2/3
                                 .equ DMA_PRIMODE_CH0123_gc = (0x03<<0) ; Channel 0 > channel 1 > channel 2 > channel 3
                                 
                                 ; Interrupt level
                                 .equ DMA_CH_ERRINTLVL_OFF_gc = (0x00<<2) ; Interrupt disabled
                                 .equ DMA_CH_ERRINTLVL_LO_gc = (0x01<<2) ; Low level
                                 .equ DMA_CH_ERRINTLVL_MED_gc = (0x02<<2) ; Medium level
                                 .equ DMA_CH_ERRINTLVL_HI_gc = (0x03<<2) ; High level
                                 
                                 ; Interrupt level
                                 .equ DMA_CH_TRNINTLVL_OFF_gc = (0x00<<0) ; Interrupt disabled
                                 .equ DMA_CH_TRNINTLVL_LO_gc = (0x01<<0) ; Low level
                                 .equ DMA_CH_TRNINTLVL_MED_gc = (0x02<<0) ; Medium level
                                 .equ DMA_CH_TRNINTLVL_HI_gc = (0x03<<0) ; High level
                                 
                                 
                                 ;***************************************************************************
                                 ;** EVSYS - Event System
                                 ;***************************************************************************/
                                 
                                 ; EVSYS_CH0MUX masks
                                 .equ EVSYS_CHMUX_gm = 0xFF ; Event Channel 0 Multiplexer group mask
                                 .equ EVSYS_CHMUX_gp = 0 ; Event Channel 0 Multiplexer group position
                                 .equ EVSYS_CHMUX0_bm = (1<<0) ; Event Channel 0 Multiplexer bit 0 mask
                                 .equ EVSYS_CHMUX0_bp = 0 ; Event Channel 0 Multiplexer bit 0 position
                                 .equ EVSYS_CHMUX1_bm = (1<<1) ; Event Channel 0 Multiplexer bit 1 mask
                                 .equ EVSYS_CHMUX1_bp = 1 ; Event Channel 0 Multiplexer bit 1 position
                                 .equ EVSYS_CHMUX2_bm = (1<<2) ; Event Channel 0 Multiplexer bit 2 mask
                                 .equ EVSYS_CHMUX2_bp = 2 ; Event Channel 0 Multiplexer bit 2 position
                                 .equ EVSYS_CHMUX3_bm = (1<<3) ; Event Channel 0 Multiplexer bit 3 mask
                                 .equ EVSYS_CHMUX3_bp = 3 ; Event Channel 0 Multiplexer bit 3 position
                                 .equ EVSYS_CHMUX4_bm = (1<<4) ; Event Channel 0 Multiplexer bit 4 mask
                                 .equ EVSYS_CHMUX4_bp = 4 ; Event Channel 0 Multiplexer bit 4 position
                                 .equ EVSYS_CHMUX5_bm = (1<<5) ; Event Channel 0 Multiplexer bit 5 mask
                                 .equ EVSYS_CHMUX5_bp = 5 ; Event Channel 0 Multiplexer bit 5 position
                                 .equ EVSYS_CHMUX6_bm = (1<<6) ; Event Channel 0 Multiplexer bit 6 mask
                                 .equ EVSYS_CHMUX6_bp = 6 ; Event Channel 0 Multiplexer bit 6 position
                                 .equ EVSYS_CHMUX7_bm = (1<<7) ; Event Channel 0 Multiplexer bit 7 mask
                                 .equ EVSYS_CHMUX7_bp = 7 ; Event Channel 0 Multiplexer bit 7 position
                                 
                                 ; EVSYS_CH1MUX masks
                                 ; Masks for CHMUX aready defined
                                 
                                 ; EVSYS_CH2MUX masks
                                 ; Masks for CHMUX aready defined
                                 
                                 ; EVSYS_CH3MUX masks
                                 ; Masks for CHMUX aready defined
                                 
                                 ; EVSYS_CH4MUX masks
                                 ; Masks for CHMUX aready defined
                                 
                                 ; EVSYS_CH5MUX masks
                                 ; Masks for CHMUX aready defined
                                 
                                 ; EVSYS_CH6MUX masks
                                 ; Masks for CHMUX aready defined
                                 
                                 ; EVSYS_CH7MUX masks
                                 ; Masks for CHMUX aready defined
                                 
                                 ; EVSYS_CH0CTRL masks
                                 .equ EVSYS_QDIRM_gm = 0x60 ; Quadrature Decoder Index Recognition Mode group mask
                                 .equ EVSYS_QDIRM_gp = 5 ; Quadrature Decoder Index Recognition Mode group position
                                 .equ EVSYS_QDIRM0_bm = (1<<5) ; Quadrature Decoder Index Recognition Mode bit 0 mask
                                 .equ EVSYS_QDIRM0_bp = 5 ; Quadrature Decoder Index Recognition Mode bit 0 position
                                 .equ EVSYS_QDIRM1_bm = (1<<6) ; Quadrature Decoder Index Recognition Mode bit 1 mask
                                 .equ EVSYS_QDIRM1_bp = 6 ; Quadrature Decoder Index Recognition Mode bit 1 position
                                 .equ EVSYS_QDIEN_bm = 0x10 ; Quadrature Decoder Index Enable bit mask
                                 .equ EVSYS_QDIEN_bp = 4 ; Quadrature Decoder Index Enable bit position
                                 .equ EVSYS_QDEN_bm = 0x08 ; Quadrature Decoder Enable bit mask
                                 .equ EVSYS_QDEN_bp = 3 ; Quadrature Decoder Enable bit position
                                 .equ EVSYS_DIGFILT_gm = 0x07 ; Digital Filter group mask
                                 .equ EVSYS_DIGFILT_gp = 0 ; Digital Filter group position
                                 .equ EVSYS_DIGFILT0_bm = (1<<0) ; Digital Filter bit 0 mask
                                 .equ EVSYS_DIGFILT0_bp = 0 ; Digital Filter bit 0 position
                                 .equ EVSYS_DIGFILT1_bm = (1<<1) ; Digital Filter bit 1 mask
                                 .equ EVSYS_DIGFILT1_bp = 1 ; Digital Filter bit 1 position
                                 .equ EVSYS_DIGFILT2_bm = (1<<2) ; Digital Filter bit 2 mask
                                 .equ EVSYS_DIGFILT2_bp = 2 ; Digital Filter bit 2 position
                                 
                                 ; EVSYS_CH1CTRL masks
                                 ; Masks for DIGFILT aready defined
                                 
                                 ; EVSYS_CH2CTRL masks
                                 ; Masks for QDIRM aready defined
                                 ; Masks for QDIEN aready defined
                                 ; Masks for QDEN aready defined
                                 ; Masks for DIGFILT aready defined
                                 
                                 ; EVSYS_CH3CTRL masks
                                 ; Masks for DIGFILT aready defined
                                 
                                 ; EVSYS_CH4CTRL masks
                                 ; Masks for QDIRM aready defined
                                 ; Masks for QDIEN aready defined
                                 ; Masks for QDEN aready defined
                                 ; Masks for DIGFILT aready defined
                                 
                                 ; EVSYS_CH5CTRL masks
                                 ; Masks for DIGFILT aready defined
                                 
                                 ; EVSYS_CH6CTRL masks
                                 ; Masks for DIGFILT aready defined
                                 
                                 ; EVSYS_CH7CTRL masks
                                 ; Masks for DIGFILT aready defined
                                  
                                 ; Quadrature Decoder Index Recognition Mode
                                 .equ EVSYS_QDIRM_00_gc = (0x00<<5) ; QDPH0 = 0, QDPH90 = 0
                                 .equ EVSYS_QDIRM_01_gc = (0x01<<5) ; QDPH0 = 0, QDPH90 = 1
                                 .equ EVSYS_QDIRM_10_gc = (0x02<<5) ; QDPH0 = 1, QDPH90 = 0
                                 .equ EVSYS_QDIRM_11_gc = (0x03<<5) ; QDPH0 = 1, QDPH90 = 1
                                 
                                 ; Digital filter coefficient
                                 .equ EVSYS_DIGFILT_1SAMPLE_gc = (0x00<<0) ; 1 SAMPLE
                                 .equ EVSYS_DIGFILT_2SAMPLES_gc = (0x01<<0) ; 2 SAMPLES
                                 .equ EVSYS_DIGFILT_3SAMPLES_gc = (0x02<<0) ; 3 SAMPLES
                                 .equ EVSYS_DIGFILT_4SAMPLES_gc = (0x03<<0) ; 4 SAMPLES
                                 .equ EVSYS_DIGFILT_5SAMPLES_gc = (0x04<<0) ; 5 SAMPLES
                                 .equ EVSYS_DIGFILT_6SAMPLES_gc = (0x05<<0) ; 6 SAMPLES
                                 .equ EVSYS_DIGFILT_7SAMPLES_gc = (0x06<<0) ; 7 SAMPLES
                                 .equ EVSYS_DIGFILT_8SAMPLES_gc = (0x07<<0) ; 8 SAMPLES
                                 
                                 ; Event Channel multiplexer input selection
                                 .equ EVSYS_CHMUX_OFF_gc = (0x00<<0) ; Off
                                 .equ EVSYS_CHMUX_RTC_OVF_gc = (0x08<<0) ; RTC Overflow
                                 .equ EVSYS_CHMUX_RTC_CMP_gc = (0x09<<0) ; RTC Compare Match
                                 .equ EVSYS_CHMUX_USB_gc = (0x0A<<0) ; USB Setup, SOF, CRC error and UNF/OVF
                                 .equ EVSYS_CHMUX_ACA_CH0_gc = (0x10<<0) ; Analog Comparator A Channel 0
                                 .equ EVSYS_CHMUX_ACA_CH1_gc = (0x11<<0) ; Analog Comparator A Channel 1
                                 .equ EVSYS_CHMUX_ACA_WIN_gc = (0x12<<0) ; Analog Comparator A Window
                                 .equ EVSYS_CHMUX_ACB_CH0_gc = (0x13<<0) ; Analog Comparator B Channel 0
                                 .equ EVSYS_CHMUX_ACB_CH1_gc = (0x14<<0) ; Analog Comparator B Channel 1
                                 .equ EVSYS_CHMUX_ACB_WIN_gc = (0x15<<0) ; Analog Comparator B Window
                                 .equ EVSYS_CHMUX_ADCA_CH0_gc = (0x20<<0) ; ADC A Channel 0
                                 .equ EVSYS_CHMUX_ADCA_CH1_gc = (0x21<<0) ; ADC A Channel 1
                                 .equ EVSYS_CHMUX_ADCA_CH2_gc = (0x22<<0) ; ADC A Channel 2
                                 .equ EVSYS_CHMUX_ADCA_CH3_gc = (0x23<<0) ; ADC A Channel 3
                                 .equ EVSYS_CHMUX_ADCB_CH0_gc = (0x24<<0) ; ADC B Channel 0
                                 .equ EVSYS_CHMUX_ADCB_CH1_gc = (0x25<<0) ; ADC B Channel 1
                                 .equ EVSYS_CHMUX_ADCB_CH2_gc = (0x26<<0) ; ADC B Channel 2
                                 .equ EVSYS_CHMUX_ADCB_CH3_gc = (0x27<<0) ; ADC B Channel 3
                                 .equ EVSYS_CHMUX_PORTA_PIN0_gc = (0x50<<0) ; Port A, Pin0
                                 .equ EVSYS_CHMUX_PORTA_PIN1_gc = (0x51<<0) ; Port A, Pin1
                                 .equ EVSYS_CHMUX_PORTA_PIN2_gc = (0x52<<0) ; Port A, Pin2
                                 .equ EVSYS_CHMUX_PORTA_PIN3_gc = (0x53<<0) ; Port A, Pin3
                                 .equ EVSYS_CHMUX_PORTA_PIN4_gc = (0x54<<0) ; Port A, Pin4
                                 .equ EVSYS_CHMUX_PORTA_PIN5_gc = (0x55<<0) ; Port A, Pin5
                                 .equ EVSYS_CHMUX_PORTA_PIN6_gc = (0x56<<0) ; Port A, Pin6
                                 .equ EVSYS_CHMUX_PORTA_PIN7_gc = (0x57<<0) ; Port A, Pin7
                                 .equ EVSYS_CHMUX_PORTB_PIN0_gc = (0x58<<0) ; Port B, Pin0
                                 .equ EVSYS_CHMUX_PORTB_PIN1_gc = (0x59<<0) ; Port B, Pin1
                                 .equ EVSYS_CHMUX_PORTB_PIN2_gc = (0x5A<<0) ; Port B, Pin2
                                 .equ EVSYS_CHMUX_PORTB_PIN3_gc = (0x5B<<0) ; Port B, Pin3
                                 .equ EVSYS_CHMUX_PORTB_PIN4_gc = (0x5C<<0) ; Port B, Pin4
                                 .equ EVSYS_CHMUX_PORTB_PIN5_gc = (0x5D<<0) ; Port B, Pin5
                                 .equ EVSYS_CHMUX_PORTB_PIN6_gc = (0x5E<<0) ; Port B, Pin6
                                 .equ EVSYS_CHMUX_PORTB_PIN7_gc = (0x5F<<0) ; Port B, Pin7
                                 .equ EVSYS_CHMUX_PORTC_PIN0_gc = (0x60<<0) ; Port C, Pin0
                                 .equ EVSYS_CHMUX_PORTC_PIN1_gc = (0x61<<0) ; Port C, Pin1
                                 .equ EVSYS_CHMUX_PORTC_PIN2_gc = (0x62<<0) ; Port C, Pin2
                                 .equ EVSYS_CHMUX_PORTC_PIN3_gc = (0x63<<0) ; Port C, Pin3
                                 .equ EVSYS_CHMUX_PORTC_PIN4_gc = (0x64<<0) ; Port C, Pin4
                                 .equ EVSYS_CHMUX_PORTC_PIN5_gc = (0x65<<0) ; Port C, Pin5
                                 .equ EVSYS_CHMUX_PORTC_PIN6_gc = (0x66<<0) ; Port C, Pin6
                                 .equ EVSYS_CHMUX_PORTC_PIN7_gc = (0x67<<0) ; Port C, Pin7
                                 .equ EVSYS_CHMUX_PORTD_PIN0_gc = (0x68<<0) ; Port D, Pin0
                                 .equ EVSYS_CHMUX_PORTD_PIN1_gc = (0x69<<0) ; Port D, Pin1
                                 .equ EVSYS_CHMUX_PORTD_PIN2_gc = (0x6A<<0) ; Port D, Pin2
                                 .equ EVSYS_CHMUX_PORTD_PIN3_gc = (0x6B<<0) ; Port D, Pin3
                                 .equ EVSYS_CHMUX_PORTD_PIN4_gc = (0x6C<<0) ; Port D, Pin4
                                 .equ EVSYS_CHMUX_PORTD_PIN5_gc = (0x6D<<0) ; Port D, Pin5
                                 .equ EVSYS_CHMUX_PORTD_PIN6_gc = (0x6E<<0) ; Port D, Pin6
                                 .equ EVSYS_CHMUX_PORTD_PIN7_gc = (0x6F<<0) ; Port D, Pin7
                                 .equ EVSYS_CHMUX_PORTE_PIN0_gc = (0x70<<0) ; Port E, Pin0
                                 .equ EVSYS_CHMUX_PORTE_PIN1_gc = (0x71<<0) ; Port E, Pin1
                                 .equ EVSYS_CHMUX_PORTE_PIN2_gc = (0x72<<0) ; Port E, Pin2
                                 .equ EVSYS_CHMUX_PORTE_PIN3_gc = (0x73<<0) ; Port E, Pin3
                                 .equ EVSYS_CHMUX_PORTE_PIN4_gc = (0x74<<0) ; Port E, Pin4
                                 .equ EVSYS_CHMUX_PORTE_PIN5_gc = (0x75<<0) ; Port E, Pin5
                                 .equ EVSYS_CHMUX_PORTE_PIN6_gc = (0x76<<0) ; Port E, Pin6
                                 .equ EVSYS_CHMUX_PORTE_PIN7_gc = (0x77<<0) ; Port E, Pin7
                                 .equ EVSYS_CHMUX_PORTF_PIN0_gc = (0x78<<0) ; Port F, Pin0
                                 .equ EVSYS_CHMUX_PORTF_PIN1_gc = (0x79<<0) ; Port F, Pin1
                                 .equ EVSYS_CHMUX_PORTF_PIN2_gc = (0x7A<<0) ; Port F, Pin2
                                 .equ EVSYS_CHMUX_PORTF_PIN3_gc = (0x7B<<0) ; Port F, Pin3
                                 .equ EVSYS_CHMUX_PORTF_PIN4_gc = (0x7C<<0) ; Port F, Pin4
                                 .equ EVSYS_CHMUX_PORTF_PIN5_gc = (0x7D<<0) ; Port F, Pin5
                                 .equ EVSYS_CHMUX_PORTF_PIN6_gc = (0x7E<<0) ; Port F, Pin6
                                 .equ EVSYS_CHMUX_PORTF_PIN7_gc = (0x7F<<0) ; Port F, Pin7
                                 .equ EVSYS_CHMUX_PRESCALER_1_gc = (0x80<<0) ; Prescaler, divide by 1
                                 .equ EVSYS_CHMUX_PRESCALER_2_gc = (0x81<<0) ; Prescaler, divide by 2
                                 .equ EVSYS_CHMUX_PRESCALER_4_gc = (0x82<<0) ; Prescaler, divide by 4
                                 .equ EVSYS_CHMUX_PRESCALER_8_gc = (0x83<<0) ; Prescaler, divide by 8
                                 .equ EVSYS_CHMUX_PRESCALER_16_gc = (0x84<<0) ; Prescaler, divide by 16
                                 .equ EVSYS_CHMUX_PRESCALER_32_gc = (0x85<<0) ; Prescaler, divide by 32
                                 .equ EVSYS_CHMUX_PRESCALER_64_gc = (0x86<<0) ; Prescaler, divide by 64
                                 .equ EVSYS_CHMUX_PRESCALER_128_gc = (0x87<<0) ; Prescaler, divide by 128
                                 .equ EVSYS_CHMUX_PRESCALER_256_gc = (0x88<<0) ; Prescaler, divide by 256
                                 .equ EVSYS_CHMUX_PRESCALER_512_gc = (0x89<<0) ; Prescaler, divide by 512
                                 .equ EVSYS_CHMUX_PRESCALER_1024_gc = (0x8A<<0) ; Prescaler, divide by 1024
                                 .equ EVSYS_CHMUX_PRESCALER_2048_gc = (0x8B<<0) ; Prescaler, divide by 2048
                                 .equ EVSYS_CHMUX_PRESCALER_4096_gc = (0x8C<<0) ; Prescaler, divide by 4096
                                 .equ EVSYS_CHMUX_PRESCALER_8192_gc = (0x8D<<0) ; Prescaler, divide by 8192
                                 .equ EVSYS_CHMUX_PRESCALER_16384_gc = (0x8E<<0) ; Prescaler, divide by 16384
                                 .equ EVSYS_CHMUX_PRESCALER_32768_gc = (0x8F<<0) ; Prescaler, divide by 32768
                                 .equ EVSYS_CHMUX_TCC0_OVF_gc = (0xC0<<0) ; Timer/Counter C0 Overflow
                                 .equ EVSYS_CHMUX_TCC0_ERR_gc = (0xC1<<0) ; Timer/Counter C0 Error
                                 .equ EVSYS_CHMUX_TCC0_CCA_gc = (0xC4<<0) ; Timer/Counter C0 Compare or Capture A
                                 .equ EVSYS_CHMUX_TCC0_CCB_gc = (0xC5<<0) ; Timer/Counter C0 Compare or Capture B
                                 .equ EVSYS_CHMUX_TCC0_CCC_gc = (0xC6<<0) ; Timer/Counter C0 Compare or Capture C
                                 .equ EVSYS_CHMUX_TCC0_CCD_gc = (0xC7<<0) ; Timer/Counter C0 Compare or Capture D
                                 .equ EVSYS_CHMUX_TCC1_OVF_gc = (0xC8<<0) ; Timer/Counter C1 Overflow
                                 .equ EVSYS_CHMUX_TCC1_ERR_gc = (0xC9<<0) ; Timer/Counter C1 Error
                                 .equ EVSYS_CHMUX_TCC1_CCA_gc = (0xCC<<0) ; Timer/Counter C1 Compare or Capture A
                                 .equ EVSYS_CHMUX_TCC1_CCB_gc = (0xCD<<0) ; Timer/Counter C1 Compare or Capture B
                                 .equ EVSYS_CHMUX_TCD0_OVF_gc = (0xD0<<0) ; Timer/Counter D0 Overflow
                                 .equ EVSYS_CHMUX_TCD0_ERR_gc = (0xD1<<0) ; Timer/Counter D0 Error
                                 .equ EVSYS_CHMUX_TCD0_CCA_gc = (0xD4<<0) ; Timer/Counter D0 Compare or Capture A
                                 .equ EVSYS_CHMUX_TCD0_CCB_gc = (0xD5<<0) ; Timer/Counter D0 Compare or Capture B
                                 .equ EVSYS_CHMUX_TCD0_CCC_gc = (0xD6<<0) ; Timer/Counter D0 Compare or Capture C
                                 .equ EVSYS_CHMUX_TCD0_CCD_gc = (0xD7<<0) ; Timer/Counter D0 Compare or Capture D
                                 .equ EVSYS_CHMUX_TCD1_OVF_gc = (0xD8<<0) ; Timer/Counter D1 Overflow
                                 .equ EVSYS_CHMUX_TCD1_ERR_gc = (0xD9<<0) ; Timer/Counter D1 Error
                                 .equ EVSYS_CHMUX_TCD1_CCA_gc = (0xDC<<0) ; Timer/Counter D1 Compare or Capture A
                                 .equ EVSYS_CHMUX_TCD1_CCB_gc = (0xDD<<0) ; Timer/Counter D1 Compare or Capture B
                                 .equ EVSYS_CHMUX_TCE0_OVF_gc = (0xE0<<0) ; Timer/Counter E0 Overflow
                                 .equ EVSYS_CHMUX_TCE0_ERR_gc = (0xE1<<0) ; Timer/Counter E0 Error
                                 .equ EVSYS_CHMUX_TCE0_CCA_gc = (0xE4<<0) ; Timer/Counter E0 Compare or Capture A
                                 .equ EVSYS_CHMUX_TCE0_CCB_gc = (0xE5<<0) ; Timer/Counter E0 Compare or Capture B
                                 .equ EVSYS_CHMUX_TCE0_CCC_gc = (0xE6<<0) ; Timer/Counter E0 Compare or Capture C
                                 .equ EVSYS_CHMUX_TCE0_CCD_gc = (0xE7<<0) ; Timer/Counter E0 Compare or Capture D
                                 .equ EVSYS_CHMUX_TCE1_OVF_gc = (0xE8<<0) ; Timer/Counter E1 Overflow
                                 .equ EVSYS_CHMUX_TCE1_ERR_gc = (0xE9<<0) ; Timer/Counter E1 Error
                                 .equ EVSYS_CHMUX_TCE1_CCA_gc = (0xEC<<0) ; Timer/Counter E1 Compare or Capture A
                                 .equ EVSYS_CHMUX_TCE1_CCB_gc = (0xED<<0) ; Timer/Counter E1 Compare or Capture B
                                 .equ EVSYS_CHMUX_TCF0_OVF_gc = (0xF0<<0) ; Timer/Counter F0 Overflow
                                 .equ EVSYS_CHMUX_TCF0_ERR_gc = (0xF1<<0) ; Timer/Counter F0 Error
                                 .equ EVSYS_CHMUX_TCF0_CCA_gc = (0xF4<<0) ; Timer/Counter F0 Compare or Capture A
                                 .equ EVSYS_CHMUX_TCF0_CCB_gc = (0xF5<<0) ; Timer/Counter F0 Compare or Capture B
                                 .equ EVSYS_CHMUX_TCF0_CCC_gc = (0xF6<<0) ; Timer/Counter F0 Compare or Capture C
                                 .equ EVSYS_CHMUX_TCF0_CCD_gc = (0xF7<<0) ; Timer/Counter F0 Compare or Capture D
                                 .equ EVSYS_CHMUX_TCF1_OVF_gc = (0xF8<<0) ; Timer/Counter F1 Overflow
                                 .equ EVSYS_CHMUX_TCF1_ERR_gc = (0xF9<<0) ; Timer/Counter F1 Error
                                 .equ EVSYS_CHMUX_TCF1_CCA_gc = (0xFC<<0) ; Timer/Counter F1 Compare or Capture A
                                 .equ EVSYS_CHMUX_TCF1_CCB_gc = (0xFD<<0) ; Timer/Counter F1 Compare or Capture B
                                 
                                 
                                 ;***************************************************************************
                                 ;** NVM - Non Volatile Memory Controller
                                 ;***************************************************************************/
                                 
                                 ; NVM_CMD masks
                                 .equ NVM_CMD_gm = 0x7F ; Command group mask
                                 .equ NVM_CMD_gp = 0 ; Command group position
                                 .equ NVM_CMD0_bm = (1<<0) ; Command bit 0 mask
                                 .equ NVM_CMD0_bp = 0 ; Command bit 0 position
                                 .equ NVM_CMD1_bm = (1<<1) ; Command bit 1 mask
                                 .equ NVM_CMD1_bp = 1 ; Command bit 1 position
                                 .equ NVM_CMD2_bm = (1<<2) ; Command bit 2 mask
                                 .equ NVM_CMD2_bp = 2 ; Command bit 2 position
                                 .equ NVM_CMD3_bm = (1<<3) ; Command bit 3 mask
                                 .equ NVM_CMD3_bp = 3 ; Command bit 3 position
                                 .equ NVM_CMD4_bm = (1<<4) ; Command bit 4 mask
                                 .equ NVM_CMD4_bp = 4 ; Command bit 4 position
                                 .equ NVM_CMD5_bm = (1<<5) ; Command bit 5 mask
                                 .equ NVM_CMD5_bp = 5 ; Command bit 5 position
                                 .equ NVM_CMD6_bm = (1<<6) ; Command bit 6 mask
                                 .equ NVM_CMD6_bp = 6 ; Command bit 6 position
                                 
                                 ; NVM_CTRLA masks
                                 .equ NVM_CMDEX_bm = 0x01 ; Command Execute bit mask
                                 .equ NVM_CMDEX_bp = 0 ; Command Execute bit position
                                 
                                 ; NVM_CTRLB masks
                                 .equ NVM_EEMAPEN_bm = 0x08 ; EEPROM Mapping Enable bit mask
                                 .equ NVM_EEMAPEN_bp = 3 ; EEPROM Mapping Enable bit position
                                 .equ NVM_FPRM_bm = 0x04 ; Flash Power Reduction Enable bit mask
                                 .equ NVM_FPRM_bp = 2 ; Flash Power Reduction Enable bit position
                                 .equ NVM_EPRM_bm = 0x02 ; EEPROM Power Reduction Enable bit mask
                                 .equ NVM_EPRM_bp = 1 ; EEPROM Power Reduction Enable bit position
                                 .equ NVM_SPMLOCK_bm = 0x01 ; SPM Lock bit mask
                                 .equ NVM_SPMLOCK_bp = 0 ; SPM Lock bit position
                                 
                                 ; NVM_INTCTRL masks
                                 .equ NVM_SPMLVL_gm = 0x0C ; SPM Interrupt Level group mask
                                 .equ NVM_SPMLVL_gp = 2 ; SPM Interrupt Level group position
                                 .equ NVM_SPMLVL0_bm = (1<<2) ; SPM Interrupt Level bit 0 mask
                                 .equ NVM_SPMLVL0_bp = 2 ; SPM Interrupt Level bit 0 position
                                 .equ NVM_SPMLVL1_bm = (1<<3) ; SPM Interrupt Level bit 1 mask
                                 .equ NVM_SPMLVL1_bp = 3 ; SPM Interrupt Level bit 1 position
                                 .equ NVM_EELVL_gm = 0x03 ; EEPROM Interrupt Level group mask
                                 .equ NVM_EELVL_gp = 0 ; EEPROM Interrupt Level group position
                                 .equ NVM_EELVL0_bm = (1<<0) ; EEPROM Interrupt Level bit 0 mask
                                 .equ NVM_EELVL0_bp = 0 ; EEPROM Interrupt Level bit 0 position
                                 .equ NVM_EELVL1_bm = (1<<1) ; EEPROM Interrupt Level bit 1 mask
                                 .equ NVM_EELVL1_bp = 1 ; EEPROM Interrupt Level bit 1 position
                                 
                                 ; NVM_STATUS masks
                                 .equ NVM_NVMBUSY_bm = 0x80 ; Non-volatile Memory Busy bit mask
                                 .equ NVM_NVMBUSY_bp = 7 ; Non-volatile Memory Busy bit position
                                 .equ NVM_FBUSY_bm = 0x40 ; Flash Memory Busy bit mask
                                 .equ NVM_FBUSY_bp = 6 ; Flash Memory Busy bit position
                                 .equ NVM_EELOAD_bm = 0x02 ; EEPROM Page Buffer Active Loading bit mask
                                 .equ NVM_EELOAD_bp = 1 ; EEPROM Page Buffer Active Loading bit position
                                 .equ NVM_FLOAD_bm = 0x01 ; Flash Page Buffer Active Loading bit mask
                                 .equ NVM_FLOAD_bp = 0 ; Flash Page Buffer Active Loading bit position
                                 
                                 ; NVM_LOCKBITS masks
                                 .equ NVM_BLBB_gm = 0xC0 ; Boot Lock Bits - Boot Section group mask
                                 .equ NVM_BLBB_gp = 6 ; Boot Lock Bits - Boot Section group position
                                 .equ NVM_BLBB0_bm = (1<<6) ; Boot Lock Bits - Boot Section bit 0 mask
                                 .equ NVM_BLBB0_bp = 6 ; Boot Lock Bits - Boot Section bit 0 position
                                 .equ NVM_BLBB1_bm = (1<<7) ; Boot Lock Bits - Boot Section bit 1 mask
                                 .equ NVM_BLBB1_bp = 7 ; Boot Lock Bits - Boot Section bit 1 position
                                 .equ NVM_BLBA_gm = 0x30 ; Boot Lock Bits - Application Section group mask
                                 .equ NVM_BLBA_gp = 4 ; Boot Lock Bits - Application Section group position
                                 .equ NVM_BLBA0_bm = (1<<4) ; Boot Lock Bits - Application Section bit 0 mask
                                 .equ NVM_BLBA0_bp = 4 ; Boot Lock Bits - Application Section bit 0 position
                                 .equ NVM_BLBA1_bm = (1<<5) ; Boot Lock Bits - Application Section bit 1 mask
                                 .equ NVM_BLBA1_bp = 5 ; Boot Lock Bits - Application Section bit 1 position
                                 .equ NVM_BLBAT_gm = 0x0C ; Boot Lock Bits - Application Table group mask
                                 .equ NVM_BLBAT_gp = 2 ; Boot Lock Bits - Application Table group position
                                 .equ NVM_BLBAT0_bm = (1<<2) ; Boot Lock Bits - Application Table bit 0 mask
                                 .equ NVM_BLBAT0_bp = 2 ; Boot Lock Bits - Application Table bit 0 position
                                 .equ NVM_BLBAT1_bm = (1<<3) ; Boot Lock Bits - Application Table bit 1 mask
                                 .equ NVM_BLBAT1_bp = 3 ; Boot Lock Bits - Application Table bit 1 position
                                 .equ NVM_LB_gm = 0x03 ; Lock Bits group mask
                                 .equ NVM_LB_gp = 0 ; Lock Bits group position
                                 .equ NVM_LB0_bm = (1<<0) ; Lock Bits bit 0 mask
                                 .equ NVM_LB0_bp = 0 ; Lock Bits bit 0 position
                                 .equ NVM_LB1_bm = (1<<1) ; Lock Bits bit 1 mask
                                 .equ NVM_LB1_bp = 1 ; Lock Bits bit 1 position
                                  
                                 ; NVM Command
                                 .equ NVM_CMD_NO_OPERATION_gc = (0x00<<0) ; Noop/Ordinary LPM
                                 .equ NVM_CMD_READ_USER_SIG_ROW_gc = (0x01<<0) ; Read user signature row
                                 .equ NVM_CMD_READ_CALIB_ROW_gc = (0x02<<0) ; Read calibration row
                                 .equ NVM_CMD_READ_EEPROM_gc = (0x06<<0) ; Read EEPROM
                                 .equ NVM_CMD_READ_FUSES_gc = (0x07<<0) ; Read fuse byte
                                 .equ NVM_CMD_WRITE_LOCK_BITS_gc = (0x08<<0) ; Write lock bits
                                 .equ NVM_CMD_ERASE_USER_SIG_ROW_gc = (0x18<<0) ; Erase user signature row
                                 .equ NVM_CMD_WRITE_USER_SIG_ROW_gc = (0x1A<<0) ; Write user signature row
                                 .equ NVM_CMD_ERASE_APP_gc = (0x20<<0) ; Erase Application Section
                                 .equ NVM_CMD_ERASE_APP_PAGE_gc = (0x22<<0) ; Erase Application Section page
                                 .equ NVM_CMD_LOAD_FLASH_BUFFER_gc = (0x23<<0) ; Load Flash page buffer
                                 .equ NVM_CMD_WRITE_APP_PAGE_gc = (0x24<<0) ; Write Application Section page
                                 .equ NVM_CMD_ERASE_WRITE_APP_PAGE_gc = (0x25<<0) ; Erase-and-write Application Section page
                                 .equ NVM_CMD_ERASE_FLASH_BUFFER_gc = (0x26<<0) ; Erase/flush Flash page buffer
                                 .equ NVM_CMD_ERASE_BOOT_PAGE_gc = (0x2A<<0) ; Erase Boot Section page
                                 .equ NVM_CMD_ERASE_FLASH_PAGE_gc = (0x2B<<0) ; Erase Flash Page
                                 .equ NVM_CMD_WRITE_BOOT_PAGE_gc = (0x2C<<0) ; Write Boot Section page
                                 .equ NVM_CMD_ERASE_WRITE_BOOT_PAGE_gc = (0x2D<<0) ; Erase-and-write Boot Section page
                                 .equ NVM_CMD_WRITE_FLASH_PAGE_gc = (0x2E<<0) ; Write Flash Page
                                 .equ NVM_CMD_ERASE_WRITE_FLASH_PAGE_gc = (0x2F<<0) ; Erase-and-write Flash Page
                                 .equ NVM_CMD_ERASE_EEPROM_gc = (0x30<<0) ; Erase EEPROM
                                 .equ NVM_CMD_ERASE_EEPROM_PAGE_gc = (0x32<<0) ; Erase EEPROM page
                                 .equ NVM_CMD_LOAD_EEPROM_BUFFER_gc = (0x33<<0) ; Load EEPROM page buffer
                                 .equ NVM_CMD_WRITE_EEPROM_PAGE_gc = (0x34<<0) ; Write EEPROM page
                                 .equ NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc = (0x35<<0) ; Erase-and-write EEPROM page
                                 .equ NVM_CMD_ERASE_EEPROM_BUFFER_gc = (0x36<<0) ; Erase/flush EEPROM page buffer
                                 .equ NVM_CMD_APP_CRC_gc = (0x38<<0) ; Application section CRC
                                 .equ NVM_CMD_BOOT_CRC_gc = (0x39<<0) ;  Boot Section CRC
                                 .equ NVM_CMD_FLASH_RANGE_CRC_gc = (0x3A<<0) ; Flash Range CRC
                                 .equ NVM_CMD_CHIP_ERASE_gc = (0x40<<0) ; Erase Chip
                                 .equ NVM_CMD_READ_NVM_gc = (0x43<<0) ; Read NVM
                                 .equ NVM_CMD_WRITE_FUSE_gc = (0x4C<<0) ; Write Fuse byte
                                 .equ NVM_CMD_ERASE_BOOT_gc = (0x68<<0) ; Erase Boot Section
                                 .equ NVM_CMD_FLASH_CRC_gc = (0x78<<0) ; Flash CRC
                                 
                                 ; SPM ready interrupt level
                                 .equ NVM_SPMLVL_OFF_gc = (0x00<<2) ; Interrupt disabled
                                 .equ NVM_SPMLVL_LO_gc = (0x01<<2) ; Low level
                                 .equ NVM_SPMLVL_MED_gc = (0x02<<2) ; Medium level
                                 .equ NVM_SPMLVL_HI_gc = (0x03<<2) ; High level
                                 
                                 ; EEPROM ready interrupt level
                                 .equ NVM_EELVL_OFF_gc = (0x00<<0) ; Interrupt disabled
                                 .equ NVM_EELVL_LO_gc = (0x01<<0) ; Low level
                                 .equ NVM_EELVL_MED_gc = (0x02<<0) ; Medium level
                                 .equ NVM_EELVL_HI_gc = (0x03<<0) ; High level
                                 
                                 ; Boot lock bits - boot section
                                 .equ NVM_BLBB_RWLOCK_gc = (0x00<<6) ; Read and write not allowed
                                 .equ NVM_BLBB_RLOCK_gc = (0x01<<6) ; Read not allowed
                                 .equ NVM_BLBB_WLOCK_gc = (0x02<<6) ; Write not allowed
                                 .equ NVM_BLBB_NOLOCK_gc = (0x03<<6) ; No locks
                                 
                                 ; Boot lock bits - application section
                                 .equ NVM_BLBA_RWLOCK_gc = (0x00<<4) ; Read and write not allowed
                                 .equ NVM_BLBA_RLOCK_gc = (0x01<<4) ; Read not allowed
                                 .equ NVM_BLBA_WLOCK_gc = (0x02<<4) ; Write not allowed
                                 .equ NVM_BLBA_NOLOCK_gc = (0x03<<4) ; No locks
                                 
                                 ; Boot lock bits - application table section
                                 .equ NVM_BLBAT_RWLOCK_gc = (0x00<<2) ; Read and write not allowed
                                 .equ NVM_BLBAT_RLOCK_gc = (0x01<<2) ; Read not allowed
                                 .equ NVM_BLBAT_WLOCK_gc = (0x02<<2) ; Write not allowed
                                 .equ NVM_BLBAT_NOLOCK_gc = (0x03<<2) ; No locks
                                 
                                 ; Lock bits
                                 .equ NVM_LB_RWLOCK_gc = (0x00<<0) ; Read and write not allowed
                                 .equ NVM_LB_WLOCK_gc = (0x02<<0) ; Write not allowed
                                 .equ NVM_LB_NOLOCK_gc = (0x03<<0) ; No locks
                                 
                                 
                                 ;***************************************************************************
                                 ;** ADC - Analog/Digital Converter
                                 ;***************************************************************************/
                                 
                                 ; ADC_CH_CTRL masks
                                 .equ ADC_CH_START_bm = 0x80 ; Channel Start Conversion bit mask
                                 .equ ADC_CH_START_bp = 7 ; Channel Start Conversion bit position
                                 .equ ADC_CH_GAIN_gm = 0x1C ; Gain Factor group mask
                                 .equ ADC_CH_GAIN_gp = 2 ; Gain Factor group position
                                 .equ ADC_CH_GAIN0_bm = (1<<2) ; Gain Factor bit 0 mask
                                 .equ ADC_CH_GAIN0_bp = 2 ; Gain Factor bit 0 position
                                 .equ ADC_CH_GAIN1_bm = (1<<3) ; Gain Factor bit 1 mask
                                 .equ ADC_CH_GAIN1_bp = 3 ; Gain Factor bit 1 position
                                 .equ ADC_CH_GAIN2_bm = (1<<4) ; Gain Factor bit 2 mask
                                 .equ ADC_CH_GAIN2_bp = 4 ; Gain Factor bit 2 position
                                 .equ ADC_CH_INPUTMODE_gm = 0x03 ; Input Mode Select group mask
                                 .equ ADC_CH_INPUTMODE_gp = 0 ; Input Mode Select group position
                                 .equ ADC_CH_INPUTMODE0_bm = (1<<0) ; Input Mode Select bit 0 mask
                                 .equ ADC_CH_INPUTMODE0_bp = 0 ; Input Mode Select bit 0 position
                                 .equ ADC_CH_INPUTMODE1_bm = (1<<1) ; Input Mode Select bit 1 mask
                                 .equ ADC_CH_INPUTMODE1_bp = 1 ; Input Mode Select bit 1 position
                                 
                                 ; ADC_CH_MUXCTRL masks
                                 .equ ADC_CH_MUXPOS_gm = 0x78 ; MUX selection on Positive ADC input group mask
                                 .equ ADC_CH_MUXPOS_gp = 3 ; MUX selection on Positive ADC input group position
                                 .equ ADC_CH_MUXPOS0_bm = (1<<3) ; MUX selection on Positive ADC input bit 0 mask
                                 .equ ADC_CH_MUXPOS0_bp = 3 ; MUX selection on Positive ADC input bit 0 position
                                 .equ ADC_CH_MUXPOS1_bm = (1<<4) ; MUX selection on Positive ADC input bit 1 mask
                                 .equ ADC_CH_MUXPOS1_bp = 4 ; MUX selection on Positive ADC input bit 1 position
                                 .equ ADC_CH_MUXPOS2_bm = (1<<5) ; MUX selection on Positive ADC input bit 2 mask
                                 .equ ADC_CH_MUXPOS2_bp = 5 ; MUX selection on Positive ADC input bit 2 position
                                 .equ ADC_CH_MUXPOS3_bm = (1<<6) ; MUX selection on Positive ADC input bit 3 mask
                                 .equ ADC_CH_MUXPOS3_bp = 6 ; MUX selection on Positive ADC input bit 3 position
                                 .equ ADC_CH_MUXINT_gm = 0x78 ; MUX selection on Internal ADC input group mask
                                 .equ ADC_CH_MUXINT_gp = 3 ; MUX selection on Internal ADC input group position
                                 .equ ADC_CH_MUXINT0_bm = (1<<3) ; MUX selection on Internal ADC input bit 0 mask
                                 .equ ADC_CH_MUXINT0_bp = 3 ; MUX selection on Internal ADC input bit 0 position
                                 .equ ADC_CH_MUXINT1_bm = (1<<4) ; MUX selection on Internal ADC input bit 1 mask
                                 .equ ADC_CH_MUXINT1_bp = 4 ; MUX selection on Internal ADC input bit 1 position
                                 .equ ADC_CH_MUXINT2_bm = (1<<5) ; MUX selection on Internal ADC input bit 2 mask
                                 .equ ADC_CH_MUXINT2_bp = 5 ; MUX selection on Internal ADC input bit 2 position
                                 .equ ADC_CH_MUXINT3_bm = (1<<6) ; MUX selection on Internal ADC input bit 3 mask
                                 .equ ADC_CH_MUXINT3_bp = 6 ; MUX selection on Internal ADC input bit 3 position
                                 .equ ADC_CH_MUXNEG_gm = 0x03 ; MUX selection on Negative ADC input group mask
                                 .equ ADC_CH_MUXNEG_gp = 0 ; MUX selection on Negative ADC input group position
                                 .equ ADC_CH_MUXNEG0_bm = (1<<0) ; MUX selection on Negative ADC input bit 0 mask
                                 .equ ADC_CH_MUXNEG0_bp = 0 ; MUX selection on Negative ADC input bit 0 position
                                 .equ ADC_CH_MUXNEG1_bm = (1<<1) ; MUX selection on Negative ADC input bit 1 mask
                                 .equ ADC_CH_MUXNEG1_bp = 1 ; MUX selection on Negative ADC input bit 1 position
                                 
                                 ; ADC_CH_INTCTRL masks
                                 .equ ADC_CH_INTMODE_gm = 0x0C ; Interrupt Mode group mask
                                 .equ ADC_CH_INTMODE_gp = 2 ; Interrupt Mode group position
                                 .equ ADC_CH_INTMODE0_bm = (1<<2) ; Interrupt Mode bit 0 mask
                                 .equ ADC_CH_INTMODE0_bp = 2 ; Interrupt Mode bit 0 position
                                 .equ ADC_CH_INTMODE1_bm = (1<<3) ; Interrupt Mode bit 1 mask
                                 .equ ADC_CH_INTMODE1_bp = 3 ; Interrupt Mode bit 1 position
                                 .equ ADC_CH_INTLVL_gm = 0x03 ; Interrupt Level group mask
                                 .equ ADC_CH_INTLVL_gp = 0 ; Interrupt Level group position
                                 .equ ADC_CH_INTLVL0_bm = (1<<0) ; Interrupt Level bit 0 mask
                                 .equ ADC_CH_INTLVL0_bp = 0 ; Interrupt Level bit 0 position
                                 .equ ADC_CH_INTLVL1_bm = (1<<1) ; Interrupt Level bit 1 mask
                                 .equ ADC_CH_INTLVL1_bp = 1 ; Interrupt Level bit 1 position
                                 
                                 ; ADC_CH_INTFLAGS masks
                                 .equ ADC_CH_CHIF_bm = 0x01 ; Channel Interrupt Flag bit mask
                                 .equ ADC_CH_CHIF_bp = 0 ; Channel Interrupt Flag bit position
                                 
                                 ; ADC_CH_SCAN masks
                                 .equ ADC_CH_OFFSET_gm = 0xF0 ; Positive MUX setting offset group mask
                                 .equ ADC_CH_OFFSET_gp = 4 ; Positive MUX setting offset group position
                                 .equ ADC_CH_OFFSET0_bm = (1<<4) ; Positive MUX setting offset bit 0 mask
                                 .equ ADC_CH_OFFSET0_bp = 4 ; Positive MUX setting offset bit 0 position
                                 .equ ADC_CH_OFFSET1_bm = (1<<5) ; Positive MUX setting offset bit 1 mask
                                 .equ ADC_CH_OFFSET1_bp = 5 ; Positive MUX setting offset bit 1 position
                                 .equ ADC_CH_OFFSET2_bm = (1<<6) ; Positive MUX setting offset bit 2 mask
                                 .equ ADC_CH_OFFSET2_bp = 6 ; Positive MUX setting offset bit 2 position
                                 .equ ADC_CH_OFFSET3_bm = (1<<7) ; Positive MUX setting offset bit 3 mask
                                 .equ ADC_CH_OFFSET3_bp = 7 ; Positive MUX setting offset bit 3 position
                                 .equ ADC_CH_COUNT_gm = 0x0F ; Number of Channels included in scan group mask
                                 .equ ADC_CH_COUNT_gp = 0 ; Number of Channels included in scan group position
                                 .equ ADC_CH_COUNT0_bm = (1<<0) ; Number of Channels included in scan bit 0 mask
                                 .equ ADC_CH_COUNT0_bp = 0 ; Number of Channels included in scan bit 0 position
                                 .equ ADC_CH_COUNT1_bm = (1<<1) ; Number of Channels included in scan bit 1 mask
                                 .equ ADC_CH_COUNT1_bp = 1 ; Number of Channels included in scan bit 1 position
                                 .equ ADC_CH_COUNT2_bm = (1<<2) ; Number of Channels included in scan bit 2 mask
                                 .equ ADC_CH_COUNT2_bp = 2 ; Number of Channels included in scan bit 2 position
                                 .equ ADC_CH_COUNT3_bm = (1<<3) ; Number of Channels included in scan bit 3 mask
                                 .equ ADC_CH_COUNT3_bp = 3 ; Number of Channels included in scan bit 3 position
                                 
                                 ;Legacy
                                 .equ ADC_CH_SCANNUM_gm = 0x0F ; Number of Channels included in scan group mask
                                 .equ ADC_CH_SCANNUM_gp = 0 ; Number of Channels included in scan group position
                                 .equ ADC_CH_SCANNUM0_bm = (1<<0) ; Number of Channels included in scan bit 0 mask
                                 .equ ADC_CH_SCANNUM0_bp = 0 ; Number of Channels included in scan bit 0 position
                                 .equ ADC_CH_SCANNUM1_bm = (1<<1) ; Number of Channels included in scan bit 1 mask
                                 .equ ADC_CH_SCANNUM1_bp = 1 ; Number of Channels included in scan bit 1 position
                                 .equ ADC_CH_SCANNUM2_bm = (1<<2) ; Number of Channels included in scan bit 2 mask
                                 .equ ADC_CH_SCANNUM2_bp = 2 ; Number of Channels included in scan bit 2 position
                                 .equ ADC_CH_SCANNUM3_bm = (1<<3) ; Number of Channels included in scan bit 3 mask
                                 .equ ADC_CH_SCANNUM3_bp = 3 ; Number of Channels included in scan bit 3 position
                                 
                                 ; ADC_CTRLA masks
                                 .equ ADC_DMASEL_gm = 0xC0 ; DMA Selection group mask
                                 .equ ADC_DMASEL_gp = 6 ; DMA Selection group position
                                 .equ ADC_DMASEL0_bm = (1<<6) ; DMA Selection bit 0 mask
                                 .equ ADC_DMASEL0_bp = 6 ; DMA Selection bit 0 position
                                 .equ ADC_DMASEL1_bm = (1<<7) ; DMA Selection bit 1 mask
                                 .equ ADC_DMASEL1_bp = 7 ; DMA Selection bit 1 position
                                 .equ ADC_CH3START_bm = 0x20 ; Channel 3 Start Conversion bit mask
                                 .equ ADC_CH3START_bp = 5 ; Channel 3 Start Conversion bit position
                                 .equ ADC_CH2START_bm = 0x10 ; Channel 2 Start Conversion bit mask
                                 .equ ADC_CH2START_bp = 4 ; Channel 2 Start Conversion bit position
                                 .equ ADC_CH1START_bm = 0x08 ; Channel 1 Start Conversion bit mask
                                 .equ ADC_CH1START_bp = 3 ; Channel 1 Start Conversion bit position
                                 .equ ADC_CH0START_bm = 0x04 ; Channel 0 Start Conversion bit mask
                                 .equ ADC_CH0START_bp = 2 ; Channel 0 Start Conversion bit position
                                 .equ ADC_FLUSH_bm = 0x02 ; Flush Pipeline bit mask
                                 .equ ADC_FLUSH_bp = 1 ; Flush Pipeline bit position
                                 .equ ADC_ENABLE_bm = 0x01 ; Enable ADC bit mask
                                 .equ ADC_ENABLE_bp = 0 ; Enable ADC bit position
                                 
                                 ; ADC_CTRLB masks
                                 .equ ADC_IMPMODE_bm = 0x80 ; Gain Stage Impedance Mode bit mask
                                 .equ ADC_IMPMODE_bp = 7 ; Gain Stage Impedance Mode bit position
                                 .equ ADC_CURRLIMIT_gm = 0x60 ; Current Limitation group mask
                                 .equ ADC_CURRLIMIT_gp = 5 ; Current Limitation group position
                                 .equ ADC_CURRLIMIT0_bm = (1<<5) ; Current Limitation bit 0 mask
                                 .equ ADC_CURRLIMIT0_bp = 5 ; Current Limitation bit 0 position
                                 .equ ADC_CURRLIMIT1_bm = (1<<6) ; Current Limitation bit 1 mask
                                 .equ ADC_CURRLIMIT1_bp = 6 ; Current Limitation bit 1 position
                                 .equ ADC_CONMODE_bm = 0x10 ; Conversion Mode bit mask
                                 .equ ADC_CONMODE_bp = 4 ; Conversion Mode bit position
                                 .equ ADC_FREERUN_bm = 0x08 ; Free Running Mode Enable bit mask
                                 .equ ADC_FREERUN_bp = 3 ; Free Running Mode Enable bit position
                                 .equ ADC_RESOLUTION_gm = 0x06 ; Result Resolution group mask
                                 .equ ADC_RESOLUTION_gp = 1 ; Result Resolution group position
                                 .equ ADC_RESOLUTION0_bm = (1<<1) ; Result Resolution bit 0 mask
                                 .equ ADC_RESOLUTION0_bp = 1 ; Result Resolution bit 0 position
                                 .equ ADC_RESOLUTION1_bm = (1<<2) ; Result Resolution bit 1 mask
                                 .equ ADC_RESOLUTION1_bp = 2 ; Result Resolution bit 1 position
                                 
                                 ; ADC_REFCTRL masks
                                 .equ ADC_REFSEL_gm = 0x70 ; Reference Selection group mask
                                 .equ ADC_REFSEL_gp = 4 ; Reference Selection group position
                                 .equ ADC_REFSEL0_bm = (1<<4) ; Reference Selection bit 0 mask
                                 .equ ADC_REFSEL0_bp = 4 ; Reference Selection bit 0 position
                                 .equ ADC_REFSEL1_bm = (1<<5) ; Reference Selection bit 1 mask
                                 .equ ADC_REFSEL1_bp = 5 ; Reference Selection bit 1 position
                                 .equ ADC_REFSEL2_bm = (1<<6) ; Reference Selection bit 2 mask
                                 .equ ADC_REFSEL2_bp = 6 ; Reference Selection bit 2 position
                                 .equ ADC_BANDGAP_bm = 0x02 ; Bandgap enable bit mask
                                 .equ ADC_BANDGAP_bp = 1 ; Bandgap enable bit position
                                 .equ ADC_TEMPREF_bm = 0x01 ; Temperature Reference Enable bit mask
                                 .equ ADC_TEMPREF_bp = 0 ; Temperature Reference Enable bit position
                                 
                                 ; ADC_EVCTRL masks
                                 .equ ADC_SWEEP_gm = 0xC0 ; Channel Sweep Selection group mask
                                 .equ ADC_SWEEP_gp = 6 ; Channel Sweep Selection group position
                                 .equ ADC_SWEEP0_bm = (1<<6) ; Channel Sweep Selection bit 0 mask
                                 .equ ADC_SWEEP0_bp = 6 ; Channel Sweep Selection bit 0 position
                                 .equ ADC_SWEEP1_bm = (1<<7) ; Channel Sweep Selection bit 1 mask
                                 .equ ADC_SWEEP1_bp = 7 ; Channel Sweep Selection bit 1 position
                                 .equ ADC_EVSEL_gm = 0x38 ; Event Input Select group mask
                                 .equ ADC_EVSEL_gp = 3 ; Event Input Select group position
                                 .equ ADC_EVSEL0_bm = (1<<3) ; Event Input Select bit 0 mask
                                 .equ ADC_EVSEL0_bp = 3 ; Event Input Select bit 0 position
                                 .equ ADC_EVSEL1_bm = (1<<4) ; Event Input Select bit 1 mask
                                 .equ ADC_EVSEL1_bp = 4 ; Event Input Select bit 1 position
                                 .equ ADC_EVSEL2_bm = (1<<5) ; Event Input Select bit 2 mask
                                 .equ ADC_EVSEL2_bp = 5 ; Event Input Select bit 2 position
                                 .equ ADC_EVACT_gm = 0x07 ; Event Action Select group mask
                                 .equ ADC_EVACT_gp = 0 ; Event Action Select group position
                                 .equ ADC_EVACT0_bm = (1<<0) ; Event Action Select bit 0 mask
                                 .equ ADC_EVACT0_bp = 0 ; Event Action Select bit 0 position
                                 .equ ADC_EVACT1_bm = (1<<1) ; Event Action Select bit 1 mask
                                 .equ ADC_EVACT1_bp = 1 ; Event Action Select bit 1 position
                                 .equ ADC_EVACT2_bm = (1<<2) ; Event Action Select bit 2 mask
                                 .equ ADC_EVACT2_bp = 2 ; Event Action Select bit 2 position
                                 
                                 ; ADC_PRESCALER masks
                                 .equ ADC_PRESCALER_gm = 0x07 ; Clock Prescaler Selection group mask
                                 .equ ADC_PRESCALER_gp = 0 ; Clock Prescaler Selection group position
                                 .equ ADC_PRESCALER0_bm = (1<<0) ; Clock Prescaler Selection bit 0 mask
                                 .equ ADC_PRESCALER0_bp = 0 ; Clock Prescaler Selection bit 0 position
                                 .equ ADC_PRESCALER1_bm = (1<<1) ; Clock Prescaler Selection bit 1 mask
                                 .equ ADC_PRESCALER1_bp = 1 ; Clock Prescaler Selection bit 1 position
                                 .equ ADC_PRESCALER2_bm = (1<<2) ; Clock Prescaler Selection bit 2 mask
                                 .equ ADC_PRESCALER2_bp = 2 ; Clock Prescaler Selection bit 2 position
                                 
                                 ; ADC_INTFLAGS masks
                                 .equ ADC_CH3IF_bm = 0x08 ; Channel 3 Interrupt Flag bit mask
                                 .equ ADC_CH3IF_bp = 3 ; Channel 3 Interrupt Flag bit position
                                 .equ ADC_CH2IF_bm = 0x04 ; Channel 2 Interrupt Flag bit mask
                                 .equ ADC_CH2IF_bp = 2 ; Channel 2 Interrupt Flag bit position
                                 .equ ADC_CH1IF_bm = 0x02 ; Channel 1 Interrupt Flag bit mask
                                 .equ ADC_CH1IF_bp = 1 ; Channel 1 Interrupt Flag bit position
                                 .equ ADC_CH0IF_bm = 0x01 ; Channel 0 Interrupt Flag bit mask
                                 .equ ADC_CH0IF_bp = 0 ; Channel 0 Interrupt Flag bit position
                                  
                                 ; Positive input multiplexer selection
                                 .equ ADC_CH_MUXPOS_PIN0_gc = (0x00<<3) ; Input pin 0
                                 .equ ADC_CH_MUXPOS_PIN1_gc = (0x01<<3) ; Input pin 1
                                 .equ ADC_CH_MUXPOS_PIN2_gc = (0x02<<3) ; Input pin 2
                                 .equ ADC_CH_MUXPOS_PIN3_gc = (0x03<<3) ; Input pin 3
                                 .equ ADC_CH_MUXPOS_PIN4_gc = (0x04<<3) ; Input pin 4
                                 .equ ADC_CH_MUXPOS_PIN5_gc = (0x05<<3) ; Input pin 5
                                 .equ ADC_CH_MUXPOS_PIN6_gc = (0x06<<3) ; Input pin 6
                                 .equ ADC_CH_MUXPOS_PIN7_gc = (0x07<<3) ; Input pin 7
                                 .equ ADC_CH_MUXPOS_PIN8_gc = (0x08<<3) ; Input pin 8
                                 .equ ADC_CH_MUXPOS_PIN9_gc = (0x09<<3) ; Input pin 9
                                 .equ ADC_CH_MUXPOS_PIN10_gc = (0x0A<<3) ; Input pin 10
                                 .equ ADC_CH_MUXPOS_PIN11_gc = (0x0B<<3) ; Input pin 11
                                 .equ ADC_CH_MUXPOS_PIN12_gc = (0x0C<<3) ; Input pin 12
                                 .equ ADC_CH_MUXPOS_PIN13_gc = (0x0D<<3) ; Input pin 13
                                 .equ ADC_CH_MUXPOS_PIN14_gc = (0x0E<<3) ; Input pin 14
                                 .equ ADC_CH_MUXPOS_PIN15_gc = (0x0F<<3) ; Input pin 15
                                 
                                 ; Internal input multiplexer selections
                                 .equ ADC_CH_MUXINT_TEMP_gc = (0x00<<3) ; Temperature Reference
                                 .equ ADC_CH_MUXINT_BANDGAP_gc = (0x01<<3) ; Bandgap Reference
                                 .equ ADC_CH_MUXINT_SCALEDVCC_gc = (0x02<<3) ; 1/10 scaled VCC
                                 .equ ADC_CH_MUXINT_DAC_gc = (0x03<<3) ; DAC output
                                 
                                 ; Negative input multiplexer selection
                                 .equ ADC_CH_MUXNEG_PIN0_gc = (0x00<<0) ; Input pin 0
                                 .equ ADC_CH_MUXNEG_PIN1_gc = (0x01<<0) ; Input pin 1
                                 .equ ADC_CH_MUXNEG_PIN2_gc = (0x02<<0) ; Input pin 2
                                 .equ ADC_CH_MUXNEG_PIN3_gc = (0x03<<0) ; Input pin 3
                                 .equ ADC_CH_MUXNEG_PIN4_gc = (0x00<<0) ; Input pin 4
                                 .equ ADC_CH_MUXNEG_PIN5_gc = (0x01<<0) ; Input pin 5
                                 .equ ADC_CH_MUXNEG_PIN6_gc = (0x02<<0) ; Input pin 6
                                 .equ ADC_CH_MUXNEG_PIN7_gc = (0x03<<0) ; Input pin 7
                                 
                                 ; Input mode
                                 .equ ADC_CH_INPUTMODE_INTERNAL_gc = (0x00<<0) ; Internal inputs, no gain
                                 .equ ADC_CH_INPUTMODE_SINGLEENDED_gc = (0x01<<0) ; Single-ended input, no gain
                                 .equ ADC_CH_INPUTMODE_DIFF_gc = (0x02<<0) ; Differential input, no gain
                                 .equ ADC_CH_INPUTMODE_DIFFWGAIN_gc = (0x03<<0) ; Differential input, with gain
                                 
                                 ; Gain factor
                                 .equ ADC_CH_GAIN_1X_gc = (0x00<<2) ; 1x gain
                                 .equ ADC_CH_GAIN_2X_gc = (0x01<<2) ; 2x gain
                                 .equ ADC_CH_GAIN_4X_gc = (0x02<<2) ; 4x gain
                                 .equ ADC_CH_GAIN_8X_gc = (0x03<<2) ; 8x gain
                                 .equ ADC_CH_GAIN_16X_gc = (0x04<<2) ; 16x gain
                                 .equ ADC_CH_GAIN_32X_gc = (0x05<<2) ; 32x gain
                                 .equ ADC_CH_GAIN_64X_gc = (0x06<<2) ; 64x gain
                                 .equ ADC_CH_GAIN_DIV2_gc = (0x07<<2) ; x/2 gain
                                 
                                 ; Conversion result resolution
                                 .equ ADC_RESOLUTION_12BIT_gc = (0x00<<1) ; 12-bit right-adjusted result
                                 .equ ADC_RESOLUTION_8BIT_gc = (0x02<<1) ; 8-bit right-adjusted result
                                 .equ ADC_RESOLUTION_LEFT12BIT_gc = (0x03<<1) ; 12-bit left-adjusted result
                                 
                                 ; Current Limitation Mode
                                 .equ ADC_CURRLIMIT_NO_gc = (0x00<<5) ; No Current Reduction
                                 .equ ADC_CURRLIMIT_SMALL_gc = (0x01<<5) ; 10% current reduction
                                 .equ ADC_CURRLIMIT_MEDIUM_gc = (0x02<<5) ; 20% current reduction
                                 .equ ADC_CURRLIMIT_LARGE_gc = (0x03<<5) ; 30% current reduction
                                 
                                 ; Voltage reference selection
                                 .equ ADC_REFSEL_INT1V_gc = (0x00<<4) ; Internal 1V
                                 .equ ADC_REFSEL_VCC_gc = (0x01<<4) ; Internal VCC / 1.6
                                 .equ ADC_REFSEL_AREFA_gc = (0x02<<4) ; External reference on PORT A
                                 .equ ADC_REFSEL_AREFB_gc = (0x03<<4) ; External reference on PORT B
                                 .equ ADC_REFSEL_VCCDIV2_gc = (0x04<<4) ; Internal VCC / 2
                                 
                                 ; Channel sweep selection
                                 .equ ADC_SWEEP_0_gc = (0x00<<6) ; ADC Channel 0
                                 .equ ADC_SWEEP_01_gc = (0x01<<6) ; ADC Channel 0,1
                                 .equ ADC_SWEEP_012_gc = (0x02<<6) ; ADC Channel 0,1,2
                                 .equ ADC_SWEEP_0123_gc = (0x03<<6) ; ADC Channel 0,1,2,3
                                 
                                 ; Event channel input selection
                                 .equ ADC_EVSEL_0123_gc = (0x00<<3) ; Event Channel 0,1,2,3
                                 .equ ADC_EVSEL_1234_gc = (0x01<<3) ; Event Channel 1,2,3,4
                                 .equ ADC_EVSEL_2345_gc = (0x02<<3) ; Event Channel 2,3,4,5
                                 .equ ADC_EVSEL_3456_gc = (0x03<<3) ; Event Channel 3,4,5,6
                                 .equ ADC_EVSEL_4567_gc = (0x04<<3) ; Event Channel 4,5,6,7
                                 .equ ADC_EVSEL_567_gc = (0x05<<3) ; Event Channel 5,6,7
                                 .equ ADC_EVSEL_67_gc = (0x06<<3) ; Event Channel 6,7
                                 .equ ADC_EVSEL_7_gc = (0x07<<3) ; Event Channel 7
                                 
                                 ; Event action selection
                                 .equ ADC_EVACT_NONE_gc = (0x00<<0) ; No event action
                                 .equ ADC_EVACT_CH0_gc = (0x01<<0) ; First event triggers channel 0
                                 .equ ADC_EVACT_CH01_gc = (0x02<<0) ; First two events trigger channel 0,1
                                 .equ ADC_EVACT_CH012_gc = (0x03<<0) ; First three events trigger channel 0,1,2
                                 .equ ADC_EVACT_CH0123_gc = (0x04<<0) ; Events trigger channel 0,1,2,3
                                 .equ ADC_EVACT_SWEEP_gc = (0x05<<0) ; First event triggers sweep
                                 .equ ADC_EVACT_SYNCHSWEEP_gc = (0x06<<0) ; First event triggers synchronized sweep
                                 
                                 ; Interupt mode
                                 .equ ADC_CH_INTMODE_COMPLETE_gc = (0x00<<2) ; Interrupt on conversion complete
                                 .equ ADC_CH_INTMODE_BELOW_gc = (0x01<<2) ; Interrupt on result below compare value
                                 .equ ADC_CH_INTMODE_ABOVE_gc = (0x03<<2) ; Interrupt on result above compare value
                                 
                                 ; Interrupt level
                                 .equ ADC_CH_INTLVL_OFF_gc = (0x00<<0) ; Interrupt disabled
                                 .equ ADC_CH_INTLVL_LO_gc = (0x01<<0) ; Low level
                                 .equ ADC_CH_INTLVL_MED_gc = (0x02<<0) ; Medium level
                                 .equ ADC_CH_INTLVL_HI_gc = (0x03<<0) ; High level
                                 
                                 ; DMA request selection
                                 .equ ADC_DMASEL_OFF_gc = (0x00<<6) ; Combined DMA request OFF
                                 .equ ADC_DMASEL_CH01_gc = (0x01<<6) ; ADC Channel 0 or 1
                                 .equ ADC_DMASEL_CH012_gc = (0x02<<6) ; ADC Channel 0 or 1 or 2
                                 .equ ADC_DMASEL_CH0123_gc = (0x03<<6) ; ADC Channel 0 or 1 or 2 or 3
                                 
                                 ; Clock prescaler
                                 .equ ADC_PRESCALER_DIV4_gc = (0x00<<0) ; Divide clock by 4
                                 .equ ADC_PRESCALER_DIV8_gc = (0x01<<0) ; Divide clock by 8
                                 .equ ADC_PRESCALER_DIV16_gc = (0x02<<0) ; Divide clock by 16
                                 .equ ADC_PRESCALER_DIV32_gc = (0x03<<0) ; Divide clock by 32
                                 .equ ADC_PRESCALER_DIV64_gc = (0x04<<0) ; Divide clock by 64
                                 .equ ADC_PRESCALER_DIV128_gc = (0x05<<0) ; Divide clock by 128
                                 .equ ADC_PRESCALER_DIV256_gc = (0x06<<0) ; Divide clock by 256
                                 .equ ADC_PRESCALER_DIV512_gc = (0x07<<0) ; Divide clock by 512
                                 
                                 
                                 ;***************************************************************************
                                 ;** DAC - Digital/Analog Converter
                                 ;***************************************************************************/
                                 
                                 ; DAC_CTRLA masks
                                 .equ DAC_IDOEN_bm = 0x10 ; Internal Output Enable bit mask
                                 .equ DAC_IDOEN_bp = 4 ; Internal Output Enable bit position
                                 .equ DAC_CH1EN_bm = 0x08 ; Channel 1 Output Enable bit mask
                                 .equ DAC_CH1EN_bp = 3 ; Channel 1 Output Enable bit position
                                 .equ DAC_CH0EN_bm = 0x04 ; Channel 0 Output Enable bit mask
                                 .equ DAC_CH0EN_bp = 2 ; Channel 0 Output Enable bit position
                                 .equ DAC_LPMODE_bm = 0x02 ; Low Power Mode bit mask
                                 .equ DAC_LPMODE_bp = 1 ; Low Power Mode bit position
                                 .equ DAC_ENABLE_bm = 0x01 ; Enable bit mask
                                 .equ DAC_ENABLE_bp = 0 ; Enable bit position
                                 
                                 ; DAC_CTRLB masks
                                 .equ DAC_CHSEL_gm = 0x60 ; Channel Select group mask
                                 .equ DAC_CHSEL_gp = 5 ; Channel Select group position
                                 .equ DAC_CHSEL0_bm = (1<<5) ; Channel Select bit 0 mask
                                 .equ DAC_CHSEL0_bp = 5 ; Channel Select bit 0 position
                                 .equ DAC_CHSEL1_bm = (1<<6) ; Channel Select bit 1 mask
                                 .equ DAC_CHSEL1_bp = 6 ; Channel Select bit 1 position
                                 .equ DAC_CH1TRIG_bm = 0x02 ; Channel 1 Event Trig Enable bit mask
                                 .equ DAC_CH1TRIG_bp = 1 ; Channel 1 Event Trig Enable bit position
                                 .equ DAC_CH0TRIG_bm = 0x01 ; Channel 0 Event Trig Enable bit mask
                                 .equ DAC_CH0TRIG_bp = 0 ; Channel 0 Event Trig Enable bit position
                                 
                                 ; DAC_CTRLC masks
                                 .equ DAC_REFSEL_gm = 0x18 ; Reference Select group mask
                                 .equ DAC_REFSEL_gp = 3 ; Reference Select group position
                                 .equ DAC_REFSEL0_bm = (1<<3) ; Reference Select bit 0 mask
                                 .equ DAC_REFSEL0_bp = 3 ; Reference Select bit 0 position
                                 .equ DAC_REFSEL1_bm = (1<<4) ; Reference Select bit 1 mask
                                 .equ DAC_REFSEL1_bp = 4 ; Reference Select bit 1 position
                                 .equ DAC_LEFTADJ_bm = 0x01 ; Left-adjust Result bit mask
                                 .equ DAC_LEFTADJ_bp = 0 ; Left-adjust Result bit position
                                 
                                 ; DAC_EVCTRL masks
                                 .equ DAC_EVSPLIT_bm = 0x08 ; Separate Event Channel Input for Channel 1 bit mask
                                 .equ DAC_EVSPLIT_bp = 3 ; Separate Event Channel Input for Channel 1 bit position
                                 .equ DAC_EVSEL_gm = 0x07 ; Event Input Selection group mask
                                 .equ DAC_EVSEL_gp = 0 ; Event Input Selection group position
                                 .equ DAC_EVSEL0_bm = (1<<0) ; Event Input Selection bit 0 mask
                                 .equ DAC_EVSEL0_bp = 0 ; Event Input Selection bit 0 position
                                 .equ DAC_EVSEL1_bm = (1<<1) ; Event Input Selection bit 1 mask
                                 .equ DAC_EVSEL1_bp = 1 ; Event Input Selection bit 1 position
                                 .equ DAC_EVSEL2_bm = (1<<2) ; Event Input Selection bit 2 mask
                                 .equ DAC_EVSEL2_bp = 2 ; Event Input Selection bit 2 position
                                 
                                 ; DAC_STATUS masks
                                 .equ DAC_CH1DRE_bm = 0x02 ; Channel 1 Data Register Empty bit mask
                                 .equ DAC_CH1DRE_bp = 1 ; Channel 1 Data Register Empty bit position
                                 .equ DAC_CH0DRE_bm = 0x01 ; Channel 0 Data Register Empty bit mask
                                 .equ DAC_CH0DRE_bp = 0 ; Channel 0 Data Register Empty bit position
                                 
                                 ; DAC_CH0GAINCAL masks
                                 .equ DAC_CH0GAINCAL_gm = 0x7F ; Gain Calibration group mask
                                 .equ DAC_CH0GAINCAL_gp = 0 ; Gain Calibration group position
                                 .equ DAC_CH0GAINCAL0_bm = (1<<0) ; Gain Calibration bit 0 mask
                                 .equ DAC_CH0GAINCAL0_bp = 0 ; Gain Calibration bit 0 position
                                 .equ DAC_CH0GAINCAL1_bm = (1<<1) ; Gain Calibration bit 1 mask
                                 .equ DAC_CH0GAINCAL1_bp = 1 ; Gain Calibration bit 1 position
                                 .equ DAC_CH0GAINCAL2_bm = (1<<2) ; Gain Calibration bit 2 mask
                                 .equ DAC_CH0GAINCAL2_bp = 2 ; Gain Calibration bit 2 position
                                 .equ DAC_CH0GAINCAL3_bm = (1<<3) ; Gain Calibration bit 3 mask
                                 .equ DAC_CH0GAINCAL3_bp = 3 ; Gain Calibration bit 3 position
                                 .equ DAC_CH0GAINCAL4_bm = (1<<4) ; Gain Calibration bit 4 mask
                                 .equ DAC_CH0GAINCAL4_bp = 4 ; Gain Calibration bit 4 position
                                 .equ DAC_CH0GAINCAL5_bm = (1<<5) ; Gain Calibration bit 5 mask
                                 .equ DAC_CH0GAINCAL5_bp = 5 ; Gain Calibration bit 5 position
                                 .equ DAC_CH0GAINCAL6_bm = (1<<6) ; Gain Calibration bit 6 mask
                                 .equ DAC_CH0GAINCAL6_bp = 6 ; Gain Calibration bit 6 position
                                 
                                 ; DAC_CH0OFFSETCAL masks
                                 .equ DAC_CH0OFFSETCAL_gm = 0x7F ; Offset Calibration group mask
                                 .equ DAC_CH0OFFSETCAL_gp = 0 ; Offset Calibration group position
                                 .equ DAC_CH0OFFSETCAL0_bm = (1<<0) ; Offset Calibration bit 0 mask
                                 .equ DAC_CH0OFFSETCAL0_bp = 0 ; Offset Calibration bit 0 position
                                 .equ DAC_CH0OFFSETCAL1_bm = (1<<1) ; Offset Calibration bit 1 mask
                                 .equ DAC_CH0OFFSETCAL1_bp = 1 ; Offset Calibration bit 1 position
                                 .equ DAC_CH0OFFSETCAL2_bm = (1<<2) ; Offset Calibration bit 2 mask
                                 .equ DAC_CH0OFFSETCAL2_bp = 2 ; Offset Calibration bit 2 position
                                 .equ DAC_CH0OFFSETCAL3_bm = (1<<3) ; Offset Calibration bit 3 mask
                                 .equ DAC_CH0OFFSETCAL3_bp = 3 ; Offset Calibration bit 3 position
                                 .equ DAC_CH0OFFSETCAL4_bm = (1<<4) ; Offset Calibration bit 4 mask
                                 .equ DAC_CH0OFFSETCAL4_bp = 4 ; Offset Calibration bit 4 position
                                 .equ DAC_CH0OFFSETCAL5_bm = (1<<5) ; Offset Calibration bit 5 mask
                                 .equ DAC_CH0OFFSETCAL5_bp = 5 ; Offset Calibration bit 5 position
                                 .equ DAC_CH0OFFSETCAL6_bm = (1<<6) ; Offset Calibration bit 6 mask
                                 .equ DAC_CH0OFFSETCAL6_bp = 6 ; Offset Calibration bit 6 position
                                 
                                 ; DAC_CH1GAINCAL masks
                                 .equ DAC_CH1GAINCAL_gm = 0x7F ; Gain Calibration group mask
                                 .equ DAC_CH1GAINCAL_gp = 0 ; Gain Calibration group position
                                 .equ DAC_CH1GAINCAL0_bm = (1<<0) ; Gain Calibration bit 0 mask
                                 .equ DAC_CH1GAINCAL0_bp = 0 ; Gain Calibration bit 0 position
                                 .equ DAC_CH1GAINCAL1_bm = (1<<1) ; Gain Calibration bit 1 mask
                                 .equ DAC_CH1GAINCAL1_bp = 1 ; Gain Calibration bit 1 position
                                 .equ DAC_CH1GAINCAL2_bm = (1<<2) ; Gain Calibration bit 2 mask
                                 .equ DAC_CH1GAINCAL2_bp = 2 ; Gain Calibration bit 2 position
                                 .equ DAC_CH1GAINCAL3_bm = (1<<3) ; Gain Calibration bit 3 mask
                                 .equ DAC_CH1GAINCAL3_bp = 3 ; Gain Calibration bit 3 position
                                 .equ DAC_CH1GAINCAL4_bm = (1<<4) ; Gain Calibration bit 4 mask
                                 .equ DAC_CH1GAINCAL4_bp = 4 ; Gain Calibration bit 4 position
                                 .equ DAC_CH1GAINCAL5_bm = (1<<5) ; Gain Calibration bit 5 mask
                                 .equ DAC_CH1GAINCAL5_bp = 5 ; Gain Calibration bit 5 position
                                 .equ DAC_CH1GAINCAL6_bm = (1<<6) ; Gain Calibration bit 6 mask
                                 .equ DAC_CH1GAINCAL6_bp = 6 ; Gain Calibration bit 6 position
                                 
                                 ; DAC_CH1OFFSETCAL masks
                                 .equ DAC_CH1OFFSETCAL_gm = 0x7F ; Offset Calibration group mask
                                 .equ DAC_CH1OFFSETCAL_gp = 0 ; Offset Calibration group position
                                 .equ DAC_CH1OFFSETCAL0_bm = (1<<0) ; Offset Calibration bit 0 mask
                                 .equ DAC_CH1OFFSETCAL0_bp = 0 ; Offset Calibration bit 0 position
                                 .equ DAC_CH1OFFSETCAL1_bm = (1<<1) ; Offset Calibration bit 1 mask
                                 .equ DAC_CH1OFFSETCAL1_bp = 1 ; Offset Calibration bit 1 position
                                 .equ DAC_CH1OFFSETCAL2_bm = (1<<2) ; Offset Calibration bit 2 mask
                                 .equ DAC_CH1OFFSETCAL2_bp = 2 ; Offset Calibration bit 2 position
                                 .equ DAC_CH1OFFSETCAL3_bm = (1<<3) ; Offset Calibration bit 3 mask
                                 .equ DAC_CH1OFFSETCAL3_bp = 3 ; Offset Calibration bit 3 position
                                 .equ DAC_CH1OFFSETCAL4_bm = (1<<4) ; Offset Calibration bit 4 mask
                                 .equ DAC_CH1OFFSETCAL4_bp = 4 ; Offset Calibration bit 4 position
                                 .equ DAC_CH1OFFSETCAL5_bm = (1<<5) ; Offset Calibration bit 5 mask
                                 .equ DAC_CH1OFFSETCAL5_bp = 5 ; Offset Calibration bit 5 position
                                 .equ DAC_CH1OFFSETCAL6_bm = (1<<6) ; Offset Calibration bit 6 mask
                                 .equ DAC_CH1OFFSETCAL6_bp = 6 ; Offset Calibration bit 6 position
                                  
                                 ; Output channel selection
                                 .equ DAC_CHSEL_SINGLE_gc = (0x00<<5) ; Single channel operation (Channel 0 only)
                                 .equ DAC_CHSEL_SINGLE1_gc = (0x01<<5) ; Single channel operation (Channel 1 only)
                                 .equ DAC_CHSEL_DUAL_gc = (0x02<<5) ; Dual channel operation (Channel 0 and channel 1)
                                 
                                 ; Reference voltage selection
                                 .equ DAC_REFSEL_INT1V_gc = (0x00<<3) ; Internal 1V 
                                 .equ DAC_REFSEL_AVCC_gc = (0x01<<3) ; Analog supply voltage
                                 .equ DAC_REFSEL_AREFA_gc = (0x02<<3) ; External reference on AREF on PORTA
                                 .equ DAC_REFSEL_AREFB_gc = (0x03<<3) ; External reference on AREF on PORTB
                                 
                                 ; Event channel selection
                                 .equ DAC_EVSEL_0_gc = (0x00<<0) ; Event Channel 0
                                 .equ DAC_EVSEL_1_gc = (0x01<<0) ; Event Channel 1
                                 .equ DAC_EVSEL_2_gc = (0x02<<0) ; Event Channel 2
                                 .equ DAC_EVSEL_3_gc = (0x03<<0) ; Event Channel 3
                                 .equ DAC_EVSEL_4_gc = (0x04<<0) ; Event Channel 4
                                 .equ DAC_EVSEL_5_gc = (0x05<<0) ; Event Channel 5
                                 .equ DAC_EVSEL_6_gc = (0x06<<0) ; Event Channel 6
                                 .equ DAC_EVSEL_7_gc = (0x07<<0) ; Event Channel 7
                                 
                                 ; Conversion interval
                                 .equ DAC_CONINTVAL_1CLK_gc = (0x00<<4) ; 1 CLK / 2 CLK in S/H mode
                                 .equ DAC_CONINTVAL_2CLK_gc = (0x01<<4) ; 2 CLK / 3 CLK in S/H mode
                                 .equ DAC_CONINTVAL_4CLK_gc = (0x02<<4) ; 4 CLK / 6 CLK in S/H mode
                                 .equ DAC_CONINTVAL_8CLK_gc = (0x03<<4) ; 8 CLK / 12 CLK in S/H mode
                                 .equ DAC_CONINTVAL_16CLK_gc = (0x04<<4) ; 16 CLK / 24 CLK in S/H mode
                                 .equ DAC_CONINTVAL_32CLK_gc = (0x05<<4) ; 32 CLK / 48 CLK in S/H mode
                                 .equ DAC_CONINTVAL_64CLK_gc = (0x06<<4) ; 64 CLK / 96 CLK in S/H mode
                                 .equ DAC_CONINTVAL_128CLK_gc = (0x07<<4) ; 128 CLK / 192 CLK in S/H mode
                                 
                                 ; Refresh rate
                                 .equ DAC_REFRESH_16CLK_gc = (0x00<<0) ; 16 CLK
                                 .equ DAC_REFRESH_32CLK_gc = (0x01<<0) ; 32 CLK
                                 .equ DAC_REFRESH_64CLK_gc = (0x02<<0) ; 64 CLK
                                 .equ DAC_REFRESH_128CLK_gc = (0x03<<0) ; 128 CLK
                                 .equ DAC_REFRESH_256CLK_gc = (0x04<<0) ; 256 CLK
                                 .equ DAC_REFRESH_512CLK_gc = (0x05<<0) ; 512 CLK
                                 .equ DAC_REFRESH_1024CLK_gc = (0x06<<0) ; 1024 CLK
                                 .equ DAC_REFRESH_2048CLK_gc = (0x07<<0) ; 2048 CLK
                                 .equ DAC_REFRESH_4096CLK_gc = (0x08<<0) ; 4096 CLK
                                 .equ DAC_REFRESH_8192CLK_gc = (0x09<<0) ; 8192 CLK
                                 .equ DAC_REFRESH_16384CLK_gc = (0x0A<<0) ; 16384 CLK
                                 .equ DAC_REFRESH_32768CLK_gc = (0x0B<<0) ; 32768 CLK
                                 .equ DAC_REFRESH_65536CLK_gc = (0x0C<<0) ; 65536 CLK
                                 .equ DAC_REFRESH_OFF_gc = (0x0F<<0) ; Auto refresh OFF
                                 
                                 
                                 ;***************************************************************************
                                 ;** AC - Analog Comparator
                                 ;***************************************************************************/
                                 
                                 ; AC_AC0CTRL masks
                                 .equ AC_INTMODE_gm = 0xC0 ; Interrupt Mode group mask
                                 .equ AC_INTMODE_gp = 6 ; Interrupt Mode group position
                                 .equ AC_INTMODE0_bm = (1<<6) ; Interrupt Mode bit 0 mask
                                 .equ AC_INTMODE0_bp = 6 ; Interrupt Mode bit 0 position
                                 .equ AC_INTMODE1_bm = (1<<7) ; Interrupt Mode bit 1 mask
                                 .equ AC_INTMODE1_bp = 7 ; Interrupt Mode bit 1 position
                                 .equ AC_INTLVL_gm = 0x30 ; Interrupt Level group mask
                                 .equ AC_INTLVL_gp = 4 ; Interrupt Level group position
                                 .equ AC_INTLVL0_bm = (1<<4) ; Interrupt Level bit 0 mask
                                 .equ AC_INTLVL0_bp = 4 ; Interrupt Level bit 0 position
                                 .equ AC_INTLVL1_bm = (1<<5) ; Interrupt Level bit 1 mask
                                 .equ AC_INTLVL1_bp = 5 ; Interrupt Level bit 1 position
                                 .equ AC_HSMODE_bm = 0x08 ; High-speed Mode bit mask
                                 .equ AC_HSMODE_bp = 3 ; High-speed Mode bit position
                                 .equ AC_HYSMODE_gm = 0x06 ; Hysteresis Mode group mask
                                 .equ AC_HYSMODE_gp = 1 ; Hysteresis Mode group position
                                 .equ AC_HYSMODE0_bm = (1<<1) ; Hysteresis Mode bit 0 mask
                                 .equ AC_HYSMODE0_bp = 1 ; Hysteresis Mode bit 0 position
                                 .equ AC_HYSMODE1_bm = (1<<2) ; Hysteresis Mode bit 1 mask
                                 .equ AC_HYSMODE1_bp = 2 ; Hysteresis Mode bit 1 position
                                 .equ AC_ENABLE_bm = 0x01 ; Enable bit mask
                                 .equ AC_ENABLE_bp = 0 ; Enable bit position
                                 
                                 ; AC_AC1CTRL masks
                                 ; Masks for INTMODE aready defined
                                 ; Masks for INTLVL aready defined
                                 ; Masks for HSMODE aready defined
                                 ; Masks for HYSMODE aready defined
                                 ; Masks for ENABLE aready defined
                                 
                                 ; AC_AC0MUXCTRL masks
                                 .equ AC_MUXPOS_gm = 0x38 ; MUX Positive Input group mask
                                 .equ AC_MUXPOS_gp = 3 ; MUX Positive Input group position
                                 .equ AC_MUXPOS0_bm = (1<<3) ; MUX Positive Input bit 0 mask
                                 .equ AC_MUXPOS0_bp = 3 ; MUX Positive Input bit 0 position
                                 .equ AC_MUXPOS1_bm = (1<<4) ; MUX Positive Input bit 1 mask
                                 .equ AC_MUXPOS1_bp = 4 ; MUX Positive Input bit 1 position
                                 .equ AC_MUXPOS2_bm = (1<<5) ; MUX Positive Input bit 2 mask
                                 .equ AC_MUXPOS2_bp = 5 ; MUX Positive Input bit 2 position
                                 .equ AC_MUXNEG_gm = 0x07 ; MUX Negative Input group mask
                                 .equ AC_MUXNEG_gp = 0 ; MUX Negative Input group position
                                 .equ AC_MUXNEG0_bm = (1<<0) ; MUX Negative Input bit 0 mask
                                 .equ AC_MUXNEG0_bp = 0 ; MUX Negative Input bit 0 position
                                 .equ AC_MUXNEG1_bm = (1<<1) ; MUX Negative Input bit 1 mask
                                 .equ AC_MUXNEG1_bp = 1 ; MUX Negative Input bit 1 position
                                 .equ AC_MUXNEG2_bm = (1<<2) ; MUX Negative Input bit 2 mask
                                 .equ AC_MUXNEG2_bp = 2 ; MUX Negative Input bit 2 position
                                 
                                 ; AC_AC1MUXCTRL masks
                                 ; Masks for MUXPOS aready defined
                                 ; Masks for MUXNEG aready defined
                                 
                                 ; AC_CTRLA masks
                                 .equ AC_AC1OUT_bm = 0x02 ; Analog Comparator 1 Output Enable bit mask
                                 .equ AC_AC1OUT_bp = 1 ; Analog Comparator 1 Output Enable bit position
                                 .equ AC_AC0OUT_bm = 0x01 ; Analog Comparator 0 Output Enable bit mask
                                 .equ AC_AC0OUT_bp = 0 ; Analog Comparator 0 Output Enable bit position
                                 
                                 ; AC_CTRLB masks
                                 .equ AC_SCALEFAC_gm = 0x3F ; VCC Voltage Scaler Factor group mask
                                 .equ AC_SCALEFAC_gp = 0 ; VCC Voltage Scaler Factor group position
                                 .equ AC_SCALEFAC0_bm = (1<<0) ; VCC Voltage Scaler Factor bit 0 mask
                                 .equ AC_SCALEFAC0_bp = 0 ; VCC Voltage Scaler Factor bit 0 position
                                 .equ AC_SCALEFAC1_bm = (1<<1) ; VCC Voltage Scaler Factor bit 1 mask
                                 .equ AC_SCALEFAC1_bp = 1 ; VCC Voltage Scaler Factor bit 1 position
                                 .equ AC_SCALEFAC2_bm = (1<<2) ; VCC Voltage Scaler Factor bit 2 mask
                                 .equ AC_SCALEFAC2_bp = 2 ; VCC Voltage Scaler Factor bit 2 position
                                 .equ AC_SCALEFAC3_bm = (1<<3) ; VCC Voltage Scaler Factor bit 3 mask
                                 .equ AC_SCALEFAC3_bp = 3 ; VCC Voltage Scaler Factor bit 3 position
                                 .equ AC_SCALEFAC4_bm = (1<<4) ; VCC Voltage Scaler Factor bit 4 mask
                                 .equ AC_SCALEFAC4_bp = 4 ; VCC Voltage Scaler Factor bit 4 position
                                 .equ AC_SCALEFAC5_bm = (1<<5) ; VCC Voltage Scaler Factor bit 5 mask
                                 .equ AC_SCALEFAC5_bp = 5 ; VCC Voltage Scaler Factor bit 5 position
                                 
                                 ; AC_WINCTRL masks
                                 .equ AC_WEN_bm = 0x10 ; Window Mode Enable bit mask
                                 .equ AC_WEN_bp = 4 ; Window Mode Enable bit position
                                 .equ AC_WINTMODE_gm = 0x0C ; Window Interrupt Mode group mask
                                 .equ AC_WINTMODE_gp = 2 ; Window Interrupt Mode group position
                                 .equ AC_WINTMODE0_bm = (1<<2) ; Window Interrupt Mode bit 0 mask
                                 .equ AC_WINTMODE0_bp = 2 ; Window Interrupt Mode bit 0 position
                                 .equ AC_WINTMODE1_bm = (1<<3) ; Window Interrupt Mode bit 1 mask
                                 .equ AC_WINTMODE1_bp = 3 ; Window Interrupt Mode bit 1 position
                                 .equ AC_WINTLVL_gm = 0x03 ; Window Interrupt Level group mask
                                 .equ AC_WINTLVL_gp = 0 ; Window Interrupt Level group position
                                 .equ AC_WINTLVL0_bm = (1<<0) ; Window Interrupt Level bit 0 mask
                                 .equ AC_WINTLVL0_bp = 0 ; Window Interrupt Level bit 0 position
                                 .equ AC_WINTLVL1_bm = (1<<1) ; Window Interrupt Level bit 1 mask
                                 .equ AC_WINTLVL1_bp = 1 ; Window Interrupt Level bit 1 position
                                 
                                 ; AC_STATUS masks
                                 .equ AC_WSTATE_gm = 0xC0 ; Window Mode State group mask
                                 .equ AC_WSTATE_gp = 6 ; Window Mode State group position
                                 .equ AC_WSTATE0_bm = (1<<6) ; Window Mode State bit 0 mask
                                 .equ AC_WSTATE0_bp = 6 ; Window Mode State bit 0 position
                                 .equ AC_WSTATE1_bm = (1<<7) ; Window Mode State bit 1 mask
                                 .equ AC_WSTATE1_bp = 7 ; Window Mode State bit 1 position
                                 .equ AC_AC1STATE_bm = 0x20 ; Analog Comparator 1 State bit mask
                                 .equ AC_AC1STATE_bp = 5 ; Analog Comparator 1 State bit position
                                 .equ AC_AC0STATE_bm = 0x10 ; Analog Comparator 0 State bit mask
                                 .equ AC_AC0STATE_bp = 4 ; Analog Comparator 0 State bit position
                                 .equ AC_WIF_bm = 0x04 ; Window Mode Interrupt Flag bit mask
                                 .equ AC_WIF_bp = 2 ; Window Mode Interrupt Flag bit position
                                 .equ AC_AC1IF_bm = 0x02 ; Analog Comparator 1 Interrupt Flag bit mask
                                 .equ AC_AC1IF_bp = 1 ; Analog Comparator 1 Interrupt Flag bit position
                                 .equ AC_AC0IF_bm = 0x01 ; Analog Comparator 0 Interrupt Flag bit mask
                                 .equ AC_AC0IF_bp = 0 ; Analog Comparator 0 Interrupt Flag bit position
                                  
                                 ; Interrupt mode
                                 .equ AC_INTMODE_BOTHEDGES_gc = (0x00<<6) ; Interrupt on both edges
                                 .equ AC_INTMODE_FALLING_gc = (0x02<<6) ; Interrupt on falling edge
                                 .equ AC_INTMODE_RISING_gc = (0x03<<6) ; Interrupt on rising edge
                                 
                                 ; Interrupt level
                                 .equ AC_INTLVL_OFF_gc = (0x00<<4) ; Interrupt disabled
                                 .equ AC_INTLVL_LO_gc = (0x01<<4) ; Low level
                                 .equ AC_INTLVL_MED_gc = (0x02<<4) ; Medium level
                                 .equ AC_INTLVL_HI_gc = (0x03<<4) ; High level
                                 
                                 ; Hysteresis mode selection
                                 .equ AC_HYSMODE_NO_gc = (0x00<<1) ; No hysteresis
                                 .equ AC_HYSMODE_SMALL_gc = (0x01<<1) ; Small hysteresis
                                 .equ AC_HYSMODE_LARGE_gc = (0x02<<1) ; Large hysteresis
                                 
                                 ; Positive input multiplexer selection
                                 .equ AC_MUXPOS_PIN0_gc = (0x00<<3) ; Pin 0
                                 .equ AC_MUXPOS_PIN1_gc = (0x01<<3) ; Pin 1
                                 .equ AC_MUXPOS_PIN2_gc = (0x02<<3) ; Pin 2
                                 .equ AC_MUXPOS_PIN3_gc = (0x03<<3) ; Pin 3
                                 .equ AC_MUXPOS_PIN4_gc = (0x04<<3) ; Pin 4
                                 .equ AC_MUXPOS_PIN5_gc = (0x05<<3) ; Pin 5
                                 .equ AC_MUXPOS_PIN6_gc = (0x06<<3) ; Pin 6
                                 .equ AC_MUXPOS_DAC_gc = (0x07<<3) ; DAC output
                                 
                                 ; Negative input multiplexer selection
                                 .equ AC_MUXNEG_PIN0_gc = (0x00<<0) ; Pin 0
                                 .equ AC_MUXNEG_PIN1_gc = (0x01<<0) ; Pin 1
                                 .equ AC_MUXNEG_PIN3_gc = (0x02<<0) ; Pin 3
                                 .equ AC_MUXNEG_PIN5_gc = (0x03<<0) ; Pin 5
                                 .equ AC_MUXNEG_PIN7_gc = (0x04<<0) ; Pin 7
                                 .equ AC_MUXNEG_DAC_gc = (0x05<<0) ; DAC output
                                 .equ AC_MUXNEG_BANDGAP_gc = (0x06<<0) ; Bandgap Reference
                                 .equ AC_MUXNEG_SCALER_gc = (0x07<<0) ; Internal voltage scaler
                                 
                                 ; Windows interrupt mode
                                 .equ AC_WINTMODE_ABOVE_gc = (0x00<<2) ; Interrupt on above window
                                 .equ AC_WINTMODE_INSIDE_gc = (0x01<<2) ; Interrupt on inside window
                                 .equ AC_WINTMODE_BELOW_gc = (0x02<<2) ; Interrupt on below window
                                 .equ AC_WINTMODE_OUTSIDE_gc = (0x03<<2) ; Interrupt on outside window
                                 
                                 ; Window interrupt level
                                 .equ AC_WINTLVL_OFF_gc = (0x00<<0) ; Interrupt disabled
                                 .equ AC_WINTLVL_LO_gc = (0x01<<0) ; Low priority
                                 .equ AC_WINTLVL_MED_gc = (0x02<<0) ; Medium priority
                                 .equ AC_WINTLVL_HI_gc = (0x03<<0) ; High priority
                                 
                                 ; Window mode state
                                 .equ AC_WSTATE_ABOVE_gc = (0x00<<6) ; Signal above window
                                 .equ AC_WSTATE_INSIDE_gc = (0x01<<6) ; Signal inside window
                                 .equ AC_WSTATE_BELOW_gc = (0x02<<6) ; Signal below window
                                 
                                 
                                 ;***************************************************************************
                                 ;** RTC - Real-Time Counter
                                 ;***************************************************************************/
                                 
                                 ; RTC_CTRL masks
                                 .equ RTC_PRESCALER_gm = 0x07 ; Prescaling Factor group mask
                                 .equ RTC_PRESCALER_gp = 0 ; Prescaling Factor group position
                                 .equ RTC_PRESCALER0_bm = (1<<0) ; Prescaling Factor bit 0 mask
                                 .equ RTC_PRESCALER0_bp = 0 ; Prescaling Factor bit 0 position
                                 .equ RTC_PRESCALER1_bm = (1<<1) ; Prescaling Factor bit 1 mask
                                 .equ RTC_PRESCALER1_bp = 1 ; Prescaling Factor bit 1 position
                                 .equ RTC_PRESCALER2_bm = (1<<2) ; Prescaling Factor bit 2 mask
                                 .equ RTC_PRESCALER2_bp = 2 ; Prescaling Factor bit 2 position
                                 
                                 ; RTC_STATUS masks
                                 .equ RTC_SYNCBUSY_bm = 0x01 ; Synchronization Busy Flag bit mask
                                 .equ RTC_SYNCBUSY_bp = 0 ; Synchronization Busy Flag bit position
                                 
                                 ; RTC_INTCTRL masks
                                 .equ RTC_COMPINTLVL_gm = 0x0C ; Compare Match Interrupt Level group mask
                                 .equ RTC_COMPINTLVL_gp = 2 ; Compare Match Interrupt Level group position
                                 .equ RTC_COMPINTLVL0_bm = (1<<2) ; Compare Match Interrupt Level bit 0 mask
                                 .equ RTC_COMPINTLVL0_bp = 2 ; Compare Match Interrupt Level bit 0 position
                                 .equ RTC_COMPINTLVL1_bm = (1<<3) ; Compare Match Interrupt Level bit 1 mask
                                 .equ RTC_COMPINTLVL1_bp = 3 ; Compare Match Interrupt Level bit 1 position
                                 .equ RTC_OVFINTLVL_gm = 0x03 ; Overflow Interrupt Level group mask
                                 .equ RTC_OVFINTLVL_gp = 0 ; Overflow Interrupt Level group position
                                 .equ RTC_OVFINTLVL0_bm = (1<<0) ; Overflow Interrupt Level bit 0 mask
                                 .equ RTC_OVFINTLVL0_bp = 0 ; Overflow Interrupt Level bit 0 position
                                 .equ RTC_OVFINTLVL1_bm = (1<<1) ; Overflow Interrupt Level bit 1 mask
                                 .equ RTC_OVFINTLVL1_bp = 1 ; Overflow Interrupt Level bit 1 position
                                 
                                 ; RTC_INTFLAGS masks
                                 .equ RTC_COMPIF_bm = 0x02 ; Compare Match Interrupt Flag bit mask
                                 .equ RTC_COMPIF_bp = 1 ; Compare Match Interrupt Flag bit position
                                 .equ RTC_OVFIF_bm = 0x01 ; Overflow Interrupt Flag bit mask
                                 .equ RTC_OVFIF_bp = 0 ; Overflow Interrupt Flag bit position
                                  
                                 ; Prescaler Factor
                                 .equ RTC_PRESCALER_OFF_gc = (0x00<<0) ; RTC Off
                                 .equ RTC_PRESCALER_DIV1_gc = (0x01<<0) ; RTC Clock
                                 .equ RTC_PRESCALER_DIV2_gc = (0x02<<0) ; RTC Clock / 2
                                 .equ RTC_PRESCALER_DIV8_gc = (0x03<<0) ; RTC Clock / 8
                                 .equ RTC_PRESCALER_DIV16_gc = (0x04<<0) ; RTC Clock / 16
                                 .equ RTC_PRESCALER_DIV64_gc = (0x05<<0) ; RTC Clock / 64
                                 .equ RTC_PRESCALER_DIV256_gc = (0x06<<0) ; RTC Clock / 256
                                 .equ RTC_PRESCALER_DIV1024_gc = (0x07<<0) ; RTC Clock / 1024
                                 
                                 ; Compare Interrupt level
                                 .equ RTC_COMPINTLVL_OFF_gc = (0x00<<2) ; Interrupt Disabled
                                 .equ RTC_COMPINTLVL_LO_gc = (0x01<<2) ; Low Level
                                 .equ RTC_COMPINTLVL_MED_gc = (0x02<<2) ; Medium Level
                                 .equ RTC_COMPINTLVL_HI_gc = (0x03<<2) ; High Level
                                 
                                 ; Overflow Interrupt level
                                 .equ RTC_OVFINTLVL_OFF_gc = (0x00<<0) ; Interrupt Disabled
                                 .equ RTC_OVFINTLVL_LO_gc = (0x01<<0) ; Low Level
                                 .equ RTC_OVFINTLVL_MED_gc = (0x02<<0) ; Medium Level
                                 .equ RTC_OVFINTLVL_HI_gc = (0x03<<0) ; High Level
                                 
                                 
                                 ;***************************************************************************
                                 ;** EBI - External Bus Interface
                                 ;***************************************************************************/
                                 
                                 ; EBI_CS_CTRLA masks
                                 .equ EBI_CS_ASPACE_gm = 0x7C ; Address Space group mask
                                 .equ EBI_CS_ASPACE_gp = 2 ; Address Space group position
                                 .equ EBI_CS_ASPACE0_bm = (1<<2) ; Address Space bit 0 mask
                                 .equ EBI_CS_ASPACE0_bp = 2 ; Address Space bit 0 position
                                 .equ EBI_CS_ASPACE1_bm = (1<<3) ; Address Space bit 1 mask
                                 .equ EBI_CS_ASPACE1_bp = 3 ; Address Space bit 1 position
                                 .equ EBI_CS_ASPACE2_bm = (1<<4) ; Address Space bit 2 mask
                                 .equ EBI_CS_ASPACE2_bp = 4 ; Address Space bit 2 position
                                 .equ EBI_CS_ASPACE3_bm = (1<<5) ; Address Space bit 3 mask
                                 .equ EBI_CS_ASPACE3_bp = 5 ; Address Space bit 3 position
                                 .equ EBI_CS_ASPACE4_bm = (1<<6) ; Address Space bit 4 mask
                                 .equ EBI_CS_ASPACE4_bp = 6 ; Address Space bit 4 position
                                 .equ EBI_CS_MODE_gm = 0x03 ; Memory Mode group mask
                                 .equ EBI_CS_MODE_gp = 0 ; Memory Mode group position
                                 .equ EBI_CS_MODE0_bm = (1<<0) ; Memory Mode bit 0 mask
                                 .equ EBI_CS_MODE0_bp = 0 ; Memory Mode bit 0 position
                                 .equ EBI_CS_MODE1_bm = (1<<1) ; Memory Mode bit 1 mask
                                 .equ EBI_CS_MODE1_bp = 1 ; Memory Mode bit 1 position
                                 
                                 ; EBI_CS_CTRLB masks
                                 .equ EBI_CS_SRWS_gm = 0x07 ; SRAM Wait State Cycles group mask
                                 .equ EBI_CS_SRWS_gp = 0 ; SRAM Wait State Cycles group position
                                 .equ EBI_CS_SRWS0_bm = (1<<0) ; SRAM Wait State Cycles bit 0 mask
                                 .equ EBI_CS_SRWS0_bp = 0 ; SRAM Wait State Cycles bit 0 position
                                 .equ EBI_CS_SRWS1_bm = (1<<1) ; SRAM Wait State Cycles bit 1 mask
                                 .equ EBI_CS_SRWS1_bp = 1 ; SRAM Wait State Cycles bit 1 position
                                 .equ EBI_CS_SRWS2_bm = (1<<2) ; SRAM Wait State Cycles bit 2 mask
                                 .equ EBI_CS_SRWS2_bp = 2 ; SRAM Wait State Cycles bit 2 position
                                 .equ EBI_CS_SDINITDONE_bm = 0x80 ; SDRAM Initialization Done bit mask
                                 .equ EBI_CS_SDINITDONE_bp = 7 ; SDRAM Initialization Done bit position
                                 .equ EBI_CS_SDSREN_bm = 0x04 ; SDRAM Self-refresh Enable bit mask
                                 .equ EBI_CS_SDSREN_bp = 2 ; SDRAM Self-refresh Enable bit position
                                 .equ EBI_CS_SDMODE_gm = 0x03 ; SDRAM Mode group mask
                                 .equ EBI_CS_SDMODE_gp = 0 ; SDRAM Mode group position
                                 .equ EBI_CS_SDMODE0_bm = (1<<0) ; SDRAM Mode bit 0 mask
                                 .equ EBI_CS_SDMODE0_bp = 0 ; SDRAM Mode bit 0 position
                                 .equ EBI_CS_SDMODE1_bm = (1<<1) ; SDRAM Mode bit 1 mask
                                 .equ EBI_CS_SDMODE1_bp = 1 ; SDRAM Mode bit 1 position
                                 
                                 ; EBI_CTRL masks
                                 .equ EBI_SDDATAW_gm = 0xC0 ; SDRAM Data Width Setting group mask
                                 .equ EBI_SDDATAW_gp = 6 ; SDRAM Data Width Setting group position
                                 .equ EBI_SDDATAW0_bm = (1<<6) ; SDRAM Data Width Setting bit 0 mask
                                 .equ EBI_SDDATAW0_bp = 6 ; SDRAM Data Width Setting bit 0 position
                                 .equ EBI_SDDATAW1_bm = (1<<7) ; SDRAM Data Width Setting bit 1 mask
                                 .equ EBI_SDDATAW1_bp = 7 ; SDRAM Data Width Setting bit 1 position
                                 .equ EBI_LPCMODE_gm = 0x30 ; SRAM LPC Mode group mask
                                 .equ EBI_LPCMODE_gp = 4 ; SRAM LPC Mode group position
                                 .equ EBI_LPCMODE0_bm = (1<<4) ; SRAM LPC Mode bit 0 mask
                                 .equ EBI_LPCMODE0_bp = 4 ; SRAM LPC Mode bit 0 position
                                 .equ EBI_LPCMODE1_bm = (1<<5) ; SRAM LPC Mode bit 1 mask
                                 .equ EBI_LPCMODE1_bp = 5 ; SRAM LPC Mode bit 1 position
                                 .equ EBI_SRMODE_gm = 0x0C ; SRAM Mode group mask
                                 .equ EBI_SRMODE_gp = 2 ; SRAM Mode group position
                                 .equ EBI_SRMODE0_bm = (1<<2) ; SRAM Mode bit 0 mask
                                 .equ EBI_SRMODE0_bp = 2 ; SRAM Mode bit 0 position
                                 .equ EBI_SRMODE1_bm = (1<<3) ; SRAM Mode bit 1 mask
                                 .equ EBI_SRMODE1_bp = 3 ; SRAM Mode bit 1 position
                                 .equ EBI_IFMODE_gm = 0x03 ; Interface Mode group mask
                                 .equ EBI_IFMODE_gp = 0 ; Interface Mode group position
                                 .equ EBI_IFMODE0_bm = (1<<0) ; Interface Mode bit 0 mask
                                 .equ EBI_IFMODE0_bp = 0 ; Interface Mode bit 0 position
                                 .equ EBI_IFMODE1_bm = (1<<1) ; Interface Mode bit 1 mask
                                 .equ EBI_IFMODE1_bp = 1 ; Interface Mode bit 1 position
                                 
                                 ; EBI_SDRAMCTRLA masks
                                 .equ EBI_SDCAS_bm = 0x08 ; SDRAM CAS Latency Setting bit mask
                                 .equ EBI_SDCAS_bp = 3 ; SDRAM CAS Latency Setting bit position
                                 .equ EBI_SDROW_bm = 0x04 ; SDRAM ROW Bits Setting bit mask
                                 .equ EBI_SDROW_bp = 2 ; SDRAM ROW Bits Setting bit position
                                 .equ EBI_SDCOL_gm = 0x03 ; SDRAM Column Bits Setting group mask
                                 .equ EBI_SDCOL_gp = 0 ; SDRAM Column Bits Setting group position
                                 .equ EBI_SDCOL0_bm = (1<<0) ; SDRAM Column Bits Setting bit 0 mask
                                 .equ EBI_SDCOL0_bp = 0 ; SDRAM Column Bits Setting bit 0 position
                                 .equ EBI_SDCOL1_bm = (1<<1) ; SDRAM Column Bits Setting bit 1 mask
                                 .equ EBI_SDCOL1_bp = 1 ; SDRAM Column Bits Setting bit 1 position
                                 
                                 ; EBI_SDRAMCTRLB masks
                                 .equ EBI_MRDLY_gm = 0xC0 ; SDRAM Mode Register Delay group mask
                                 .equ EBI_MRDLY_gp = 6 ; SDRAM Mode Register Delay group position
                                 .equ EBI_MRDLY0_bm = (1<<6) ; SDRAM Mode Register Delay bit 0 mask
                                 .equ EBI_MRDLY0_bp = 6 ; SDRAM Mode Register Delay bit 0 position
                                 .equ EBI_MRDLY1_bm = (1<<7) ; SDRAM Mode Register Delay bit 1 mask
                                 .equ EBI_MRDLY1_bp = 7 ; SDRAM Mode Register Delay bit 1 position
                                 .equ EBI_ROWCYCDLY_gm = 0x38 ; SDRAM Row Cycle Delay group mask
                                 .equ EBI_ROWCYCDLY_gp = 3 ; SDRAM Row Cycle Delay group position
                                 .equ EBI_ROWCYCDLY0_bm = (1<<3) ; SDRAM Row Cycle Delay bit 0 mask
                                 .equ EBI_ROWCYCDLY0_bp = 3 ; SDRAM Row Cycle Delay bit 0 position
                                 .equ EBI_ROWCYCDLY1_bm = (1<<4) ; SDRAM Row Cycle Delay bit 1 mask
                                 .equ EBI_ROWCYCDLY1_bp = 4 ; SDRAM Row Cycle Delay bit 1 position
                                 .equ EBI_ROWCYCDLY2_bm = (1<<5) ; SDRAM Row Cycle Delay bit 2 mask
                                 .equ EBI_ROWCYCDLY2_bp = 5 ; SDRAM Row Cycle Delay bit 2 position
                                 .equ EBI_RPDLY_gm = 0x07 ; SDRAM Row-to-Precharge Delay group mask
                                 .equ EBI_RPDLY_gp = 0 ; SDRAM Row-to-Precharge Delay group position
                                 .equ EBI_RPDLY0_bm = (1<<0) ; SDRAM Row-to-Precharge Delay bit 0 mask
                                 .equ EBI_RPDLY0_bp = 0 ; SDRAM Row-to-Precharge Delay bit 0 position
                                 .equ EBI_RPDLY1_bm = (1<<1) ; SDRAM Row-to-Precharge Delay bit 1 mask
                                 .equ EBI_RPDLY1_bp = 1 ; SDRAM Row-to-Precharge Delay bit 1 position
                                 .equ EBI_RPDLY2_bm = (1<<2) ; SDRAM Row-to-Precharge Delay bit 2 mask
                                 .equ EBI_RPDLY2_bp = 2 ; SDRAM Row-to-Precharge Delay bit 2 position
                                 
                                 ; EBI_SDRAMCTRLC masks
                                 .equ EBI_WRDLY_gm = 0xC0 ; SDRAM Write Recovery Delay group mask
                                 .equ EBI_WRDLY_gp = 6 ; SDRAM Write Recovery Delay group position
                                 .equ EBI_WRDLY0_bm = (1<<6) ; SDRAM Write Recovery Delay bit 0 mask
                                 .equ EBI_WRDLY0_bp = 6 ; SDRAM Write Recovery Delay bit 0 position
                                 .equ EBI_WRDLY1_bm = (1<<7) ; SDRAM Write Recovery Delay bit 1 mask
                                 .equ EBI_WRDLY1_bp = 7 ; SDRAM Write Recovery Delay bit 1 position
                                 .equ EBI_ESRDLY_gm = 0x38 ; SDRAM Exit-Self-refresh-to-Active Delay group mask
                                 .equ EBI_ESRDLY_gp = 3 ; SDRAM Exit-Self-refresh-to-Active Delay group position
                                 .equ EBI_ESRDLY0_bm = (1<<3) ; SDRAM Exit-Self-refresh-to-Active Delay bit 0 mask
                                 .equ EBI_ESRDLY0_bp = 3 ; SDRAM Exit-Self-refresh-to-Active Delay bit 0 position
                                 .equ EBI_ESRDLY1_bm = (1<<4) ; SDRAM Exit-Self-refresh-to-Active Delay bit 1 mask
                                 .equ EBI_ESRDLY1_bp = 4 ; SDRAM Exit-Self-refresh-to-Active Delay bit 1 position
                                 .equ EBI_ESRDLY2_bm = (1<<5) ; SDRAM Exit-Self-refresh-to-Active Delay bit 2 mask
                                 .equ EBI_ESRDLY2_bp = 5 ; SDRAM Exit-Self-refresh-to-Active Delay bit 2 position
                                 .equ EBI_ROWCOLDLY_gm = 0x07 ; SDRAM Row-to-Column Delay group mask
                                 .equ EBI_ROWCOLDLY_gp = 0 ; SDRAM Row-to-Column Delay group position
                                 .equ EBI_ROWCOLDLY0_bm = (1<<0) ; SDRAM Row-to-Column Delay bit 0 mask
                                 .equ EBI_ROWCOLDLY0_bp = 0 ; SDRAM Row-to-Column Delay bit 0 position
                                 .equ EBI_ROWCOLDLY1_bm = (1<<1) ; SDRAM Row-to-Column Delay bit 1 mask
                                 .equ EBI_ROWCOLDLY1_bp = 1 ; SDRAM Row-to-Column Delay bit 1 position
                                 .equ EBI_ROWCOLDLY2_bm = (1<<2) ; SDRAM Row-to-Column Delay bit 2 mask
                                 .equ EBI_ROWCOLDLY2_bp = 2 ; SDRAM Row-to-Column Delay bit 2 position
                                  
                                 ; Chip Select adress space
                                 .equ EBI_CS_ASPACE_256B_gc = (0x00<<2) ; 256 bytes
                                 .equ EBI_CS_ASPACE_512B_gc = (0x01<<2) ; 512 bytes
                                 .equ EBI_CS_ASPACE_1KB_gc = (0x02<<2) ; 1K bytes
                                 .equ EBI_CS_ASPACE_2KB_gc = (0x03<<2) ; 2K bytes
                                 .equ EBI_CS_ASPACE_4KB_gc = (0x04<<2) ; 4K bytes
                                 .equ EBI_CS_ASPACE_8KB_gc = (0x05<<2) ; 8K bytes
                                 .equ EBI_CS_ASPACE_16KB_gc = (0x06<<2) ; 16K bytes
                                 .equ EBI_CS_ASPACE_32KB_gc = (0x07<<2) ; 32K bytes
                                 .equ EBI_CS_ASPACE_64KB_gc = (0x08<<2) ; 64K bytes
                                 .equ EBI_CS_ASPACE_128KB_gc = (0x09<<2) ; 128K bytes
                                 .equ EBI_CS_ASPACE_256KB_gc = (0x0A<<2) ; 256K bytes
                                 .equ EBI_CS_ASPACE_512KB_gc = (0x0B<<2) ; 512K bytes
                                 .equ EBI_CS_ASPACE_1MB_gc = (0x0C<<2) ; 1M bytes
                                 .equ EBI_CS_ASPACE_2MB_gc = (0x0D<<2) ; 2M bytes
                                 .equ EBI_CS_ASPACE_4MB_gc = (0x0E<<2) ; 4M bytes
                                 .equ EBI_CS_ASPACE_8MB_gc = (0x0F<<2) ; 8M bytes
                                 .equ EBI_CS_ASPACE_16M_gc = (0x10<<2) ; 16M bytes
                                 
                                 ; SRAM Wait State Selection
                                 .equ EBI_CS_SRWS_0CLK_gc = (0x00<<0) ; 0 cycles
                                 .equ EBI_CS_SRWS_1CLK_gc = (0x01<<0) ; 1 cycle
                                 .equ EBI_CS_SRWS_2CLK_gc = (0x02<<0) ; 2 cycles
                                 .equ EBI_CS_SRWS_3CLK_gc = (0x03<<0) ; 3 cycles
                                 .equ EBI_CS_SRWS_4CLK_gc = (0x04<<0) ; 4 cycles
                                 .equ EBI_CS_SRWS_5CLK_gc = (0x05<<0) ; 5 cycles
                                 .equ EBI_CS_SRWS_6CLK_gc = (0x06<<0) ; 6 cycles
                                 .equ EBI_CS_SRWS_7CLK_gc = (0x07<<0) ; 7 cycles
                                 
                                 ; Chip Select address mode
                                 .equ EBI_CS_MODE_DISABLED_gc = (0x00<<0) ; Chip Select Disabled
                                 .equ EBI_CS_MODE_SRAM_gc = (0x01<<0) ; Chip Select in SRAM mode
                                 .equ EBI_CS_MODE_LPC_gc = (0x02<<0) ; Chip Select in SRAM LPC mode
                                 .equ EBI_CS_MODE_SDRAM_gc = (0x03<<0) ; Chip Select in SDRAM mode
                                 
                                 ; Chip Select SDRAM mode
                                 .equ EBI_CS_SDMODE_NORMAL_gc = (0x00<<0) ; Normal mode
                                 .equ EBI_CS_SDMODE_LOAD_gc = (0x01<<0) ; Load Mode Register command mode
                                 
                                 ; 
                                 .equ EBI_SDDATAW_4BIT_gc = (0x00<<6) ; 4-bit data bus
                                 .equ EBI_SDDATAW_8BIT_gc = (0x01<<6) ; 8-bit data bus
                                 
                                 ; 
                                 .equ EBI_LPCMODE_ALE1_gc = (0x00<<4) ; Data muxed with addr byte 0
                                 .equ EBI_LPCMODE_ALE12_gc = (0x02<<4) ; Data muxed with addr byte 0 and 1
                                 
                                 ; 
                                 .equ EBI_SRMODE_ALE1_gc = (0x00<<2) ; Addr byte 0 muxed with 1
                                 .equ EBI_SRMODE_ALE2_gc = (0x01<<2) ; Addr byte 0 muxed with 2
                                 .equ EBI_SRMODE_ALE12_gc = (0x02<<2) ; Addr byte 0 muxed with 1 and 2
                                 .equ EBI_SRMODE_NOALE_gc = (0x03<<2) ; No addr muxing
                                 
                                 ; 
                                 .equ EBI_IFMODE_DISABLED_gc = (0x00<<0) ; EBI Disabled
                                 .equ EBI_IFMODE_3PORT_gc = (0x01<<0) ; 3-port mode
                                 .equ EBI_IFMODE_4PORT_gc = (0x02<<0) ; 4-port mode
                                 .equ EBI_IFMODE_2PORT_gc = (0x03<<0) ; 2-port mode
                                 
                                 ; 
                                 .equ EBI_SDCOL_8BIT_gc = (0x00<<0) ; 8 column bits
                                 .equ EBI_SDCOL_9BIT_gc = (0x01<<0) ; 9 column bits
                                 .equ EBI_SDCOL_10BIT_gc = (0x02<<0) ; 10 column bits
                                 .equ EBI_SDCOL_11BIT_gc = (0x03<<0) ; 11 column bits
                                 
                                 ; SDRAM Load Mode to Active delay
                                 .equ EBI_MRDLY_0CLK_gc = (0x00<<6) ; 0 cycles
                                 .equ EBI_MRDLY_1CLK_gc = (0x01<<6) ; 1 cycle
                                 .equ EBI_MRDLY_2CLK_gc = (0x02<<6) ; 2 cycles
                                 .equ EBI_MRDLY_3CLK_gc = (0x03<<6) ; 3 cycles
                                 
                                 ; SDRAM Row Cycle Delay
                                 .equ EBI_ROWCYCDLY_0CLK_gc = (0x00<<3) ; 0 cycles
                                 .equ EBI_ROWCYCDLY_1CLK_gc = (0x01<<3) ; 1 cycle
                                 .equ EBI_ROWCYCDLY_2CLK_gc = (0x02<<3) ; 2 cycles
                                 .equ EBI_ROWCYCDLY_3CLK_gc = (0x03<<3) ; 3 cycles
                                 .equ EBI_ROWCYCDLY_4CLK_gc = (0x04<<3) ; 4 cycles
                                 .equ EBI_ROWCYCDLY_5CLK_gc = (0x05<<3) ; 5 cycles
                                 .equ EBI_ROWCYCDLY_6CLK_gc = (0x06<<3) ; 6 cycles
                                 .equ EBI_ROWCYCDLY_7CLK_gc = (0x07<<3) ; 7 cycles
                                 
                                 ; SDRAM Row to Precharge Delay
                                 .equ EBI_RPDLY_0CLK_gc = (0x00<<0) ; 0 cycles
                                 .equ EBI_RPDLY_1CLK_gc = (0x01<<0) ; 1 cycle
                                 .equ EBI_RPDLY_2CLK_gc = (0x02<<0) ; 2 cycles
                                 .equ EBI_RPDLY_3CLK_gc = (0x03<<0) ; 3 cycles
                                 .equ EBI_RPDLY_4CLK_gc = (0x04<<0) ; 4 cycles
                                 .equ EBI_RPDLY_5CLK_gc = (0x05<<0) ; 5 cycles
                                 .equ EBI_RPDLY_6CLK_gc = (0x06<<0) ; 6 cycles
                                 .equ EBI_RPDLY_7CLK_gc = (0x07<<0) ; 7 cycles
                                 
                                 ; SDRAM Write Recovery Delay
                                 .equ EBI_WRDLY_0CLK_gc = (0x00<<6) ; 0 cycles
                                 .equ EBI_WRDLY_1CLK_gc = (0x01<<6) ; 1 cycle
                                 .equ EBI_WRDLY_2CLK_gc = (0x02<<6) ; 2 cycles
                                 .equ EBI_WRDLY_3CLK_gc = (0x03<<6) ; 3 cycles
                                 
                                 ; SDRAM Exit Self Refresh to Active Delay
                                 .equ EBI_ESRDLY_0CLK_gc = (0x00<<3) ; 0 cycles
                                 .equ EBI_ESRDLY_1CLK_gc = (0x01<<3) ; 1 cycle
                                 .equ EBI_ESRDLY_2CLK_gc = (0x02<<3) ; 2 cycles
                                 .equ EBI_ESRDLY_3CLK_gc = (0x03<<3) ; 3 cycles
                                 .equ EBI_ESRDLY_4CLK_gc = (0x04<<3) ; 4 cycles
                                 .equ EBI_ESRDLY_5CLK_gc = (0x05<<3) ; 5 cycles
                                 .equ EBI_ESRDLY_6CLK_gc = (0x06<<3) ; 6 cycles
                                 .equ EBI_ESRDLY_7CLK_gc = (0x07<<3) ; 7 cycles
                                 
                                 ; SDRAM Row to Column Delay
                                 .equ EBI_ROWCOLDLY_0CLK_gc = (0x00<<0) ; 0 cycles
                                 .equ EBI_ROWCOLDLY_1CLK_gc = (0x01<<0) ; 1 cycle
                                 .equ EBI_ROWCOLDLY_2CLK_gc = (0x02<<0) ; 2 cycles
                                 .equ EBI_ROWCOLDLY_3CLK_gc = (0x03<<0) ; 3 cycles
                                 .equ EBI_ROWCOLDLY_4CLK_gc = (0x04<<0) ; 4 cycles
                                 .equ EBI_ROWCOLDLY_5CLK_gc = (0x05<<0) ; 5 cycles
                                 .equ EBI_ROWCOLDLY_6CLK_gc = (0x06<<0) ; 6 cycles
                                 .equ EBI_ROWCOLDLY_7CLK_gc = (0x07<<0) ; 7 cycles
                                 
                                 
                                 ;***************************************************************************
                                 ;** TWI - Two-Wire Interface
                                 ;***************************************************************************/
                                 
                                 ; TWI_MASTER_CTRLA masks
                                 .equ TWI_MASTER_INTLVL_gm = 0xC0 ; Interrupt Level group mask
                                 .equ TWI_MASTER_INTLVL_gp = 6 ; Interrupt Level group position
                                 .equ TWI_MASTER_INTLVL0_bm = (1<<6) ; Interrupt Level bit 0 mask
                                 .equ TWI_MASTER_INTLVL0_bp = 6 ; Interrupt Level bit 0 position
                                 .equ TWI_MASTER_INTLVL1_bm = (1<<7) ; Interrupt Level bit 1 mask
                                 .equ TWI_MASTER_INTLVL1_bp = 7 ; Interrupt Level bit 1 position
                                 .equ TWI_MASTER_RIEN_bm = 0x20 ; Read Interrupt Enable bit mask
                                 .equ TWI_MASTER_RIEN_bp = 5 ; Read Interrupt Enable bit position
                                 .equ TWI_MASTER_WIEN_bm = 0x10 ; Write Interrupt Enable bit mask
                                 .equ TWI_MASTER_WIEN_bp = 4 ; Write Interrupt Enable bit position
                                 .equ TWI_MASTER_ENABLE_bm = 0x08 ; Enable TWI Master bit mask
                                 .equ TWI_MASTER_ENABLE_bp = 3 ; Enable TWI Master bit position
                                 
                                 ; TWI_MASTER_CTRLB masks
                                 .equ TWI_MASTER_TIMEOUT_gm = 0x0C ; Inactive Bus Timeout group mask
                                 .equ TWI_MASTER_TIMEOUT_gp = 2 ; Inactive Bus Timeout group position
                                 .equ TWI_MASTER_TIMEOUT0_bm = (1<<2) ; Inactive Bus Timeout bit 0 mask
                                 .equ TWI_MASTER_TIMEOUT0_bp = 2 ; Inactive Bus Timeout bit 0 position
                                 .equ TWI_MASTER_TIMEOUT1_bm = (1<<3) ; Inactive Bus Timeout bit 1 mask
                                 .equ TWI_MASTER_TIMEOUT1_bp = 3 ; Inactive Bus Timeout bit 1 position
                                 .equ TWI_MASTER_QCEN_bm = 0x02 ; Quick Command Enable bit mask
                                 .equ TWI_MASTER_QCEN_bp = 1 ; Quick Command Enable bit position
                                 .equ TWI_MASTER_SMEN_bm = 0x01 ; Smart Mode Enable bit mask
                                 .equ TWI_MASTER_SMEN_bp = 0 ; Smart Mode Enable bit position
                                 
                                 ; TWI_MASTER_CTRLC masks
                                 .equ TWI_MASTER_ACKACT_bm = 0x04 ; Acknowledge Action bit mask
                                 .equ TWI_MASTER_ACKACT_bp = 2 ; Acknowledge Action bit position
                                 .equ TWI_MASTER_CMD_gm = 0x03 ; Command group mask
                                 .equ TWI_MASTER_CMD_gp = 0 ; Command group position
                                 .equ TWI_MASTER_CMD0_bm = (1<<0) ; Command bit 0 mask
                                 .equ TWI_MASTER_CMD0_bp = 0 ; Command bit 0 position
                                 .equ TWI_MASTER_CMD1_bm = (1<<1) ; Command bit 1 mask
                                 .equ TWI_MASTER_CMD1_bp = 1 ; Command bit 1 position
                                 
                                 ; TWI_MASTER_STATUS masks
                                 .equ TWI_MASTER_RIF_bm = 0x80 ; Read Interrupt Flag bit mask
                                 .equ TWI_MASTER_RIF_bp = 7 ; Read Interrupt Flag bit position
                                 .equ TWI_MASTER_WIF_bm = 0x40 ; Write Interrupt Flag bit mask
                                 .equ TWI_MASTER_WIF_bp = 6 ; Write Interrupt Flag bit position
                                 .equ TWI_MASTER_CLKHOLD_bm = 0x20 ; Clock Hold bit mask
                                 .equ TWI_MASTER_CLKHOLD_bp = 5 ; Clock Hold bit position
                                 .equ TWI_MASTER_RXACK_bm = 0x10 ; Received Acknowledge bit mask
                                 .equ TWI_MASTER_RXACK_bp = 4 ; Received Acknowledge bit position
                                 .equ TWI_MASTER_ARBLOST_bm = 0x08 ; Arbitration Lost bit mask
                                 .equ TWI_MASTER_ARBLOST_bp = 3 ; Arbitration Lost bit position
                                 .equ TWI_MASTER_BUSERR_bm = 0x04 ; Bus Error bit mask
                                 .equ TWI_MASTER_BUSERR_bp = 2 ; Bus Error bit position
                                 .equ TWI_MASTER_BUSSTATE_gm = 0x03 ; Bus State group mask
                                 .equ TWI_MASTER_BUSSTATE_gp = 0 ; Bus State group position
                                 .equ TWI_MASTER_BUSSTATE0_bm = (1<<0) ; Bus State bit 0 mask
                                 .equ TWI_MASTER_BUSSTATE0_bp = 0 ; Bus State bit 0 position
                                 .equ TWI_MASTER_BUSSTATE1_bm = (1<<1) ; Bus State bit 1 mask
                                 .equ TWI_MASTER_BUSSTATE1_bp = 1 ; Bus State bit 1 position
                                 
                                 ; TWI_SLAVE_CTRLA masks
                                 .equ TWI_SLAVE_INTLVL_gm = 0xC0 ; Interrupt Level group mask
                                 .equ TWI_SLAVE_INTLVL_gp = 6 ; Interrupt Level group position
                                 .equ TWI_SLAVE_INTLVL0_bm = (1<<6) ; Interrupt Level bit 0 mask
                                 .equ TWI_SLAVE_INTLVL0_bp = 6 ; Interrupt Level bit 0 position
                                 .equ TWI_SLAVE_INTLVL1_bm = (1<<7) ; Interrupt Level bit 1 mask
                                 .equ TWI_SLAVE_INTLVL1_bp = 7 ; Interrupt Level bit 1 position
                                 .equ TWI_SLAVE_DIEN_bm = 0x20 ; Data Interrupt Enable bit mask
                                 .equ TWI_SLAVE_DIEN_bp = 5 ; Data Interrupt Enable bit position
                                 .equ TWI_SLAVE_APIEN_bm = 0x10 ; Address/Stop Interrupt Enable bit mask
                                 .equ TWI_SLAVE_APIEN_bp = 4 ; Address/Stop Interrupt Enable bit position
                                 .equ TWI_SLAVE_ENABLE_bm = 0x08 ; Enable TWI Slave bit mask
                                 .equ TWI_SLAVE_ENABLE_bp = 3 ; Enable TWI Slave bit position
                                 .equ TWI_SLAVE_PIEN_bm = 0x04 ; Stop Interrupt Enable bit mask
                                 .equ TWI_SLAVE_PIEN_bp = 2 ; Stop Interrupt Enable bit position
                                 .equ TWI_SLAVE_PMEN_bm = 0x02 ; Promiscuous Mode Enable bit mask
                                 .equ TWI_SLAVE_PMEN_bp = 1 ; Promiscuous Mode Enable bit position
                                 .equ TWI_SLAVE_SMEN_bm = 0x01 ; Smart Mode Enable bit mask
                                 .equ TWI_SLAVE_SMEN_bp = 0 ; Smart Mode Enable bit position
                                 
                                 ; TWI_SLAVE_CTRLB masks
                                 .equ TWI_SLAVE_ACKACT_bm = 0x04 ; Acknowledge Action bit mask
                                 .equ TWI_SLAVE_ACKACT_bp = 2 ; Acknowledge Action bit position
                                 .equ TWI_SLAVE_CMD_gm = 0x03 ; Command group mask
                                 .equ TWI_SLAVE_CMD_gp = 0 ; Command group position
                                 .equ TWI_SLAVE_CMD0_bm = (1<<0) ; Command bit 0 mask
                                 .equ TWI_SLAVE_CMD0_bp = 0 ; Command bit 0 position
                                 .equ TWI_SLAVE_CMD1_bm = (1<<1) ; Command bit 1 mask
                                 .equ TWI_SLAVE_CMD1_bp = 1 ; Command bit 1 position
                                 
                                 ; TWI_SLAVE_STATUS masks
                                 .equ TWI_SLAVE_DIF_bm = 0x80 ; Data Interrupt Flag bit mask
                                 .equ TWI_SLAVE_DIF_bp = 7 ; Data Interrupt Flag bit position
                                 .equ TWI_SLAVE_APIF_bm = 0x40 ; Address/Stop Interrupt Flag bit mask
                                 .equ TWI_SLAVE_APIF_bp = 6 ; Address/Stop Interrupt Flag bit position
                                 .equ TWI_SLAVE_CLKHOLD_bm = 0x20 ; Clock Hold bit mask
                                 .equ TWI_SLAVE_CLKHOLD_bp = 5 ; Clock Hold bit position
                                 .equ TWI_SLAVE_RXACK_bm = 0x10 ; Received Acknowledge bit mask
                                 .equ TWI_SLAVE_RXACK_bp = 4 ; Received Acknowledge bit position
                                 .equ TWI_SLAVE_COLL_bm = 0x08 ; Collision bit mask
                                 .equ TWI_SLAVE_COLL_bp = 3 ; Collision bit position
                                 .equ TWI_SLAVE_BUSERR_bm = 0x04 ; Bus Error bit mask
                                 .equ TWI_SLAVE_BUSERR_bp = 2 ; Bus Error bit position
                                 .equ TWI_SLAVE_DIR_bm = 0x02 ; Read/Write Direction bit mask
                                 .equ TWI_SLAVE_DIR_bp = 1 ; Read/Write Direction bit position
                                 .equ TWI_SLAVE_AP_bm = 0x01 ; Slave Address or Stop bit mask
                                 .equ TWI_SLAVE_AP_bp = 0 ; Slave Address or Stop bit position
                                 
                                 ; TWI_SLAVE_ADDRMASK masks
                                 .equ TWI_SLAVE_ADDRMASK_gm = 0xFE ; Address Mask group mask
                                 .equ TWI_SLAVE_ADDRMASK_gp = 1 ; Address Mask group position
                                 .equ TWI_SLAVE_ADDRMASK0_bm = (1<<1) ; Address Mask bit 0 mask
                                 .equ TWI_SLAVE_ADDRMASK0_bp = 1 ; Address Mask bit 0 position
                                 .equ TWI_SLAVE_ADDRMASK1_bm = (1<<2) ; Address Mask bit 1 mask
                                 .equ TWI_SLAVE_ADDRMASK1_bp = 2 ; Address Mask bit 1 position
                                 .equ TWI_SLAVE_ADDRMASK2_bm = (1<<3) ; Address Mask bit 2 mask
                                 .equ TWI_SLAVE_ADDRMASK2_bp = 3 ; Address Mask bit 2 position
                                 .equ TWI_SLAVE_ADDRMASK3_bm = (1<<4) ; Address Mask bit 3 mask
                                 .equ TWI_SLAVE_ADDRMASK3_bp = 4 ; Address Mask bit 3 position
                                 .equ TWI_SLAVE_ADDRMASK4_bm = (1<<5) ; Address Mask bit 4 mask
                                 .equ TWI_SLAVE_ADDRMASK4_bp = 5 ; Address Mask bit 4 position
                                 .equ TWI_SLAVE_ADDRMASK5_bm = (1<<6) ; Address Mask bit 5 mask
                                 .equ TWI_SLAVE_ADDRMASK5_bp = 6 ; Address Mask bit 5 position
                                 .equ TWI_SLAVE_ADDRMASK6_bm = (1<<7) ; Address Mask bit 6 mask
                                 .equ TWI_SLAVE_ADDRMASK6_bp = 7 ; Address Mask bit 6 position
                                 .equ TWI_SLAVE_ADDREN_bm = 0x01 ; Address Enable bit mask
                                 .equ TWI_SLAVE_ADDREN_bp = 0 ; Address Enable bit position
                                 
                                 ; TWI_CTRL masks
                                 .equ TWI_SDAHOLD_bm = 0x02 ; SDA Hold Time Enable bit mask
                                 .equ TWI_SDAHOLD_bp = 1 ; SDA Hold Time Enable bit position
                                 .equ TWI_EDIEN_bm = 0x01 ; External Driver Interface Enable bit mask
                                 .equ TWI_EDIEN_bp = 0 ; External Driver Interface Enable bit position
                                  
                                 ; Master Interrupt Level
                                 .equ TWI_MASTER_INTLVL_OFF_gc = (0x00<<6) ; Interrupt Disabled
                                 .equ TWI_MASTER_INTLVL_LO_gc = (0x01<<6) ; Low Level
                                 .equ TWI_MASTER_INTLVL_MED_gc = (0x02<<6) ; Medium Level
                                 .equ TWI_MASTER_INTLVL_HI_gc = (0x03<<6) ; High Level
                                 
                                 ; Inactive Timeout
                                 .equ TWI_MASTER_TIMEOUT_DISABLED_gc = (0x00<<2) ; Bus Timeout Disabled
                                 .equ TWI_MASTER_TIMEOUT_50US_gc = (0x01<<2) ; 50 Microseconds
                                 .equ TWI_MASTER_TIMEOUT_100US_gc = (0x02<<2) ; 100 Microseconds
                                 .equ TWI_MASTER_TIMEOUT_200US_gc = (0x03<<2) ; 200 Microseconds
                                 
                                 ; Master Command
                                 .equ TWI_MASTER_CMD_NOACT_gc = (0x00<<0) ; No Action
                                 .equ TWI_MASTER_CMD_REPSTART_gc = (0x01<<0) ; Issue Repeated Start Condition
                                 .equ TWI_MASTER_CMD_RECVTRANS_gc = (0x02<<0) ; Receive or Transmit Data
                                 .equ TWI_MASTER_CMD_STOP_gc = (0x03<<0) ; Issue Stop Condition
                                 
                                 ; Master Bus State
                                 .equ TWI_MASTER_BUSSTATE_UNKNOWN_gc = (0x00<<0) ; Unknown Bus State
                                 .equ TWI_MASTER_BUSSTATE_IDLE_gc = (0x01<<0) ; Bus is Idle
                                 .equ TWI_MASTER_BUSSTATE_OWNER_gc = (0x02<<0) ; This Module Controls The Bus
                                 .equ TWI_MASTER_BUSSTATE_BUSY_gc = (0x03<<0) ; The Bus is Busy
                                 
                                 ; Slave Interrupt Level
                                 .equ TWI_SLAVE_INTLVL_OFF_gc = (0x00<<6) ; Interrupt Disabled
                                 .equ TWI_SLAVE_INTLVL_LO_gc = (0x01<<6) ; Low Level
                                 .equ TWI_SLAVE_INTLVL_MED_gc = (0x02<<6) ; Medium Level
                                 .equ TWI_SLAVE_INTLVL_HI_gc = (0x03<<6) ; High Level
                                 
                                 ; Slave Command
                                 .equ TWI_SLAVE_CMD_NOACT_gc = (0x00<<0) ; No Action
                                 .equ TWI_SLAVE_CMD_COMPTRANS_gc = (0x02<<0) ; Used To Complete a Transaction
                                 .equ TWI_SLAVE_CMD_RESPONSE_gc = (0x03<<0) ; Used in Response to Address/Data Interrupt
                                 
                                 
                                 ;***************************************************************************
                                 ;** USB - USB
                                 ;***************************************************************************/
                                 
                                 ; USB_EP_STATUS masks
                                 .equ USB_EP_STALLF_bm = 0x80 ; Endpoint Stall Flag bit mask
                                 .equ USB_EP_STALLF_bp = 7 ; Endpoint Stall Flag bit position
                                 .equ USB_EP_CRC_bm = 0x80 ; CRC Error Flag bit mask
                                 .equ USB_EP_CRC_bp = 7 ; CRC Error Flag bit position
                                 .equ USB_EP_UNF_bm = 0x40 ; Underflow Enpoint FLag bit mask
                                 .equ USB_EP_UNF_bp = 6 ; Underflow Enpoint FLag bit position
                                 .equ USB_EP_OVF_bm = 0x40 ; Overflow Enpoint Flag for Output Endpoints bit mask
                                 .equ USB_EP_OVF_bp = 6 ; Overflow Enpoint Flag for Output Endpoints bit position
                                 .equ USB_EP_TRNCOMPL0_bm = 0x20 ; Transaction Complete 0 Flag bit mask
                                 .equ USB_EP_TRNCOMPL0_bp = 5 ; Transaction Complete 0 Flag bit position
                                 .equ USB_EP_TRNCOMPL1_bm = 0x10 ; Transaction Complete 1 Flag bit mask
                                 .equ USB_EP_TRNCOMPL1_bp = 4 ; Transaction Complete 1 Flag bit position
                                 .equ USB_EP_SETUP_bm = 0x10 ; SETUP Transaction Complete Flag bit mask
                                 .equ USB_EP_SETUP_bp = 4 ; SETUP Transaction Complete Flag bit position
                                 .equ USB_EP_BANK_bm = 0x08 ; Bank Select bit mask
                                 .equ USB_EP_BANK_bp = 3 ; Bank Select bit position
                                 .equ USB_EP_BUSNACK1_bm = 0x04 ; Data Buffer 1 Not Acknowledge bit mask
                                 .equ USB_EP_BUSNACK1_bp = 2 ; Data Buffer 1 Not Acknowledge bit position
                                 .equ USB_EP_BUSNACK0_bm = 0x02 ; Data Buffer 0 Not Acknowledge bit mask
                                 .equ USB_EP_BUSNACK0_bp = 1 ; Data Buffer 0 Not Acknowledge bit position
                                 .equ USB_EP_TOGGLE_bm = 0x01 ; Data Toggle bit mask
                                 .equ USB_EP_TOGGLE_bp = 0 ; Data Toggle bit position
                                 
                                 ; USB_EP_CTRL masks
                                 .equ USB_EP_TYPE_gm = 0xC0 ; Endpoint Type group mask
                                 .equ USB_EP_TYPE_gp = 6 ; Endpoint Type group position
                                 .equ USB_EP_TYPE0_bm = (1<<6) ; Endpoint Type bit 0 mask
                                 .equ USB_EP_TYPE0_bp = 6 ; Endpoint Type bit 0 position
                                 .equ USB_EP_TYPE1_bm = (1<<7) ; Endpoint Type bit 1 mask
                                 .equ USB_EP_TYPE1_bp = 7 ; Endpoint Type bit 1 position
                                 .equ USB_EP_MULTIPKT_bm = 0x20 ; Multi Packet Transfer Enable bit mask
                                 .equ USB_EP_MULTIPKT_bp = 5 ; Multi Packet Transfer Enable bit position
                                 .equ USB_EP_PINGPONG_bm = 0x10 ; Ping-Pong Enable bit mask
                                 .equ USB_EP_PINGPONG_bp = 4 ; Ping-Pong Enable bit position
                                 .equ USB_EP_INTDSBL_bm = 0x08 ; Interrupt Disable bit mask
                                 .equ USB_EP_INTDSBL_bp = 3 ; Interrupt Disable bit position
                                 .equ USB_EP_STALL_bm = 0x04 ; Data Stall bit mask
                                 .equ USB_EP_STALL_bp = 2 ; Data Stall bit position
                                 .equ USB_EP_BUFSIZE_gm = 0x07 ; Data Buffer Size group mask
                                 .equ USB_EP_BUFSIZE_gp = 0 ; Data Buffer Size group position
                                 .equ USB_EP_BUFSIZE0_bm = (1<<0) ; Data Buffer Size bit 0 mask
                                 .equ USB_EP_BUFSIZE0_bp = 0 ; Data Buffer Size bit 0 position
                                 .equ USB_EP_BUFSIZE1_bm = (1<<1) ; Data Buffer Size bit 1 mask
                                 .equ USB_EP_BUFSIZE1_bp = 1 ; Data Buffer Size bit 1 position
                                 .equ USB_EP_BUFSIZE2_bm = (1<<2) ; Data Buffer Size bit 2 mask
                                 .equ USB_EP_BUFSIZE2_bp = 2 ; Data Buffer Size bit 2 position
                                 
                                 ; USB_EP_CNT masks
                                 .equ USB_EP_ZLP_bm = 0x8000 ; Zero Length Packet bit mask
                                 .equ USB_EP_ZLP_bp = 15 ; Zero Length Packet bit position
                                 
                                 ; USB_CTRLA masks
                                 .equ USB_ENABLE_bm = 0x80 ; USB Enable bit mask
                                 .equ USB_ENABLE_bp = 7 ; USB Enable bit position
                                 .equ USB_SPEED_bm = 0x40 ; Speed Select bit mask
                                 .equ USB_SPEED_bp = 6 ; Speed Select bit position
                                 .equ USB_FIFOEN_bm = 0x20 ; USB FIFO Enable bit mask
                                 .equ USB_FIFOEN_bp = 5 ; USB FIFO Enable bit position
                                 .equ USB_STFRNUM_bm = 0x10 ; Store Frame Number Enable bit mask
                                 .equ USB_STFRNUM_bp = 4 ; Store Frame Number Enable bit position
                                 .equ USB_MAXEP_gm = 0x0F ; Maximum Endpoint Addresses group mask
                                 .equ USB_MAXEP_gp = 0 ; Maximum Endpoint Addresses group position
                                 .equ USB_MAXEP0_bm = (1<<0) ; Maximum Endpoint Addresses bit 0 mask
                                 .equ USB_MAXEP0_bp = 0 ; Maximum Endpoint Addresses bit 0 position
                                 .equ USB_MAXEP1_bm = (1<<1) ; Maximum Endpoint Addresses bit 1 mask
                                 .equ USB_MAXEP1_bp = 1 ; Maximum Endpoint Addresses bit 1 position
                                 .equ USB_MAXEP2_bm = (1<<2) ; Maximum Endpoint Addresses bit 2 mask
                                 .equ USB_MAXEP2_bp = 2 ; Maximum Endpoint Addresses bit 2 position
                                 .equ USB_MAXEP3_bm = (1<<3) ; Maximum Endpoint Addresses bit 3 mask
                                 .equ USB_MAXEP3_bp = 3 ; Maximum Endpoint Addresses bit 3 position
                                 
                                 ; USB_CTRLB masks
                                 .equ USB_PULLRST_bm = 0x10 ; Pull during Reset bit mask
                                 .equ USB_PULLRST_bp = 4 ; Pull during Reset bit position
                                 .equ USB_RWAKEUP_bm = 0x04 ; Remote Wake-up bit mask
                                 .equ USB_RWAKEUP_bp = 2 ; Remote Wake-up bit position
                                 .equ USB_GNACK_bm = 0x02 ; Global NACK bit mask
                                 .equ USB_GNACK_bp = 1 ; Global NACK bit position
                                 .equ USB_ATTACH_bm = 0x01 ; Attach bit mask
                                 .equ USB_ATTACH_bp = 0 ; Attach bit position
                                 
                                 ; USB_STATUS masks
                                 .equ USB_URESUME_bm = 0x08 ; Upstream Resume bit mask
                                 .equ USB_URESUME_bp = 3 ; Upstream Resume bit position
                                 .equ USB_RESUME_bm = 0x04 ; Resume bit mask
                                 .equ USB_RESUME_bp = 2 ; Resume bit position
                                 .equ USB_SUSPEND_bm = 0x02 ; Bus Suspended bit mask
                                 .equ USB_SUSPEND_bp = 1 ; Bus Suspended bit position
                                 .equ USB_BUSRST_bm = 0x01 ; Bus Reset bit mask
                                 .equ USB_BUSRST_bp = 0 ; Bus Reset bit position
                                 
                                 ; USB_ADDR masks
                                 .equ USB_ADDR_gm = 0x7F ; Device Address group mask
                                 .equ USB_ADDR_gp = 0 ; Device Address group position
                                 .equ USB_ADDR0_bm = (1<<0) ; Device Address bit 0 mask
                                 .equ USB_ADDR0_bp = 0 ; Device Address bit 0 position
                                 .equ USB_ADDR1_bm = (1<<1) ; Device Address bit 1 mask
                                 .equ USB_ADDR1_bp = 1 ; Device Address bit 1 position
                                 .equ USB_ADDR2_bm = (1<<2) ; Device Address bit 2 mask
                                 .equ USB_ADDR2_bp = 2 ; Device Address bit 2 position
                                 .equ USB_ADDR3_bm = (1<<3) ; Device Address bit 3 mask
                                 .equ USB_ADDR3_bp = 3 ; Device Address bit 3 position
                                 .equ USB_ADDR4_bm = (1<<4) ; Device Address bit 4 mask
                                 .equ USB_ADDR4_bp = 4 ; Device Address bit 4 position
                                 .equ USB_ADDR5_bm = (1<<5) ; Device Address bit 5 mask
                                 .equ USB_ADDR5_bp = 5 ; Device Address bit 5 position
                                 .equ USB_ADDR6_bm = (1<<6) ; Device Address bit 6 mask
                                 .equ USB_ADDR6_bp = 6 ; Device Address bit 6 position
                                 
                                 ; USB_FIFOWP masks
                                 .equ USB_FIFOWP_gm = 0x1F ; FIFO Write Pointer group mask
                                 .equ USB_FIFOWP_gp = 0 ; FIFO Write Pointer group position
                                 .equ USB_FIFOWP0_bm = (1<<0) ; FIFO Write Pointer bit 0 mask
                                 .equ USB_FIFOWP0_bp = 0 ; FIFO Write Pointer bit 0 position
                                 .equ USB_FIFOWP1_bm = (1<<1) ; FIFO Write Pointer bit 1 mask
                                 .equ USB_FIFOWP1_bp = 1 ; FIFO Write Pointer bit 1 position
                                 .equ USB_FIFOWP2_bm = (1<<2) ; FIFO Write Pointer bit 2 mask
                                 .equ USB_FIFOWP2_bp = 2 ; FIFO Write Pointer bit 2 position
                                 .equ USB_FIFOWP3_bm = (1<<3) ; FIFO Write Pointer bit 3 mask
                                 .equ USB_FIFOWP3_bp = 3 ; FIFO Write Pointer bit 3 position
                                 .equ USB_FIFOWP4_bm = (1<<4) ; FIFO Write Pointer bit 4 mask
                                 .equ USB_FIFOWP4_bp = 4 ; FIFO Write Pointer bit 4 position
                                 
                                 ; USB_FIFORP masks
                                 .equ USB_FIFORP_gm = 0x1F ; FIFO Read Pointer group mask
                                 .equ USB_FIFORP_gp = 0 ; FIFO Read Pointer group position
                                 .equ USB_FIFORP0_bm = (1<<0) ; FIFO Read Pointer bit 0 mask
                                 .equ USB_FIFORP0_bp = 0 ; FIFO Read Pointer bit 0 position
                                 .equ USB_FIFORP1_bm = (1<<1) ; FIFO Read Pointer bit 1 mask
                                 .equ USB_FIFORP1_bp = 1 ; FIFO Read Pointer bit 1 position
                                 .equ USB_FIFORP2_bm = (1<<2) ; FIFO Read Pointer bit 2 mask
                                 .equ USB_FIFORP2_bp = 2 ; FIFO Read Pointer bit 2 position
                                 .equ USB_FIFORP3_bm = (1<<3) ; FIFO Read Pointer bit 3 mask
                                 .equ USB_FIFORP3_bp = 3 ; FIFO Read Pointer bit 3 position
                                 .equ USB_FIFORP4_bm = (1<<4) ; FIFO Read Pointer bit 4 mask
                                 .equ USB_FIFORP4_bp = 4 ; FIFO Read Pointer bit 4 position
                                 
                                 ; USB_INTCTRLA masks
                                 .equ USB_SOFIE_bm = 0x80 ; Start Of Frame Interrupt Enable bit mask
                                 .equ USB_SOFIE_bp = 7 ; Start Of Frame Interrupt Enable bit position
                                 .equ USB_BUSEVIE_bm = 0x40 ; Bus Event Interrupt Enable bit mask
                                 .equ USB_BUSEVIE_bp = 6 ; Bus Event Interrupt Enable bit position
                                 .equ USB_BUSERRIE_bm = 0x20 ; Bus Error Interrupt Enable bit mask
                                 .equ USB_BUSERRIE_bp = 5 ; Bus Error Interrupt Enable bit position
                                 .equ USB_STALLIE_bm = 0x10 ; STALL Interrupt Enable bit mask
                                 .equ USB_STALLIE_bp = 4 ; STALL Interrupt Enable bit position
                                 .equ USB_INTLVL_gm = 0x03 ; Interrupt Level group mask
                                 .equ USB_INTLVL_gp = 0 ; Interrupt Level group position
                                 .equ USB_INTLVL0_bm = (1<<0) ; Interrupt Level bit 0 mask
                                 .equ USB_INTLVL0_bp = 0 ; Interrupt Level bit 0 position
                                 .equ USB_INTLVL1_bm = (1<<1) ; Interrupt Level bit 1 mask
                                 .equ USB_INTLVL1_bp = 1 ; Interrupt Level bit 1 position
                                 
                                 ; USB_INTCTRLB masks
                                 .equ USB_TRNIE_bm = 0x02 ; Transaction Complete Interrupt Enable bit mask
                                 .equ USB_TRNIE_bp = 1 ; Transaction Complete Interrupt Enable bit position
                                 .equ USB_SETUPIE_bm = 0x01 ; SETUP Transaction Complete Interrupt Enable bit mask
                                 .equ USB_SETUPIE_bp = 0 ; SETUP Transaction Complete Interrupt Enable bit position
                                 
                                 ; USB_INTFLAGSACLR masks
                                 .equ USB_SOFIF_bm = 0x80 ; Start Of Frame Interrupt Flag bit mask
                                 .equ USB_SOFIF_bp = 7 ; Start Of Frame Interrupt Flag bit position
                                 .equ USB_SUSPENDIF_bm = 0x40 ; Suspend Interrupt Flag bit mask
                                 .equ USB_SUSPENDIF_bp = 6 ; Suspend Interrupt Flag bit position
                                 .equ USB_RESUMEIF_bm = 0x20 ; Resume Interrupt Flag bit mask
                                 .equ USB_RESUMEIF_bp = 5 ; Resume Interrupt Flag bit position
                                 .equ USB_RSTIF_bm = 0x10 ; Reset Interrupt Flag bit mask
                                 .equ USB_RSTIF_bp = 4 ; Reset Interrupt Flag bit position
                                 .equ USB_CRCIF_bm = 0x08 ; Isochronous CRC Error Interrupt Flag bit mask
                                 .equ USB_CRCIF_bp = 3 ; Isochronous CRC Error Interrupt Flag bit position
                                 .equ USB_UNFIF_bm = 0x04 ; Underflow Interrupt Flag bit mask
                                 .equ USB_UNFIF_bp = 2 ; Underflow Interrupt Flag bit position
                                 .equ USB_OVFIF_bm = 0x02 ; Overflow Interrupt Flag bit mask
                                 .equ USB_OVFIF_bp = 1 ; Overflow Interrupt Flag bit position
                                 .equ USB_STALLIF_bm = 0x01 ; STALL Interrupt Flag bit mask
                                 .equ USB_STALLIF_bp = 0 ; STALL Interrupt Flag bit position
                                 
                                 ; USB_INTFLAGSASET masks
                                 ; Masks for SOFIF aready defined
                                 ; Masks for SUSPENDIF aready defined
                                 ; Masks for RESUMEIF aready defined
                                 ; Masks for RSTIF aready defined
                                 ; Masks for CRCIF aready defined
                                 ; Masks for UNFIF aready defined
                                 ; Masks for OVFIF aready defined
                                 ; Masks for STALLIF aready defined
                                 
                                 ; USB_INTFLAGSBCLR masks
                                 .equ USB_TRNIF_bm = 0x02 ; Transaction Complete Interrupt Flag bit mask
                                 .equ USB_TRNIF_bp = 1 ; Transaction Complete Interrupt Flag bit position
                                 .equ USB_SETUPIF_bm = 0x01 ; SETUP Transaction Complete Interrupt Flag bit mask
                                 .equ USB_SETUPIF_bp = 0 ; SETUP Transaction Complete Interrupt Flag bit position
                                 
                                 ; USB_INTFLAGSBSET masks
                                 ; Masks for TRNIF aready defined
                                 ; Masks for SETUPIF aready defined
                                  
                                 ; Interrupt level
                                 .equ USB_INTLVL_OFF_gc = (0x00<<0) ; Interrupt disabled
                                 .equ USB_INTLVL_LO_gc = (0x01<<0) ; Low level
                                 .equ USB_INTLVL_MED_gc = (0x02<<0) ; Medium level
                                 .equ USB_INTLVL_HI_gc = (0x03<<0) ; High level
                                 
                                 ; USB Endpoint Type
                                 .equ USB_EP_TYPE_DISABLE_gc = (0x00<<6) ; Endpoint Disabled
                                 .equ USB_EP_TYPE_CONTROL_gc = (0x01<<6) ; Control
                                 .equ USB_EP_TYPE_BULK_gc = (0x02<<6) ; Bulk/Interrupt
                                 .equ USB_EP_TYPE_ISOCHRONOUS_gc = (0x03<<6) ; Isochronous
                                 
                                 ; USB Endpoint Buffersize
                                 .equ USB_EP_BUFSIZE_8_gc = (0x00<<0) ; 8 bytes buffer size
                                 .equ USB_EP_BUFSIZE_16_gc = (0x01<<0) ; 16 bytes buffer size
                                 .equ USB_EP_BUFSIZE_32_gc = (0x02<<0) ; 32 bytes buffer size
                                 .equ USB_EP_BUFSIZE_64_gc = (0x03<<0) ; 64 bytes buffer size
                                 .equ USB_EP_BUFSIZE_128_gc = (0x04<<0) ; 128 bytes buffer size
                                 .equ USB_EP_BUFSIZE_256_gc = (0x05<<0) ; 256 bytes buffer size
                                 .equ USB_EP_BUFSIZE_512_gc = (0x06<<0) ; 512 bytes buffer size
                                 .equ USB_EP_BUFSIZE_1023_gc = (0x07<<0) ; 1023 bytes buffer size
                                 
                                 
                                 ;***************************************************************************
                                 ;** PORT - I/O Port Configuration
                                 ;***************************************************************************/
                                 
                                 ; PORT_INTCTRL masks
                                 .equ PORT_INT1LVL_gm = 0x0C ; Port Interrupt 1 Level group mask
                                 .equ PORT_INT1LVL_gp = 2 ; Port Interrupt 1 Level group position
                                 .equ PORT_INT1LVL0_bm = (1<<2) ; Port Interrupt 1 Level bit 0 mask
                                 .equ PORT_INT1LVL0_bp = 2 ; Port Interrupt 1 Level bit 0 position
                                 .equ PORT_INT1LVL1_bm = (1<<3) ; Port Interrupt 1 Level bit 1 mask
                                 .equ PORT_INT1LVL1_bp = 3 ; Port Interrupt 1 Level bit 1 position
                                 .equ PORT_INT0LVL_gm = 0x03 ; Port Interrupt 0 Level group mask
                                 .equ PORT_INT0LVL_gp = 0 ; Port Interrupt 0 Level group position
                                 .equ PORT_INT0LVL0_bm = (1<<0) ; Port Interrupt 0 Level bit 0 mask
                                 .equ PORT_INT0LVL0_bp = 0 ; Port Interrupt 0 Level bit 0 position
                                 .equ PORT_INT0LVL1_bm = (1<<1) ; Port Interrupt 0 Level bit 1 mask
                                 .equ PORT_INT0LVL1_bp = 1 ; Port Interrupt 0 Level bit 1 position
                                 
                                 ; PORT_INTFLAGS masks
                                 .equ PORT_INT1IF_bm = 0x02 ; Port Interrupt 1 Flag bit mask
                                 .equ PORT_INT1IF_bp = 1 ; Port Interrupt 1 Flag bit position
                                 .equ PORT_INT0IF_bm = 0x01 ; Port Interrupt 0 Flag bit mask
                                 .equ PORT_INT0IF_bp = 0 ; Port Interrupt 0 Flag bit position
                                 
                                 ; PORT_REMAP masks
                                 .equ PORT_SPI_bm = 0x20 ; SPI bit mask
                                 .equ PORT_SPI_bp = 5 ; SPI bit position
                                 .equ PORT_USART0_bm = 0x10 ; USART0 bit mask
                                 .equ PORT_USART0_bp = 4 ; USART0 bit position
                                 .equ PORT_TC0D_bm = 0x08 ; Timer/Counter 0 Output Compare D bit mask
                                 .equ PORT_TC0D_bp = 3 ; Timer/Counter 0 Output Compare D bit position
                                 .equ PORT_TC0C_bm = 0x04 ; Timer/Counter 0 Output Compare C bit mask
                                 .equ PORT_TC0C_bp = 2 ; Timer/Counter 0 Output Compare C bit position
                                 .equ PORT_TC0B_bm = 0x02 ; Timer/Counter 0 Output Compare B bit mask
                                 .equ PORT_TC0B_bp = 1 ; Timer/Counter 0 Output Compare B bit position
                                 .equ PORT_TC0A_bm = 0x01 ; Timer/Counter 0 Output Compare A bit mask
                                 .equ PORT_TC0A_bp = 0 ; Timer/Counter 0 Output Compare A bit position
                                 
                                 ; PORT_PIN0CTRL masks
                                 .equ PORT_SRLEN_bm = 0x80 ; Slew Rate Enable bit mask
                                 .equ PORT_SRLEN_bp = 7 ; Slew Rate Enable bit position
                                 .equ PORT_INVEN_bm = 0x40 ; Inverted I/O Enable bit mask
                                 .equ PORT_INVEN_bp = 6 ; Inverted I/O Enable bit position
                                 .equ PORT_OPC_gm = 0x38 ; Output/Pull Configuration group mask
                                 .equ PORT_OPC_gp = 3 ; Output/Pull Configuration group position
                                 .equ PORT_OPC0_bm = (1<<3) ; Output/Pull Configuration bit 0 mask
                                 .equ PORT_OPC0_bp = 3 ; Output/Pull Configuration bit 0 position
                                 .equ PORT_OPC1_bm = (1<<4) ; Output/Pull Configuration bit 1 mask
                                 .equ PORT_OPC1_bp = 4 ; Output/Pull Configuration bit 1 position
                                 .equ PORT_OPC2_bm = (1<<5) ; Output/Pull Configuration bit 2 mask
                                 .equ PORT_OPC2_bp = 5 ; Output/Pull Configuration bit 2 position
                                 .equ PORT_ISC_gm = 0x07 ; Input/Sense Configuration group mask
                                 .equ PORT_ISC_gp = 0 ; Input/Sense Configuration group position
                                 .equ PORT_ISC0_bm = (1<<0) ; Input/Sense Configuration bit 0 mask
                                 .equ PORT_ISC0_bp = 0 ; Input/Sense Configuration bit 0 position
                                 .equ PORT_ISC1_bm = (1<<1) ; Input/Sense Configuration bit 1 mask
                                 .equ PORT_ISC1_bp = 1 ; Input/Sense Configuration bit 1 position
                                 .equ PORT_ISC2_bm = (1<<2) ; Input/Sense Configuration bit 2 mask
                                 .equ PORT_ISC2_bp = 2 ; Input/Sense Configuration bit 2 position
                                 
                                 ; PORT_PIN1CTRL masks
                                 ; Masks for SRLEN aready defined
                                 ; Masks for INVEN aready defined
                                 ; Masks for OPC aready defined
                                 ; Masks for ISC aready defined
                                 
                                 ; PORT_PIN2CTRL masks
                                 ; Masks for SRLEN aready defined
                                 ; Masks for INVEN aready defined
                                 ; Masks for OPC aready defined
                                 ; Masks for ISC aready defined
                                 
                                 ; PORT_PIN3CTRL masks
                                 ; Masks for SRLEN aready defined
                                 ; Masks for INVEN aready defined
                                 ; Masks for OPC aready defined
                                 ; Masks for ISC aready defined
                                 
                                 ; PORT_PIN4CTRL masks
                                 ; Masks for SRLEN aready defined
                                 ; Masks for INVEN aready defined
                                 ; Masks for OPC aready defined
                                 ; Masks for ISC aready defined
                                 
                                 ; PORT_PIN5CTRL masks
                                 ; Masks for SRLEN aready defined
                                 ; Masks for INVEN aready defined
                                 ; Masks for OPC aready defined
                                 ; Masks for ISC aready defined
                                 
                                 ; PORT_PIN6CTRL masks
                                 ; Masks for SRLEN aready defined
                                 ; Masks for INVEN aready defined
                                 ; Masks for OPC aready defined
                                 ; Masks for ISC aready defined
                                 
                                 ; PORT_PIN7CTRL masks
                                 ; Masks for SRLEN aready defined
                                 ; Masks for INVEN aready defined
                                 ; Masks for OPC aready defined
                                 ; Masks for ISC aready defined
                                  
                                 ; Port Interrupt 0 Level
                                 .equ PORT_INT0LVL_OFF_gc = (0x00<<0) ; Interrupt Disabled
                                 .equ PORT_INT0LVL_LO_gc = (0x01<<0) ; Low Level
                                 .equ PORT_INT0LVL_MED_gc = (0x02<<0) ; Medium Level
                                 .equ PORT_INT0LVL_HI_gc = (0x03<<0) ; High Level
                                 
                                 ; Port Interrupt 1 Level
                                 .equ PORT_INT1LVL_OFF_gc = (0x00<<2) ; Interrupt Disabled
                                 .equ PORT_INT1LVL_LO_gc = (0x01<<2) ; Low Level
                                 .equ PORT_INT1LVL_MED_gc = (0x02<<2) ; Medium Level
                                 .equ PORT_INT1LVL_HI_gc = (0x03<<2) ; High Level
                                 
                                 ; Output/Pull Configuration
                                 .equ PORT_OPC_TOTEM_gc = (0x00<<3) ; Totempole
                                 .equ PORT_OPC_BUSKEEPER_gc = (0x01<<3) ; Totempole w/ Bus keeper on Input and Output
                                 .equ PORT_OPC_PULLDOWN_gc = (0x02<<3) ; Totempole w/ Pull-down on Input
                                 .equ PORT_OPC_PULLUP_gc = (0x03<<3) ; Totempole w/ Pull-up on Input
                                 .equ PORT_OPC_WIREDOR_gc = (0x04<<3) ; Wired OR
                                 .equ PORT_OPC_WIREDAND_gc = (0x05<<3) ; Wired AND
                                 .equ PORT_OPC_WIREDORPULL_gc = (0x06<<3) ; Wired OR w/ Pull-down
                                 .equ PORT_OPC_WIREDANDPULL_gc = (0x07<<3) ; Wired AND w/ Pull-up
                                 
                                 ; Input/Sense Configuration
                                 .equ PORT_ISC_BOTHEDGES_gc = (0x00<<0) ; Sense Both Edges
                                 .equ PORT_ISC_RISING_gc = (0x01<<0) ; Sense Rising Edge
                                 .equ PORT_ISC_FALLING_gc = (0x02<<0) ; Sense Falling Edge
                                 .equ PORT_ISC_LEVEL_gc = (0x03<<0) ; Sense Level (Transparent For Events)
                                 .equ PORT_ISC_INPUT_DISABLE_gc = (0x07<<0) ; Disable Digital Input Buffer
                                 
                                 
                                 ;***************************************************************************
                                 ;** TC - 16-bit Timer/Counter With PWM
                                 ;***************************************************************************/
                                 
                                 ; TC0_CTRLA masks
                                 .equ TC0_CLKSEL_gm = 0x0F ; Clock Selection group mask
                                 .equ TC0_CLKSEL_gp = 0 ; Clock Selection group position
                                 .equ TC0_CLKSEL0_bm = (1<<0) ; Clock Selection bit 0 mask
                                 .equ TC0_CLKSEL0_bp = 0 ; Clock Selection bit 0 position
                                 .equ TC0_CLKSEL1_bm = (1<<1) ; Clock Selection bit 1 mask
                                 .equ TC0_CLKSEL1_bp = 1 ; Clock Selection bit 1 position
                                 .equ TC0_CLKSEL2_bm = (1<<2) ; Clock Selection bit 2 mask
                                 .equ TC0_CLKSEL2_bp = 2 ; Clock Selection bit 2 position
                                 .equ TC0_CLKSEL3_bm = (1<<3) ; Clock Selection bit 3 mask
                                 .equ TC0_CLKSEL3_bp = 3 ; Clock Selection bit 3 position
                                 
                                 ; TC0_CTRLB masks
                                 .equ TC0_CCDEN_bm = 0x80 ; Compare or Capture D Enable bit mask
                                 .equ TC0_CCDEN_bp = 7 ; Compare or Capture D Enable bit position
                                 .equ TC0_CCCEN_bm = 0x40 ; Compare or Capture C Enable bit mask
                                 .equ TC0_CCCEN_bp = 6 ; Compare or Capture C Enable bit position
                                 .equ TC0_CCBEN_bm = 0x20 ; Compare or Capture B Enable bit mask
                                 .equ TC0_CCBEN_bp = 5 ; Compare or Capture B Enable bit position
                                 .equ TC0_CCAEN_bm = 0x10 ; Compare or Capture A Enable bit mask
                                 .equ TC0_CCAEN_bp = 4 ; Compare or Capture A Enable bit position
                                 .equ TC0_WGMODE_gm = 0x07 ; Waveform generation mode group mask
                                 .equ TC0_WGMODE_gp = 0 ; Waveform generation mode group position
                                 .equ TC0_WGMODE0_bm = (1<<0) ; Waveform generation mode bit 0 mask
                                 .equ TC0_WGMODE0_bp = 0 ; Waveform generation mode bit 0 position
                                 .equ TC0_WGMODE1_bm = (1<<1) ; Waveform generation mode bit 1 mask
                                 .equ TC0_WGMODE1_bp = 1 ; Waveform generation mode bit 1 position
                                 .equ TC0_WGMODE2_bm = (1<<2) ; Waveform generation mode bit 2 mask
                                 .equ TC0_WGMODE2_bp = 2 ; Waveform generation mode bit 2 position
                                 
                                 ; TC0_CTRLC masks
                                 .equ TC0_CMPD_bm = 0x08 ; Compare D Output Value bit mask
                                 .equ TC0_CMPD_bp = 3 ; Compare D Output Value bit position
                                 .equ TC0_CMPC_bm = 0x04 ; Compare C Output Value bit mask
                                 .equ TC0_CMPC_bp = 2 ; Compare C Output Value bit position
                                 .equ TC0_CMPB_bm = 0x02 ; Compare B Output Value bit mask
                                 .equ TC0_CMPB_bp = 1 ; Compare B Output Value bit position
                                 .equ TC0_CMPA_bm = 0x01 ; Compare A Output Value bit mask
                                 .equ TC0_CMPA_bp = 0 ; Compare A Output Value bit position
                                 
                                 ; TC0_CTRLD masks
                                 .equ TC0_EVACT_gm = 0xE0 ; Event Action group mask
                                 .equ TC0_EVACT_gp = 5 ; Event Action group position
                                 .equ TC0_EVACT0_bm = (1<<5) ; Event Action bit 0 mask
                                 .equ TC0_EVACT0_bp = 5 ; Event Action bit 0 position
                                 .equ TC0_EVACT1_bm = (1<<6) ; Event Action bit 1 mask
                                 .equ TC0_EVACT1_bp = 6 ; Event Action bit 1 position
                                 .equ TC0_EVACT2_bm = (1<<7) ; Event Action bit 2 mask
                                 .equ TC0_EVACT2_bp = 7 ; Event Action bit 2 position
                                 .equ TC0_EVDLY_bm = 0x10 ; Event Delay bit mask
                                 .equ TC0_EVDLY_bp = 4 ; Event Delay bit position
                                 .equ TC0_EVSEL_gm = 0x0F ; Event Source Select group mask
                                 .equ TC0_EVSEL_gp = 0 ; Event Source Select group position
                                 .equ TC0_EVSEL0_bm = (1<<0) ; Event Source Select bit 0 mask
                                 .equ TC0_EVSEL0_bp = 0 ; Event Source Select bit 0 position
                                 .equ TC0_EVSEL1_bm = (1<<1) ; Event Source Select bit 1 mask
                                 .equ TC0_EVSEL1_bp = 1 ; Event Source Select bit 1 position
                                 .equ TC0_EVSEL2_bm = (1<<2) ; Event Source Select bit 2 mask
                                 .equ TC0_EVSEL2_bp = 2 ; Event Source Select bit 2 position
                                 .equ TC0_EVSEL3_bm = (1<<3) ; Event Source Select bit 3 mask
                                 .equ TC0_EVSEL3_bp = 3 ; Event Source Select bit 3 position
                                 
                                 ; TC0_CTRLE masks
                                 .equ TC0_BYTEM_gm = 0x03 ; Byte Mode group mask
                                 .equ TC0_BYTEM_gp = 0 ; Byte Mode group position
                                 .equ TC0_BYTEM0_bm = (1<<0) ; Byte Mode bit 0 mask
                                 .equ TC0_BYTEM0_bp = 0 ; Byte Mode bit 0 position
                                 .equ TC0_BYTEM1_bm = (1<<1) ; Byte Mode bit 1 mask
                                 .equ TC0_BYTEM1_bp = 1 ; Byte Mode bit 1 position
                                 
                                 ; TC0_INTCTRLA masks
                                 .equ TC0_ERRINTLVL_gm = 0x0C ; Error Interrupt Level group mask
                                 .equ TC0_ERRINTLVL_gp = 2 ; Error Interrupt Level group position
                                 .equ TC0_ERRINTLVL0_bm = (1<<2) ; Error Interrupt Level bit 0 mask
                                 .equ TC0_ERRINTLVL0_bp = 2 ; Error Interrupt Level bit 0 position
                                 .equ TC0_ERRINTLVL1_bm = (1<<3) ; Error Interrupt Level bit 1 mask
                                 .equ TC0_ERRINTLVL1_bp = 3 ; Error Interrupt Level bit 1 position
                                 .equ TC0_OVFINTLVL_gm = 0x03 ; Overflow interrupt level group mask
                                 .equ TC0_OVFINTLVL_gp = 0 ; Overflow interrupt level group position
                                 .equ TC0_OVFINTLVL0_bm = (1<<0) ; Overflow interrupt level bit 0 mask
                                 .equ TC0_OVFINTLVL0_bp = 0 ; Overflow interrupt level bit 0 position
                                 .equ TC0_OVFINTLVL1_bm = (1<<1) ; Overflow interrupt level bit 1 mask
                                 .equ TC0_OVFINTLVL1_bp = 1 ; Overflow interrupt level bit 1 position
                                 
                                 ; TC0_INTCTRLB masks
                                 .equ TC0_CCDINTLVL_gm = 0xC0 ; Compare or Capture D Interrupt Level group mask
                                 .equ TC0_CCDINTLVL_gp = 6 ; Compare or Capture D Interrupt Level group position
                                 .equ TC0_CCDINTLVL0_bm = (1<<6) ; Compare or Capture D Interrupt Level bit 0 mask
                                 .equ TC0_CCDINTLVL0_bp = 6 ; Compare or Capture D Interrupt Level bit 0 position
                                 .equ TC0_CCDINTLVL1_bm = (1<<7) ; Compare or Capture D Interrupt Level bit 1 mask
                                 .equ TC0_CCDINTLVL1_bp = 7 ; Compare or Capture D Interrupt Level bit 1 position
                                 .equ TC0_CCCINTLVL_gm = 0x30 ; Compare or Capture C Interrupt Level group mask
                                 .equ TC0_CCCINTLVL_gp = 4 ; Compare or Capture C Interrupt Level group position
                                 .equ TC0_CCCINTLVL0_bm = (1<<4) ; Compare or Capture C Interrupt Level bit 0 mask
                                 .equ TC0_CCCINTLVL0_bp = 4 ; Compare or Capture C Interrupt Level bit 0 position
                                 .equ TC0_CCCINTLVL1_bm = (1<<5) ; Compare or Capture C Interrupt Level bit 1 mask
                                 .equ TC0_CCCINTLVL1_bp = 5 ; Compare or Capture C Interrupt Level bit 1 position
                                 .equ TC0_CCBINTLVL_gm = 0x0C ; Compare or Capture B Interrupt Level group mask
                                 .equ TC0_CCBINTLVL_gp = 2 ; Compare or Capture B Interrupt Level group position
                                 .equ TC0_CCBINTLVL0_bm = (1<<2) ; Compare or Capture B Interrupt Level bit 0 mask
                                 .equ TC0_CCBINTLVL0_bp = 2 ; Compare or Capture B Interrupt Level bit 0 position
                                 .equ TC0_CCBINTLVL1_bm = (1<<3) ; Compare or Capture B Interrupt Level bit 1 mask
                                 .equ TC0_CCBINTLVL1_bp = 3 ; Compare or Capture B Interrupt Level bit 1 position
                                 .equ TC0_CCAINTLVL_gm = 0x03 ; Compare or Capture A Interrupt Level group mask
                                 .equ TC0_CCAINTLVL_gp = 0 ; Compare or Capture A Interrupt Level group position
                                 .equ TC0_CCAINTLVL0_bm = (1<<0) ; Compare or Capture A Interrupt Level bit 0 mask
                                 .equ TC0_CCAINTLVL0_bp = 0 ; Compare or Capture A Interrupt Level bit 0 position
                                 .equ TC0_CCAINTLVL1_bm = (1<<1) ; Compare or Capture A Interrupt Level bit 1 mask
                                 .equ TC0_CCAINTLVL1_bp = 1 ; Compare or Capture A Interrupt Level bit 1 position
                                 
                                 ; TC0_CTRLFCLR masks
                                 .equ TC0_CMD_gm = 0x0C ; Command group mask
                                 .equ TC0_CMD_gp = 2 ; Command group position
                                 .equ TC0_CMD0_bm = (1<<2) ; Command bit 0 mask
                                 .equ TC0_CMD0_bp = 2 ; Command bit 0 position
                                 .equ TC0_CMD1_bm = (1<<3) ; Command bit 1 mask
                                 .equ TC0_CMD1_bp = 3 ; Command bit 1 position
                                 .equ TC0_LUPD_bm = 0x02 ; Lock Update bit mask
                                 .equ TC0_LUPD_bp = 1 ; Lock Update bit position
                                 .equ TC0_DIR_bm = 0x01 ; Direction bit mask
                                 .equ TC0_DIR_bp = 0 ; Direction bit position
                                 
                                 ; TC0_CTRLFSET masks
                                 ; Masks for CMD aready defined
                                 ; Masks for LUPD aready defined
                                 ; Masks for DIR aready defined
                                 
                                 ; TC0_CTRLGCLR masks
                                 .equ TC0_CCDBV_bm = 0x10 ; Compare or Capture D Buffer Valid bit mask
                                 .equ TC0_CCDBV_bp = 4 ; Compare or Capture D Buffer Valid bit position
                                 .equ TC0_CCCBV_bm = 0x08 ; Compare or Capture C Buffer Valid bit mask
                                 .equ TC0_CCCBV_bp = 3 ; Compare or Capture C Buffer Valid bit position
                                 .equ TC0_CCBBV_bm = 0x04 ; Compare or Capture B Buffer Valid bit mask
                                 .equ TC0_CCBBV_bp = 2 ; Compare or Capture B Buffer Valid bit position
                                 .equ TC0_CCABV_bm = 0x02 ; Compare or Capture A Buffer Valid bit mask
                                 .equ TC0_CCABV_bp = 1 ; Compare or Capture A Buffer Valid bit position
                                 .equ TC0_PERBV_bm = 0x01 ; Period Buffer Valid bit mask
                                 .equ TC0_PERBV_bp = 0 ; Period Buffer Valid bit position
                                 
                                 ; TC0_CTRLGSET masks
                                 ; Masks for CCDBV aready defined
                                 ; Masks for CCCBV aready defined
                                 ; Masks for CCBBV aready defined
                                 ; Masks for CCABV aready defined
                                 ; Masks for PERBV aready defined
                                 
                                 ; TC0_INTFLAGS masks
                                 .equ TC0_CCDIF_bm = 0x80 ; Compare or Capture D Interrupt Flag bit mask
                                 .equ TC0_CCDIF_bp = 7 ; Compare or Capture D Interrupt Flag bit position
                                 .equ TC0_CCCIF_bm = 0x40 ; Compare or Capture C Interrupt Flag bit mask
                                 .equ TC0_CCCIF_bp = 6 ; Compare or Capture C Interrupt Flag bit position
                                 .equ TC0_CCBIF_bm = 0x20 ; Compare or Capture B Interrupt Flag bit mask
                                 .equ TC0_CCBIF_bp = 5 ; Compare or Capture B Interrupt Flag bit position
                                 .equ TC0_CCAIF_bm = 0x10 ; Compare or Capture A Interrupt Flag bit mask
                                 .equ TC0_CCAIF_bp = 4 ; Compare or Capture A Interrupt Flag bit position
                                 .equ TC0_ERRIF_bm = 0x02 ; Error Interrupt Flag bit mask
                                 .equ TC0_ERRIF_bp = 1 ; Error Interrupt Flag bit position
                                 .equ TC0_OVFIF_bm = 0x01 ; Overflow Interrupt Flag bit mask
                                 .equ TC0_OVFIF_bp = 0 ; Overflow Interrupt Flag bit position
                                 
                                 ; TC1_CTRLA masks
                                 .equ TC1_CLKSEL_gm = 0x0F ; Clock Selection group mask
                                 .equ TC1_CLKSEL_gp = 0 ; Clock Selection group position
                                 .equ TC1_CLKSEL0_bm = (1<<0) ; Clock Selection bit 0 mask
                                 .equ TC1_CLKSEL0_bp = 0 ; Clock Selection bit 0 position
                                 .equ TC1_CLKSEL1_bm = (1<<1) ; Clock Selection bit 1 mask
                                 .equ TC1_CLKSEL1_bp = 1 ; Clock Selection bit 1 position
                                 .equ TC1_CLKSEL2_bm = (1<<2) ; Clock Selection bit 2 mask
                                 .equ TC1_CLKSEL2_bp = 2 ; Clock Selection bit 2 position
                                 .equ TC1_CLKSEL3_bm = (1<<3) ; Clock Selection bit 3 mask
                                 .equ TC1_CLKSEL3_bp = 3 ; Clock Selection bit 3 position
                                 
                                 ; TC1_CTRLB masks
                                 .equ TC1_CCBEN_bm = 0x20 ; Compare or Capture B Enable bit mask
                                 .equ TC1_CCBEN_bp = 5 ; Compare or Capture B Enable bit position
                                 .equ TC1_CCAEN_bm = 0x10 ; Compare or Capture A Enable bit mask
                                 .equ TC1_CCAEN_bp = 4 ; Compare or Capture A Enable bit position
                                 .equ TC1_WGMODE_gm = 0x07 ; Waveform generation mode group mask
                                 .equ TC1_WGMODE_gp = 0 ; Waveform generation mode group position
                                 .equ TC1_WGMODE0_bm = (1<<0) ; Waveform generation mode bit 0 mask
                                 .equ TC1_WGMODE0_bp = 0 ; Waveform generation mode bit 0 position
                                 .equ TC1_WGMODE1_bm = (1<<1) ; Waveform generation mode bit 1 mask
                                 .equ TC1_WGMODE1_bp = 1 ; Waveform generation mode bit 1 position
                                 .equ TC1_WGMODE2_bm = (1<<2) ; Waveform generation mode bit 2 mask
                                 .equ TC1_WGMODE2_bp = 2 ; Waveform generation mode bit 2 position
                                 
                                 ; TC1_CTRLC masks
                                 .equ TC1_CMPB_bm = 0x02 ; Compare B Output Value bit mask
                                 .equ TC1_CMPB_bp = 1 ; Compare B Output Value bit position
                                 .equ TC1_CMPA_bm = 0x01 ; Compare A Output Value bit mask
                                 .equ TC1_CMPA_bp = 0 ; Compare A Output Value bit position
                                 
                                 ; TC1_CTRLD masks
                                 .equ TC1_EVACT_gm = 0xE0 ; Event Action group mask
                                 .equ TC1_EVACT_gp = 5 ; Event Action group position
                                 .equ TC1_EVACT0_bm = (1<<5) ; Event Action bit 0 mask
                                 .equ TC1_EVACT0_bp = 5 ; Event Action bit 0 position
                                 .equ TC1_EVACT1_bm = (1<<6) ; Event Action bit 1 mask
                                 .equ TC1_EVACT1_bp = 6 ; Event Action bit 1 position
                                 .equ TC1_EVACT2_bm = (1<<7) ; Event Action bit 2 mask
                                 .equ TC1_EVACT2_bp = 7 ; Event Action bit 2 position
                                 .equ TC1_EVDLY_bm = 0x10 ; Event Delay bit mask
                                 .equ TC1_EVDLY_bp = 4 ; Event Delay bit position
                                 .equ TC1_EVSEL_gm = 0x0F ; Event Source Select group mask
                                 .equ TC1_EVSEL_gp = 0 ; Event Source Select group position
                                 .equ TC1_EVSEL0_bm = (1<<0) ; Event Source Select bit 0 mask
                                 .equ TC1_EVSEL0_bp = 0 ; Event Source Select bit 0 position
                                 .equ TC1_EVSEL1_bm = (1<<1) ; Event Source Select bit 1 mask
                                 .equ TC1_EVSEL1_bp = 1 ; Event Source Select bit 1 position
                                 .equ TC1_EVSEL2_bm = (1<<2) ; Event Source Select bit 2 mask
                                 .equ TC1_EVSEL2_bp = 2 ; Event Source Select bit 2 position
                                 .equ TC1_EVSEL3_bm = (1<<3) ; Event Source Select bit 3 mask
                                 .equ TC1_EVSEL3_bp = 3 ; Event Source Select bit 3 position
                                 
                                 ; TC1_CTRLE masks
                                 .equ TC1_BYTEM_bm = 0x01 ; Byte Mode bit mask
                                 .equ TC1_BYTEM_bp = 0 ; Byte Mode bit position
                                 
                                 ; TC1_INTCTRLA masks
                                 .equ TC1_ERRINTLVL_gm = 0x0C ; Error Interrupt Level group mask
                                 .equ TC1_ERRINTLVL_gp = 2 ; Error Interrupt Level group position
                                 .equ TC1_ERRINTLVL0_bm = (1<<2) ; Error Interrupt Level bit 0 mask
                                 .equ TC1_ERRINTLVL0_bp = 2 ; Error Interrupt Level bit 0 position
                                 .equ TC1_ERRINTLVL1_bm = (1<<3) ; Error Interrupt Level bit 1 mask
                                 .equ TC1_ERRINTLVL1_bp = 3 ; Error Interrupt Level bit 1 position
                                 .equ TC1_OVFINTLVL_gm = 0x03 ; Overflow interrupt level group mask
                                 .equ TC1_OVFINTLVL_gp = 0 ; Overflow interrupt level group position
                                 .equ TC1_OVFINTLVL0_bm = (1<<0) ; Overflow interrupt level bit 0 mask
                                 .equ TC1_OVFINTLVL0_bp = 0 ; Overflow interrupt level bit 0 position
                                 .equ TC1_OVFINTLVL1_bm = (1<<1) ; Overflow interrupt level bit 1 mask
                                 .equ TC1_OVFINTLVL1_bp = 1 ; Overflow interrupt level bit 1 position
                                 
                                 ; TC1_INTCTRLB masks
                                 .equ TC1_CCBINTLVL_gm = 0x0C ; Compare or Capture B Interrupt Level group mask
                                 .equ TC1_CCBINTLVL_gp = 2 ; Compare or Capture B Interrupt Level group position
                                 .equ TC1_CCBINTLVL0_bm = (1<<2) ; Compare or Capture B Interrupt Level bit 0 mask
                                 .equ TC1_CCBINTLVL0_bp = 2 ; Compare or Capture B Interrupt Level bit 0 position
                                 .equ TC1_CCBINTLVL1_bm = (1<<3) ; Compare or Capture B Interrupt Level bit 1 mask
                                 .equ TC1_CCBINTLVL1_bp = 3 ; Compare or Capture B Interrupt Level bit 1 position
                                 .equ TC1_CCAINTLVL_gm = 0x03 ; Compare or Capture A Interrupt Level group mask
                                 .equ TC1_CCAINTLVL_gp = 0 ; Compare or Capture A Interrupt Level group position
                                 .equ TC1_CCAINTLVL0_bm = (1<<0) ; Compare or Capture A Interrupt Level bit 0 mask
                                 .equ TC1_CCAINTLVL0_bp = 0 ; Compare or Capture A Interrupt Level bit 0 position
                                 .equ TC1_CCAINTLVL1_bm = (1<<1) ; Compare or Capture A Interrupt Level bit 1 mask
                                 .equ TC1_CCAINTLVL1_bp = 1 ; Compare or Capture A Interrupt Level bit 1 position
                                 
                                 ; TC1_CTRLFCLR masks
                                 .equ TC1_CMD_gm = 0x0C ; Command group mask
                                 .equ TC1_CMD_gp = 2 ; Command group position
                                 .equ TC1_CMD0_bm = (1<<2) ; Command bit 0 mask
                                 .equ TC1_CMD0_bp = 2 ; Command bit 0 position
                                 .equ TC1_CMD1_bm = (1<<3) ; Command bit 1 mask
                                 .equ TC1_CMD1_bp = 3 ; Command bit 1 position
                                 .equ TC1_LUPD_bm = 0x02 ; Lock Update bit mask
                                 .equ TC1_LUPD_bp = 1 ; Lock Update bit position
                                 .equ TC1_DIR_bm = 0x01 ; Direction bit mask
                                 .equ TC1_DIR_bp = 0 ; Direction bit position
                                 
                                 ; TC1_CTRLFSET masks
                                 ; Masks for CMD aready defined
                                 ; Masks for LUPD aready defined
                                 ; Masks for DIR aready defined
                                 
                                 ; TC1_CTRLGCLR masks
                                 .equ TC1_CCBBV_bm = 0x04 ; Compare or Capture B Buffer Valid bit mask
                                 .equ TC1_CCBBV_bp = 2 ; Compare or Capture B Buffer Valid bit position
                                 .equ TC1_CCABV_bm = 0x02 ; Compare or Capture A Buffer Valid bit mask
                                 .equ TC1_CCABV_bp = 1 ; Compare or Capture A Buffer Valid bit position
                                 .equ TC1_PERBV_bm = 0x01 ; Period Buffer Valid bit mask
                                 .equ TC1_PERBV_bp = 0 ; Period Buffer Valid bit position
                                 
                                 ; TC1_CTRLGSET masks
                                 ; Masks for CCBBV aready defined
                                 ; Masks for CCABV aready defined
                                 ; Masks for PERBV aready defined
                                 
                                 ; TC1_INTFLAGS masks
                                 .equ TC1_CCBIF_bm = 0x20 ; Compare or Capture B Interrupt Flag bit mask
                                 .equ TC1_CCBIF_bp = 5 ; Compare or Capture B Interrupt Flag bit position
                                 .equ TC1_CCAIF_bm = 0x10 ; Compare or Capture A Interrupt Flag bit mask
                                 .equ TC1_CCAIF_bp = 4 ; Compare or Capture A Interrupt Flag bit position
                                 .equ TC1_ERRIF_bm = 0x02 ; Error Interrupt Flag bit mask
                                 .equ TC1_ERRIF_bp = 1 ; Error Interrupt Flag bit position
                                 .equ TC1_OVFIF_bm = 0x01 ; Overflow Interrupt Flag bit mask
                                 .equ TC1_OVFIF_bp = 0 ; Overflow Interrupt Flag bit position
                                  
                                 ; Clock Selection
                                 .equ TC_CLKSEL_OFF_gc = (0x00<<0) ; Timer Off
                                 .equ TC_CLKSEL_DIV1_gc = (0x01<<0) ; System Clock
                                 .equ TC_CLKSEL_DIV2_gc = (0x02<<0) ; System Clock / 2
                                 .equ TC_CLKSEL_DIV4_gc = (0x03<<0) ; System Clock / 4
                                 .equ TC_CLKSEL_DIV8_gc = (0x04<<0) ; System Clock / 8
                                 .equ TC_CLKSEL_DIV64_gc = (0x05<<0) ; System Clock / 64
                                 .equ TC_CLKSEL_DIV256_gc = (0x06<<0) ; System Clock / 256
                                 .equ TC_CLKSEL_DIV1024_gc = (0x07<<0) ; System Clock / 1024
                                 .equ TC_CLKSEL_EVCH0_gc = (0x08<<0) ; Event Channel 0
                                 .equ TC_CLKSEL_EVCH1_gc = (0x09<<0) ; Event Channel 1
                                 .equ TC_CLKSEL_EVCH2_gc = (0x0A<<0) ; Event Channel 2
                                 .equ TC_CLKSEL_EVCH3_gc = (0x0B<<0) ; Event Channel 3
                                 .equ TC_CLKSEL_EVCH4_gc = (0x0C<<0) ; Event Channel 4
                                 .equ TC_CLKSEL_EVCH5_gc = (0x0D<<0) ; Event Channel 5
                                 .equ TC_CLKSEL_EVCH6_gc = (0x0E<<0) ; Event Channel 6
                                 .equ TC_CLKSEL_EVCH7_gc = (0x0F<<0) ; Event Channel 7
                                 
                                 ; Waveform Generation Mode
                                 .equ TC_WGMODE_NORMAL_gc = (0x00<<0) ; Normal Mode
                                 .equ TC_WGMODE_FRQ_gc = (0x01<<0) ; Frequency Generation Mode
                                 .equ TC_WGMODE_SINGLESLOPE_gc = (0x03<<0) ; Single Slope
                                 .equ TC_WGMODE_SS_gc = (0x03<<0) ; Single Slope
                                 .equ TC_WGMODE_DSTOP_gc = (0x05<<0) ; Dual Slope, Update on TOP
                                 .equ TC_WGMODE_DS_T_gc = (0x05<<0) ; Dual Slope, Update on TOP
                                 .equ TC_WGMODE_DSBOTH_gc = (0x06<<0) ; Dual Slope, Update on both TOP and BOTTOM
                                 .equ TC_WGMODE_DS_TB_gc = (0x06<<0) ; Dual Slope, Update on both TOP and BOTTOM
                                 .equ TC_WGMODE_DSBOTTOM_gc = (0x07<<0) ; Dual Slope, Update on BOTTOM
                                 .equ TC_WGMODE_DS_B_gc = (0x07<<0) ; Dual Slope, Update on BOTTOM
                                 
                                 ; Byte Mode
                                 .equ TC_BYTEM_NORMAL_gc = (0x00<<0) ; 16-bit mode
                                 .equ TC_BYTEM_BYTEMODE_gc = (0x01<<0) ; Timer/Counter operating in byte mode only
                                 .equ TC_BYTEM_SPLITMODE_gc = (0x02<<0) ; Timer/Counter split into two 8-bit Counters (TC2)
                                 
                                 ; Event Action
                                 .equ TC_EVACT_OFF_gc = (0x00<<5) ; No Event Action
                                 .equ TC_EVACT_CAPT_gc = (0x01<<5) ; Input Capture
                                 .equ TC_EVACT_UPDOWN_gc = (0x02<<5) ; Externally Controlled Up/Down Count
                                 .equ TC_EVACT_QDEC_gc = (0x03<<5) ; Quadrature Decode
                                 .equ TC_EVACT_RESTART_gc = (0x04<<5) ; Restart
                                 .equ TC_EVACT_FRQ_gc = (0x05<<5) ; Frequency Capture
                                 .equ TC_EVACT_PW_gc = (0x06<<5) ; Pulse-width Capture
                                 
                                 ; Event Selection
                                 .equ TC_EVSEL_OFF_gc = (0x00<<0) ; No Event Source
                                 .equ TC_EVSEL_CH0_gc = (0x08<<0) ; Event Channel 0
                                 .equ TC_EVSEL_CH1_gc = (0x09<<0) ; Event Channel 1
                                 .equ TC_EVSEL_CH2_gc = (0x0A<<0) ; Event Channel 2
                                 .equ TC_EVSEL_CH3_gc = (0x0B<<0) ; Event Channel 3
                                 .equ TC_EVSEL_CH4_gc = (0x0C<<0) ; Event Channel 4
                                 .equ TC_EVSEL_CH5_gc = (0x0D<<0) ; Event Channel 5
                                 .equ TC_EVSEL_CH6_gc = (0x0E<<0) ; Event Channel 6
                                 .equ TC_EVSEL_CH7_gc = (0x0F<<0) ; Event Channel 7
                                 
                                 ; Error Interrupt Level
                                 .equ TC_ERRINTLVL_OFF_gc = (0x00<<2) ; Interrupt Disabled
                                 .equ TC_ERRINTLVL_LO_gc = (0x01<<2) ; Low Level
                                 .equ TC_ERRINTLVL_MED_gc = (0x02<<2) ; Medium Level
                                 .equ TC_ERRINTLVL_HI_gc = (0x03<<2) ; High Level
                                 
                                 ; Overflow Interrupt Level
                                 .equ TC_OVFINTLVL_OFF_gc = (0x00<<0) ; Interrupt Disabled
                                 .equ TC_OVFINTLVL_LO_gc = (0x01<<0) ; Low Level
                                 .equ TC_OVFINTLVL_MED_gc = (0x02<<0) ; Medium Level
                                 .equ TC_OVFINTLVL_HI_gc = (0x03<<0) ; High Level
                                 
                                 ; Compare or Capture D Interrupt Level
                                 .equ TC_CCDINTLVL_OFF_gc = (0x00<<6) ; Interrupt Disabled
                                 .equ TC_CCDINTLVL_LO_gc = (0x01<<6) ; Low Level
                                 .equ TC_CCDINTLVL_MED_gc = (0x02<<6) ; Medium Level
                                 .equ TC_CCDINTLVL_HI_gc = (0x03<<6) ; High Level
                                 
                                 ; Compare or Capture C Interrupt Level
                                 .equ TC_CCCINTLVL_OFF_gc = (0x00<<4) ; Interrupt Disabled
                                 .equ TC_CCCINTLVL_LO_gc = (0x01<<4) ; Low Level
                                 .equ TC_CCCINTLVL_MED_gc = (0x02<<4) ; Medium Level
                                 .equ TC_CCCINTLVL_HI_gc = (0x03<<4) ; High Level
                                 
                                 ; Compare or Capture B Interrupt Level
                                 .equ TC_CCBINTLVL_OFF_gc = (0x00<<2) ; Interrupt Disabled
                                 .equ TC_CCBINTLVL_LO_gc = (0x01<<2) ; Low Level
                                 .equ TC_CCBINTLVL_MED_gc = (0x02<<2) ; Medium Level
                                 .equ TC_CCBINTLVL_HI_gc = (0x03<<2) ; High Level
                                 
                                 ; Compare or Capture A Interrupt Level
                                 .equ TC_CCAINTLVL_OFF_gc = (0x00<<0) ; Interrupt Disabled
                                 .equ TC_CCAINTLVL_LO_gc = (0x01<<0) ; Low Level
                                 .equ TC_CCAINTLVL_MED_gc = (0x02<<0) ; Medium Level
                                 .equ TC_CCAINTLVL_HI_gc = (0x03<<0) ; High Level
                                 
                                 ; Timer/Counter Command
                                 .equ TC_CMD_NONE_gc = (0x00<<2) ; No Command
                                 .equ TC_CMD_UPDATE_gc = (0x01<<2) ; Force Update
                                 .equ TC_CMD_RESTART_gc = (0x02<<2) ; Force Restart
                                 .equ TC_CMD_RESET_gc = (0x03<<2) ; Force Hard Reset
                                 
                                 
                                 ;***************************************************************************
                                 ;** TC2 - 16-bit Timer/Counter type 2
                                 ;***************************************************************************/
                                 
                                 ; TC2_CTRLA masks
                                 .equ TC2_CLKSEL_gm = 0x0F ; Clock Selection group mask
                                 .equ TC2_CLKSEL_gp = 0 ; Clock Selection group position
                                 .equ TC2_CLKSEL0_bm = (1<<0) ; Clock Selection bit 0 mask
                                 .equ TC2_CLKSEL0_bp = 0 ; Clock Selection bit 0 position
                                 .equ TC2_CLKSEL1_bm = (1<<1) ; Clock Selection bit 1 mask
                                 .equ TC2_CLKSEL1_bp = 1 ; Clock Selection bit 1 position
                                 .equ TC2_CLKSEL2_bm = (1<<2) ; Clock Selection bit 2 mask
                                 .equ TC2_CLKSEL2_bp = 2 ; Clock Selection bit 2 position
                                 .equ TC2_CLKSEL3_bm = (1<<3) ; Clock Selection bit 3 mask
                                 .equ TC2_CLKSEL3_bp = 3 ; Clock Selection bit 3 position
                                 
                                 ; TC2_CTRLB masks
                                 .equ TC2_HCMPDEN_bm = 0x80 ; High Byte Compare D Enable bit mask
                                 .equ TC2_HCMPDEN_bp = 7 ; High Byte Compare D Enable bit position
                                 .equ TC2_HCMPCEN_bm = 0x40 ; High Byte Compare C Enable bit mask
                                 .equ TC2_HCMPCEN_bp = 6 ; High Byte Compare C Enable bit position
                                 .equ TC2_HCMPBEN_bm = 0x20 ; High Byte Compare B Enable bit mask
                                 .equ TC2_HCMPBEN_bp = 5 ; High Byte Compare B Enable bit position
                                 .equ TC2_HCMPAEN_bm = 0x10 ; High Byte Compare A Enable bit mask
                                 .equ TC2_HCMPAEN_bp = 4 ; High Byte Compare A Enable bit position
                                 .equ TC2_LCMPDEN_bm = 0x08 ; Low Byte Compare D Enable bit mask
                                 .equ TC2_LCMPDEN_bp = 3 ; Low Byte Compare D Enable bit position
                                 .equ TC2_LCMPCEN_bm = 0x04 ; Low Byte Compare C Enable bit mask
                                 .equ TC2_LCMPCEN_bp = 2 ; Low Byte Compare C Enable bit position
                                 .equ TC2_LCMPBEN_bm = 0x02 ; Low Byte Compare B Enable bit mask
                                 .equ TC2_LCMPBEN_bp = 1 ; Low Byte Compare B Enable bit position
                                 .equ TC2_LCMPAEN_bm = 0x01 ; Low Byte Compare A Enable bit mask
                                 .equ TC2_LCMPAEN_bp = 0 ; Low Byte Compare A Enable bit position
                                 
                                 ; TC2_CTRLC masks
                                 .equ TC2_HCMPD_bm = 0x80 ; High Byte Compare D Output Value bit mask
                                 .equ TC2_HCMPD_bp = 7 ; High Byte Compare D Output Value bit position
                                 .equ TC2_HCMPC_bm = 0x40 ; High Byte Compare C Output Value bit mask
                                 .equ TC2_HCMPC_bp = 6 ; High Byte Compare C Output Value bit position
                                 .equ TC2_HCMPB_bm = 0x20 ; High Byte Compare B Output Value bit mask
                                 .equ TC2_HCMPB_bp = 5 ; High Byte Compare B Output Value bit position
                                 .equ TC2_HCMPA_bm = 0x10 ; High Byte Compare A Output Value bit mask
                                 .equ TC2_HCMPA_bp = 4 ; High Byte Compare A Output Value bit position
                                 .equ TC2_LCMPD_bm = 0x08 ; Low Byte Compare D Output Value bit mask
                                 .equ TC2_LCMPD_bp = 3 ; Low Byte Compare D Output Value bit position
                                 .equ TC2_LCMPC_bm = 0x04 ; Low Byte Compare C Output Value bit mask
                                 .equ TC2_LCMPC_bp = 2 ; Low Byte Compare C Output Value bit position
                                 .equ TC2_LCMPB_bm = 0x02 ; Low Byte Compare B Output Value bit mask
                                 .equ TC2_LCMPB_bp = 1 ; Low Byte Compare B Output Value bit position
                                 .equ TC2_LCMPA_bm = 0x01 ; Low Byte Compare A Output Value bit mask
                                 .equ TC2_LCMPA_bp = 0 ; Low Byte Compare A Output Value bit position
                                 
                                 ; TC2_CTRLE masks
                                 .equ TC2_BYTEM_gm = 0x03 ; Byte Mode group mask
                                 .equ TC2_BYTEM_gp = 0 ; Byte Mode group position
                                 .equ TC2_BYTEM0_bm = (1<<0) ; Byte Mode bit 0 mask
                                 .equ TC2_BYTEM0_bp = 0 ; Byte Mode bit 0 position
                                 .equ TC2_BYTEM1_bm = (1<<1) ; Byte Mode bit 1 mask
                                 .equ TC2_BYTEM1_bp = 1 ; Byte Mode bit 1 position
                                 
                                 ; TC2_INTCTRLA masks
                                 .equ TC2_HUNFINTLVL_gm = 0x0C ; High Byte Underflow Interrupt Level group mask
                                 .equ TC2_HUNFINTLVL_gp = 2 ; High Byte Underflow Interrupt Level group position
                                 .equ TC2_HUNFINTLVL0_bm = (1<<2) ; High Byte Underflow Interrupt Level bit 0 mask
                                 .equ TC2_HUNFINTLVL0_bp = 2 ; High Byte Underflow Interrupt Level bit 0 position
                                 .equ TC2_HUNFINTLVL1_bm = (1<<3) ; High Byte Underflow Interrupt Level bit 1 mask
                                 .equ TC2_HUNFINTLVL1_bp = 3 ; High Byte Underflow Interrupt Level bit 1 position
                                 .equ TC2_LUNFINTLVL_gm = 0x03 ; Low Byte Underflow interrupt level group mask
                                 .equ TC2_LUNFINTLVL_gp = 0 ; Low Byte Underflow interrupt level group position
                                 .equ TC2_LUNFINTLVL0_bm = (1<<0) ; Low Byte Underflow interrupt level bit 0 mask
                                 .equ TC2_LUNFINTLVL0_bp = 0 ; Low Byte Underflow interrupt level bit 0 position
                                 .equ TC2_LUNFINTLVL1_bm = (1<<1) ; Low Byte Underflow interrupt level bit 1 mask
                                 .equ TC2_LUNFINTLVL1_bp = 1 ; Low Byte Underflow interrupt level bit 1 position
                                 
                                 ; TC2_INTCTRLB masks
                                 .equ TC2_LCMPDINTLVL_gm = 0xC0 ; Low Byte Compare D Interrupt Level group mask
                                 .equ TC2_LCMPDINTLVL_gp = 6 ; Low Byte Compare D Interrupt Level group position
                                 .equ TC2_LCMPDINTLVL0_bm = (1<<6) ; Low Byte Compare D Interrupt Level bit 0 mask
                                 .equ TC2_LCMPDINTLVL0_bp = 6 ; Low Byte Compare D Interrupt Level bit 0 position
                                 .equ TC2_LCMPDINTLVL1_bm = (1<<7) ; Low Byte Compare D Interrupt Level bit 1 mask
                                 .equ TC2_LCMPDINTLVL1_bp = 7 ; Low Byte Compare D Interrupt Level bit 1 position
                                 .equ TC2_LCMPCINTLVL_gm = 0x30 ; Low Byte Compare C Interrupt Level group mask
                                 .equ TC2_LCMPCINTLVL_gp = 4 ; Low Byte Compare C Interrupt Level group position
                                 .equ TC2_LCMPCINTLVL0_bm = (1<<4) ; Low Byte Compare C Interrupt Level bit 0 mask
                                 .equ TC2_LCMPCINTLVL0_bp = 4 ; Low Byte Compare C Interrupt Level bit 0 position
                                 .equ TC2_LCMPCINTLVL1_bm = (1<<5) ; Low Byte Compare C Interrupt Level bit 1 mask
                                 .equ TC2_LCMPCINTLVL1_bp = 5 ; Low Byte Compare C Interrupt Level bit 1 position
                                 .equ TC2_LCMPBINTLVL_gm = 0x0C ; Low Byte Compare B Interrupt Level group mask
                                 .equ TC2_LCMPBINTLVL_gp = 2 ; Low Byte Compare B Interrupt Level group position
                                 .equ TC2_LCMPBINTLVL0_bm = (1<<2) ; Low Byte Compare B Interrupt Level bit 0 mask
                                 .equ TC2_LCMPBINTLVL0_bp = 2 ; Low Byte Compare B Interrupt Level bit 0 position
                                 .equ TC2_LCMPBINTLVL1_bm = (1<<3) ; Low Byte Compare B Interrupt Level bit 1 mask
                                 .equ TC2_LCMPBINTLVL1_bp = 3 ; Low Byte Compare B Interrupt Level bit 1 position
                                 .equ TC2_LCMPAINTLVL_gm = 0x03 ; Low Byte Compare A Interrupt Level group mask
                                 .equ TC2_LCMPAINTLVL_gp = 0 ; Low Byte Compare A Interrupt Level group position
                                 .equ TC2_LCMPAINTLVL0_bm = (1<<0) ; Low Byte Compare A Interrupt Level bit 0 mask
                                 .equ TC2_LCMPAINTLVL0_bp = 0 ; Low Byte Compare A Interrupt Level bit 0 position
                                 .equ TC2_LCMPAINTLVL1_bm = (1<<1) ; Low Byte Compare A Interrupt Level bit 1 mask
                                 .equ TC2_LCMPAINTLVL1_bp = 1 ; Low Byte Compare A Interrupt Level bit 1 position
                                 
                                 ; TC2_CTRLF masks
                                 .equ TC2_CMD_gm = 0x0C ; Command group mask
                                 .equ TC2_CMD_gp = 2 ; Command group position
                                 .equ TC2_CMD0_bm = (1<<2) ; Command bit 0 mask
                                 .equ TC2_CMD0_bp = 2 ; Command bit 0 position
                                 .equ TC2_CMD1_bm = (1<<3) ; Command bit 1 mask
                                 .equ TC2_CMD1_bp = 3 ; Command bit 1 position
                                 .equ TC2_CMDEN_gm = 0x03 ; Command Enable group mask
                                 .equ TC2_CMDEN_gp = 0 ; Command Enable group position
                                 .equ TC2_CMDEN0_bm = (1<<0) ; Command Enable bit 0 mask
                                 .equ TC2_CMDEN0_bp = 0 ; Command Enable bit 0 position
                                 .equ TC2_CMDEN1_bm = (1<<1) ; Command Enable bit 1 mask
                                 .equ TC2_CMDEN1_bp = 1 ; Command Enable bit 1 position
                                 
                                 ; TC2_INTFLAGS masks
                                 .equ TC2_LCMPDIF_bm = 0x80 ; Low Byte Compare D Interrupt Flag bit mask
                                 .equ TC2_LCMPDIF_bp = 7 ; Low Byte Compare D Interrupt Flag bit position
                                 .equ TC2_LCMPCIF_bm = 0x40 ; Low Byte Compare C Interrupt Flag bit mask
                                 .equ TC2_LCMPCIF_bp = 6 ; Low Byte Compare C Interrupt Flag bit position
                                 .equ TC2_LCMPBIF_bm = 0x20 ; Low Byte Compare B Interrupt Flag bit mask
                                 .equ TC2_LCMPBIF_bp = 5 ; Low Byte Compare B Interrupt Flag bit position
                                 .equ TC2_LCMPAIF_bm = 0x10 ; Low Byte Compare A Interrupt Flag bit mask
                                 .equ TC2_LCMPAIF_bp = 4 ; Low Byte Compare A Interrupt Flag bit position
                                 .equ TC2_HUNFIF_bm = 0x02 ; High Byte Underflow Interrupt Flag bit mask
                                 .equ TC2_HUNFIF_bp = 1 ; High Byte Underflow Interrupt Flag bit position
                                 .equ TC2_LUNFIF_bm = 0x01 ; Low Byte Underflow Interrupt Flag bit mask
                                 .equ TC2_LUNFIF_bp = 0 ; Low Byte Underflow Interrupt Flag bit position
                                  
                                 ; Clock Selection
                                 .equ TC2_CLKSEL_OFF_gc = (0x00<<0) ; Timer Off
                                 .equ TC2_CLKSEL_DIV1_gc = (0x01<<0) ; System Clock
                                 .equ TC2_CLKSEL_DIV2_gc = (0x02<<0) ; System Clock / 2
                                 .equ TC2_CLKSEL_DIV4_gc = (0x03<<0) ; System Clock / 4
                                 .equ TC2_CLKSEL_DIV8_gc = (0x04<<0) ; System Clock / 8
                                 .equ TC2_CLKSEL_DIV64_gc = (0x05<<0) ; System Clock / 64
                                 .equ TC2_CLKSEL_DIV256_gc = (0x06<<0) ; System Clock / 256
                                 .equ TC2_CLKSEL_DIV1024_gc = (0x07<<0) ; System Clock / 1024
                                 .equ TC2_CLKSEL_EVCH0_gc = (0x08<<0) ; Event Channel 0
                                 .equ TC2_CLKSEL_EVCH1_gc = (0x09<<0) ; Event Channel 1
                                 .equ TC2_CLKSEL_EVCH2_gc = (0x0A<<0) ; Event Channel 2
                                 .equ TC2_CLKSEL_EVCH3_gc = (0x0B<<0) ; Event Channel 3
                                 .equ TC2_CLKSEL_EVCH4_gc = (0x0C<<0) ; Event Channel 4
                                 .equ TC2_CLKSEL_EVCH5_gc = (0x0D<<0) ; Event Channel 5
                                 .equ TC2_CLKSEL_EVCH6_gc = (0x0E<<0) ; Event Channel 6
                                 .equ TC2_CLKSEL_EVCH7_gc = (0x0F<<0) ; Event Channel 7
                                 
                                 ; Byte Mode
                                 .equ TC2_BYTEM_NORMAL_gc = (0x00<<0) ; 16-bit mode
                                 .equ TC2_BYTEM_BYTEMODE_gc = (0x01<<0) ; Timer/Counter operating in byte mode only (TC2)
                                 .equ TC2_BYTEM_SPLITMODE_gc = (0x02<<0) ; Timer/Counter split into two 8-bit Counters
                                 
                                 ; High Byte Underflow Interrupt Level
                                 .equ TC2_HUNFINTLVL_OFF_gc = (0x00<<2) ; Interrupt Disabled
                                 .equ TC2_HUNFINTLVL_LO_gc = (0x01<<2) ; Low Level
                                 .equ TC2_HUNFINTLVL_MED_gc = (0x02<<2) ; Medium Level
                                 .equ TC2_HUNFINTLVL_HI_gc = (0x03<<2) ; High Level
                                 
                                 ; Low Byte Underflow Interrupt Level
                                 .equ TC2_LUNFINTLVL_OFF_gc = (0x00<<0) ; Interrupt Disabled
                                 .equ TC2_LUNFINTLVL_LO_gc = (0x01<<0) ; Low Level
                                 .equ TC2_LUNFINTLVL_MED_gc = (0x02<<0) ; Medium Level
                                 .equ TC2_LUNFINTLVL_HI_gc = (0x03<<0) ; High Level
                                 
                                 ; Low Byte Compare D Interrupt Level
                                 .equ TC2_LCMPDINTLVL_OFF_gc = (0x00<<6) ; Interrupt Disabled
                                 .equ TC2_LCMPDINTLVL_LO_gc = (0x01<<6) ; Low Level
                                 .equ TC2_LCMPDINTLVL_MED_gc = (0x02<<6) ; Medium Level
                                 .equ TC2_LCMPDINTLVL_HI_gc = (0x03<<6) ; High Level
                                 
                                 ; Low Byte Compare C Interrupt Level
                                 .equ TC2_LCMPCINTLVL_OFF_gc = (0x00<<4) ; Interrupt Disabled
                                 .equ TC2_LCMPCINTLVL_LO_gc = (0x01<<4) ; Low Level
                                 .equ TC2_LCMPCINTLVL_MED_gc = (0x02<<4) ; Medium Level
                                 .equ TC2_LCMPCINTLVL_HI_gc = (0x03<<4) ; High Level
                                 
                                 ; Low Byte Compare B Interrupt Level
                                 .equ TC2_LCMPBINTLVL_OFF_gc = (0x00<<2) ; Interrupt Disabled
                                 .equ TC2_LCMPBINTLVL_LO_gc = (0x01<<2) ; Low Level
                                 .equ TC2_LCMPBINTLVL_MED_gc = (0x02<<2) ; Medium Level
                                 .equ TC2_LCMPBINTLVL_HI_gc = (0x03<<2) ; High Level
                                 
                                 ; Low Byte Compare A Interrupt Level
                                 .equ TC2_LCMPAINTLVL_OFF_gc = (0x00<<0) ; Interrupt Disabled
                                 .equ TC2_LCMPAINTLVL_LO_gc = (0x01<<0) ; Low Level
                                 .equ TC2_LCMPAINTLVL_MED_gc = (0x02<<0) ; Medium Level
                                 .equ TC2_LCMPAINTLVL_HI_gc = (0x03<<0) ; High Level
                                 
                                 ; Timer/Counter Command
                                 .equ TC2_CMD_NONE_gc = (0x00<<2) ; No Command
                                 .equ TC2_CMD_RESTART_gc = (0x02<<2) ; Force Restart
                                 .equ TC2_CMD_RESET_gc = (0x03<<2) ; Force Hard Reset
                                 
                                 ; Timer/Counter Command
                                 .equ TC2_CMDEN_LOW_gc = (0x01<<0) ; Low Byte Timer/Counter
                                 .equ TC2_CMDEN_HIGH_gc = (0x02<<0) ; High Byte Timer/Counter
                                 .equ TC2_CMDEN_BOTH_gc = (0x03<<0) ; Both Low Byte and High Byte Timer/Counters
                                 
                                 
                                 ;***************************************************************************
                                 ;** AWEX - Timer/Counter Advanced Waveform Extension
                                 ;***************************************************************************/
                                 
                                 ; AWEX_CTRL masks
                                 .equ AWEX_PGM_bm = 0x20 ; Pattern Generation Mode bit mask
                                 .equ AWEX_PGM_bp = 5 ; Pattern Generation Mode bit position
                                 .equ AWEX_CWCM_bm = 0x10 ; Common Waveform Channel Mode bit mask
                                 .equ AWEX_CWCM_bp = 4 ; Common Waveform Channel Mode bit position
                                 .equ AWEX_DTICCDEN_bm = 0x08 ; Dead Time Insertion Compare Channel D Enable bit mask
                                 .equ AWEX_DTICCDEN_bp = 3 ; Dead Time Insertion Compare Channel D Enable bit position
                                 .equ AWEX_DTICCCEN_bm = 0x04 ; Dead Time Insertion Compare Channel C Enable bit mask
                                 .equ AWEX_DTICCCEN_bp = 2 ; Dead Time Insertion Compare Channel C Enable bit position
                                 .equ AWEX_DTICCBEN_bm = 0x02 ; Dead Time Insertion Compare Channel B Enable bit mask
                                 .equ AWEX_DTICCBEN_bp = 1 ; Dead Time Insertion Compare Channel B Enable bit position
                                 .equ AWEX_DTICCAEN_bm = 0x01 ; Dead Time Insertion Compare Channel A Enable bit mask
                                 .equ AWEX_DTICCAEN_bp = 0 ; Dead Time Insertion Compare Channel A Enable bit position
                                 
                                 ; AWEX_FDCTRL masks
                                 .equ AWEX_FDDBD_bm = 0x10 ; Fault Detect on Disable Break Disable bit mask
                                 .equ AWEX_FDDBD_bp = 4 ; Fault Detect on Disable Break Disable bit position
                                 .equ AWEX_FDMODE_bm = 0x04 ; Fault Detect Mode bit mask
                                 .equ AWEX_FDMODE_bp = 2 ; Fault Detect Mode bit position
                                 .equ AWEX_FDACT_gm = 0x03 ; Fault Detect Action group mask
                                 .equ AWEX_FDACT_gp = 0 ; Fault Detect Action group position
                                 .equ AWEX_FDACT0_bm = (1<<0) ; Fault Detect Action bit 0 mask
                                 .equ AWEX_FDACT0_bp = 0 ; Fault Detect Action bit 0 position
                                 .equ AWEX_FDACT1_bm = (1<<1) ; Fault Detect Action bit 1 mask
                                 .equ AWEX_FDACT1_bp = 1 ; Fault Detect Action bit 1 position
                                 
                                 ; AWEX_STATUS masks
                                 .equ AWEX_FDF_bm = 0x04 ; Fault Detect Flag bit mask
                                 .equ AWEX_FDF_bp = 2 ; Fault Detect Flag bit position
                                 .equ AWEX_DTHSBUFV_bm = 0x02 ; Dead Time High Side Buffer Valid bit mask
                                 .equ AWEX_DTHSBUFV_bp = 1 ; Dead Time High Side Buffer Valid bit position
                                 .equ AWEX_DTLSBUFV_bm = 0x01 ; Dead Time Low Side Buffer Valid bit mask
                                 .equ AWEX_DTLSBUFV_bp = 0 ; Dead Time Low Side Buffer Valid bit position
                                 
                                 ; AWEX_STATUSSET masks
                                 ; Masks for FDF aready defined
                                 ; Masks for DTHSBUFV aready defined
                                 ; Masks for DTLSBUFV aready defined
                                  
                                 ; Fault Detect Action
                                 .equ AWEX_FDACT_NONE_gc = (0x00<<0) ; No Fault Protection
                                 .equ AWEX_FDACT_CLEAROE_gc = (0x01<<0) ; Clear Output Enable Bits
                                 .equ AWEX_FDACT_CLEARDIR_gc = (0x03<<0) ; Clear I/O Port Direction Bits
                                 
                                 
                                 ;***************************************************************************
                                 ;** HIRES - Timer/Counter High-Resolution Extension
                                 ;***************************************************************************/
                                 
                                 ; HIRES_CTRLA masks
                                 .equ HIRES_HREN_gm = 0x03 ; High Resolution Enable group mask
                                 .equ HIRES_HREN_gp = 0 ; High Resolution Enable group position
                                 .equ HIRES_HREN0_bm = (1<<0) ; High Resolution Enable bit 0 mask
                                 .equ HIRES_HREN0_bp = 0 ; High Resolution Enable bit 0 position
                                 .equ HIRES_HREN1_bm = (1<<1) ; High Resolution Enable bit 1 mask
                                 .equ HIRES_HREN1_bp = 1 ; High Resolution Enable bit 1 position
                                 .equ HIRES_HRPLUS_bm = (1<<2) ; High Resolution Plus bit mask
                                 .equ HIRES_HRPLUS_bp = 2 ; High Resolution Plus bit position
                                  
                                 ; High Resolution Enable
                                 .equ HIRES_HREN_NONE_gc = (0x00<<0) ; No Fault Protection
                                 .equ HIRES_HREN_TC0_gc = (0x01<<0) ; Enable High Resolution on Timer/Counter 0
                                 .equ HIRES_HREN_TC1_gc = (0x02<<0) ; Enable High Resolution on Timer/Counter 1
                                 .equ HIRES_HREN_BOTH_gc = (0x03<<0) ; Enable High Resolution both Timer/Counters
                                 
                                 
                                 ;***************************************************************************
                                 ;** USART - Universal Asynchronous Receiver-Transmitter
                                 ;***************************************************************************/
                                 
                                 ; USART_STATUS masks
                                 .equ USART_RXCIF_bm = 0x80 ; Receive Interrupt Flag bit mask
                                 .equ USART_RXCIF_bp = 7 ; Receive Interrupt Flag bit position
                                 .equ USART_TXCIF_bm = 0x40 ; Transmit Interrupt Flag bit mask
                                 .equ USART_TXCIF_bp = 6 ; Transmit Interrupt Flag bit position
                                 .equ USART_DREIF_bm = 0x20 ; Data Register Empty Flag bit mask
                                 .equ USART_DREIF_bp = 5 ; Data Register Empty Flag bit position
                                 .equ USART_FERR_bm = 0x10 ; Frame Error bit mask
                                 .equ USART_FERR_bp = 4 ; Frame Error bit position
                                 .equ USART_BUFOVF_bm = 0x08 ; Buffer Overflow bit mask
                                 .equ USART_BUFOVF_bp = 3 ; Buffer Overflow bit position
                                 .equ USART_PERR_bm = 0x04 ; Parity Error bit mask
                                 .equ USART_PERR_bp = 2 ; Parity Error bit position
                                 .equ USART_RXB8_bm = 0x01 ; Receive Bit 8 bit mask
                                 .equ USART_RXB8_bp = 0 ; Receive Bit 8 bit position
                                 
                                 ; USART_CTRLA masks
                                 .equ USART_RXCINTLVL_gm = 0x30 ; Receive Interrupt Level group mask
                                 .equ USART_RXCINTLVL_gp = 4 ; Receive Interrupt Level group position
                                 .equ USART_RXCINTLVL0_bm = (1<<4) ; Receive Interrupt Level bit 0 mask
                                 .equ USART_RXCINTLVL0_bp = 4 ; Receive Interrupt Level bit 0 position
                                 .equ USART_RXCINTLVL1_bm = (1<<5) ; Receive Interrupt Level bit 1 mask
                                 .equ USART_RXCINTLVL1_bp = 5 ; Receive Interrupt Level bit 1 position
                                 .equ USART_TXCINTLVL_gm = 0x0C ; Transmit Interrupt Level group mask
                                 .equ USART_TXCINTLVL_gp = 2 ; Transmit Interrupt Level group position
                                 .equ USART_TXCINTLVL0_bm = (1<<2) ; Transmit Interrupt Level bit 0 mask
                                 .equ USART_TXCINTLVL0_bp = 2 ; Transmit Interrupt Level bit 0 position
                                 .equ USART_TXCINTLVL1_bm = (1<<3) ; Transmit Interrupt Level bit 1 mask
                                 .equ USART_TXCINTLVL1_bp = 3 ; Transmit Interrupt Level bit 1 position
                                 .equ USART_DREINTLVL_gm = 0x03 ; Data Register Empty Interrupt Level group mask
                                 .equ USART_DREINTLVL_gp = 0 ; Data Register Empty Interrupt Level group position
                                 .equ USART_DREINTLVL0_bm = (1<<0) ; Data Register Empty Interrupt Level bit 0 mask
                                 .equ USART_DREINTLVL0_bp = 0 ; Data Register Empty Interrupt Level bit 0 position
                                 .equ USART_DREINTLVL1_bm = (1<<1) ; Data Register Empty Interrupt Level bit 1 mask
                                 .equ USART_DREINTLVL1_bp = 1 ; Data Register Empty Interrupt Level bit 1 position
                                 
                                 ; USART_CTRLB masks
                                 .equ USART_RXEN_bm = 0x10 ; Receiver Enable bit mask
                                 .equ USART_RXEN_bp = 4 ; Receiver Enable bit position
                                 .equ USART_TXEN_bm = 0x08 ; Transmitter Enable bit mask
                                 .equ USART_TXEN_bp = 3 ; Transmitter Enable bit position
                                 .equ USART_CLK2X_bm = 0x04 ; Double transmission speed bit mask
                                 .equ USART_CLK2X_bp = 2 ; Double transmission speed bit position
                                 .equ USART_MPCM_bm = 0x02 ; Multi-processor Communication Mode bit mask
                                 .equ USART_MPCM_bp = 1 ; Multi-processor Communication Mode bit position
                                 .equ USART_TXB8_bm = 0x01 ; Transmit bit 8 bit mask
                                 .equ USART_TXB8_bp = 0 ; Transmit bit 8 bit position
                                 
                                 ; USART_CTRLC masks
                                 .equ USART_CMODE_gm = 0xC0 ; Communication Mode group mask
                                 .equ USART_CMODE_gp = 6 ; Communication Mode group position
                                 .equ USART_CMODE0_bm = (1<<6) ; Communication Mode bit 0 mask
                                 .equ USART_CMODE0_bp = 6 ; Communication Mode bit 0 position
                                 .equ USART_CMODE1_bm = (1<<7) ; Communication Mode bit 1 mask
                                 .equ USART_CMODE1_bp = 7 ; Communication Mode bit 1 position
                                 .equ USART_PMODE_gm = 0x30 ; Parity Mode group mask
                                 .equ USART_PMODE_gp = 4 ; Parity Mode group position
                                 .equ USART_PMODE0_bm = (1<<4) ; Parity Mode bit 0 mask
                                 .equ USART_PMODE0_bp = 4 ; Parity Mode bit 0 position
                                 .equ USART_PMODE1_bm = (1<<5) ; Parity Mode bit 1 mask
                                 .equ USART_PMODE1_bp = 5 ; Parity Mode bit 1 position
                                 .equ USART_SBMODE_bm = 0x08 ; Stop Bit Mode bit mask
                                 .equ USART_SBMODE_bp = 3 ; Stop Bit Mode bit position
                                 .equ USART_CHSIZE_gm = 0x07 ; Character Size group mask
                                 .equ USART_CHSIZE_gp = 0 ; Character Size group position
                                 .equ USART_CHSIZE0_bm = (1<<0) ; Character Size bit 0 mask
                                 .equ USART_CHSIZE0_bp = 0 ; Character Size bit 0 position
                                 .equ USART_CHSIZE1_bm = (1<<1) ; Character Size bit 1 mask
                                 .equ USART_CHSIZE1_bp = 1 ; Character Size bit 1 position
                                 .equ USART_CHSIZE2_bm = (1<<2) ; Character Size bit 2 mask
                                 .equ USART_CHSIZE2_bp = 2 ; Character Size bit 2 position
                                 
                                 ; USART_BAUDCTRLA masks
                                 .equ USART_BSEL_gm = 0xFF ; Baud Rate Selection Bits [7:0] group mask
                                 .equ USART_BSEL_gp = 0 ; Baud Rate Selection Bits [7:0] group position
                                 .equ USART_BSEL0_bm = (1<<0) ; Baud Rate Selection Bits [7:0] bit 0 mask
                                 .equ USART_BSEL0_bp = 0 ; Baud Rate Selection Bits [7:0] bit 0 position
                                 .equ USART_BSEL1_bm = (1<<1) ; Baud Rate Selection Bits [7:0] bit 1 mask
                                 .equ USART_BSEL1_bp = 1 ; Baud Rate Selection Bits [7:0] bit 1 position
                                 .equ USART_BSEL2_bm = (1<<2) ; Baud Rate Selection Bits [7:0] bit 2 mask
                                 .equ USART_BSEL2_bp = 2 ; Baud Rate Selection Bits [7:0] bit 2 position
                                 .equ USART_BSEL3_bm = (1<<3) ; Baud Rate Selection Bits [7:0] bit 3 mask
                                 .equ USART_BSEL3_bp = 3 ; Baud Rate Selection Bits [7:0] bit 3 position
                                 .equ USART_BSEL4_bm = (1<<4) ; Baud Rate Selection Bits [7:0] bit 4 mask
                                 .equ USART_BSEL4_bp = 4 ; Baud Rate Selection Bits [7:0] bit 4 position
                                 .equ USART_BSEL5_bm = (1<<5) ; Baud Rate Selection Bits [7:0] bit 5 mask
                                 .equ USART_BSEL5_bp = 5 ; Baud Rate Selection Bits [7:0] bit 5 position
                                 .equ USART_BSEL6_bm = (1<<6) ; Baud Rate Selection Bits [7:0] bit 6 mask
                                 .equ USART_BSEL6_bp = 6 ; Baud Rate Selection Bits [7:0] bit 6 position
                                 .equ USART_BSEL7_bm = (1<<7) ; Baud Rate Selection Bits [7:0] bit 7 mask
                                 .equ USART_BSEL7_bp = 7 ; Baud Rate Selection Bits [7:0] bit 7 position
                                 
                                 ; USART_BAUDCTRLB masks
                                 .equ USART_BSCALE_gm = 0xF0 ; Baud Rate Scale group mask
                                 .equ USART_BSCALE_gp = 4 ; Baud Rate Scale group position
                                 .equ USART_BSCALE0_bm = (1<<4) ; Baud Rate Scale bit 0 mask
                                 .equ USART_BSCALE0_bp = 4 ; Baud Rate Scale bit 0 position
                                 .equ USART_BSCALE1_bm = (1<<5) ; Baud Rate Scale bit 1 mask
                                 .equ USART_BSCALE1_bp = 5 ; Baud Rate Scale bit 1 position
                                 .equ USART_BSCALE2_bm = (1<<6) ; Baud Rate Scale bit 2 mask
                                 .equ USART_BSCALE2_bp = 6 ; Baud Rate Scale bit 2 position
                                 .equ USART_BSCALE3_bm = (1<<7) ; Baud Rate Scale bit 3 mask
                                 .equ USART_BSCALE3_bp = 7 ; Baud Rate Scale bit 3 position
                                 ; Masks for BSEL aready defined
                                  
                                 ; Receive Complete Interrupt level
                                 .equ USART_RXCINTLVL_OFF_gc = (0x00<<4) ; Interrupt Disabled
                                 .equ USART_RXCINTLVL_LO_gc = (0x01<<4) ; Low Level
                                 .equ USART_RXCINTLVL_MED_gc = (0x02<<4) ; Medium Level
                                 .equ USART_RXCINTLVL_HI_gc = (0x03<<4) ; High Level
                                 
                                 ; Transmit Complete Interrupt level
                                 .equ USART_TXCINTLVL_OFF_gc = (0x00<<2) ; Interrupt Disabled
                                 .equ USART_TXCINTLVL_LO_gc = (0x01<<2) ; Low Level
                                 .equ USART_TXCINTLVL_MED_gc = (0x02<<2) ; Medium Level
                                 .equ USART_TXCINTLVL_HI_gc = (0x03<<2) ; High Level
                                 
                                 ; Data Register Empty Interrupt level
                                 .equ USART_DREINTLVL_OFF_gc = (0x00<<0) ; Interrupt Disabled
                                 .equ USART_DREINTLVL_LO_gc = (0x01<<0) ; Low Level
                                 .equ USART_DREINTLVL_MED_gc = (0x02<<0) ; Medium Level
                                 .equ USART_DREINTLVL_HI_gc = (0x03<<0) ; High Level
                                 
                                 ; Character Size
                                 .equ USART_CHSIZE_5BIT_gc = (0x00<<0) ; Character size: 5 bit
                                 .equ USART_CHSIZE_6BIT_gc = (0x01<<0) ; Character size: 6 bit
                                 .equ USART_CHSIZE_7BIT_gc = (0x02<<0) ; Character size: 7 bit
                                 .equ USART_CHSIZE_8BIT_gc = (0x03<<0) ; Character size: 8 bit
                                 .equ USART_CHSIZE_9BIT_gc = (0x07<<0) ; Character size: 9 bit
                                 
                                 ; Communication Mode
                                 .equ USART_CMODE_ASYNCHRONOUS_gc = (0x00<<6) ; Asynchronous Mode
                                 .equ USART_CMODE_SYNCHRONOUS_gc = (0x01<<6) ; Synchronous Mode
                                 .equ USART_CMODE_IRDA_gc = (0x02<<6) ; IrDA Mode
                                 .equ USART_CMODE_MSPI_gc = (0x03<<6) ; Master SPI Mode
                                 
                                 ; Parity Mode
                                 .equ USART_PMODE_DISABLED_gc = (0x00<<4) ; No Parity
                                 .equ USART_PMODE_EVEN_gc = (0x02<<4) ; Even Parity
                                 .equ USART_PMODE_ODD_gc = (0x03<<4) ; Odd Parity
                                 
                                 
                                 ;***************************************************************************
                                 ;** SPI - Serial Peripheral Interface
                                 ;***************************************************************************/
                                 
                                 ; SPI_CTRL masks
                                 .equ SPI_CLK2X_bm = 0x80 ; Enable Double Speed bit mask
                                 .equ SPI_CLK2X_bp = 7 ; Enable Double Speed bit position
                                 .equ SPI_ENABLE_bm = 0x40 ; Enable Module bit mask
                                 .equ SPI_ENABLE_bp = 6 ; Enable Module bit position
                                 .equ SPI_DORD_bm = 0x20 ; Data Order Setting bit mask
                                 .equ SPI_DORD_bp = 5 ; Data Order Setting bit position
                                 .equ SPI_MASTER_bm = 0x10 ; Master Operation Enable bit mask
                                 .equ SPI_MASTER_bp = 4 ; Master Operation Enable bit position
                                 .equ SPI_MODE_gm = 0x0C ; SPI Mode group mask
                                 .equ SPI_MODE_gp = 2 ; SPI Mode group position
                                 .equ SPI_MODE0_bm = (1<<2) ; SPI Mode bit 0 mask
                                 .equ SPI_MODE0_bp = 2 ; SPI Mode bit 0 position
                                 .equ SPI_MODE1_bm = (1<<3) ; SPI Mode bit 1 mask
                                 .equ SPI_MODE1_bp = 3 ; SPI Mode bit 1 position
                                 .equ SPI_PRESCALER_gm = 0x03 ; Prescaler group mask
                                 .equ SPI_PRESCALER_gp = 0 ; Prescaler group position
                                 .equ SPI_PRESCALER0_bm = (1<<0) ; Prescaler bit 0 mask
                                 .equ SPI_PRESCALER0_bp = 0 ; Prescaler bit 0 position
                                 .equ SPI_PRESCALER1_bm = (1<<1) ; Prescaler bit 1 mask
                                 .equ SPI_PRESCALER1_bp = 1 ; Prescaler bit 1 position
                                 
                                 ; SPI_INTCTRL masks
                                 .equ SPI_INTLVL_gm = 0x03 ; Interrupt level group mask
                                 .equ SPI_INTLVL_gp = 0 ; Interrupt level group position
                                 .equ SPI_INTLVL0_bm = (1<<0) ; Interrupt level bit 0 mask
                                 .equ SPI_INTLVL0_bp = 0 ; Interrupt level bit 0 position
                                 .equ SPI_INTLVL1_bm = (1<<1) ; Interrupt level bit 1 mask
                                 .equ SPI_INTLVL1_bp = 1 ; Interrupt level bit 1 position
                                 
                                 ; SPI_STATUS masks
                                 .equ SPI_IF_bm = 0x80 ; Interrupt Flag bit mask
                                 .equ SPI_IF_bp = 7 ; Interrupt Flag bit position
                                 .equ SPI_WRCOL_bm = 0x40 ; Write Collision bit mask
                                 .equ SPI_WRCOL_bp = 6 ; Write Collision bit position
                                  
                                 ; SPI Mode
                                 .equ SPI_MODE_0_gc = (0x00<<2) ; SPI Mode 0
                                 .equ SPI_MODE_1_gc = (0x01<<2) ; SPI Mode 1
                                 .equ SPI_MODE_2_gc = (0x02<<2) ; SPI Mode 2
                                 .equ SPI_MODE_3_gc = (0x03<<2) ; SPI Mode 3
                                 
                                 ; Prescaler setting
                                 .equ SPI_PRESCALER_DIV4_gc = (0x00<<0) ; System Clock / 4
                                 .equ SPI_PRESCALER_DIV16_gc = (0x01<<0) ; System Clock / 16
                                 .equ SPI_PRESCALER_DIV64_gc = (0x02<<0) ; System Clock / 64
                                 .equ SPI_PRESCALER_DIV128_gc = (0x03<<0) ; System Clock / 128
                                 
                                 ; Interrupt level
                                 .equ SPI_INTLVL_OFF_gc = (0x00<<0) ; Interrupt Disabled
                                 .equ SPI_INTLVL_LO_gc = (0x01<<0) ; Low Level
                                 .equ SPI_INTLVL_MED_gc = (0x02<<0) ; Medium Level
                                 .equ SPI_INTLVL_HI_gc = (0x03<<0) ; High Level
                                 
                                 
                                 ;***************************************************************************
                                 ;** IRCOM - IR Communication Module
                                 ;***************************************************************************/
                                 
                                 ; IRCOM_CTRL masks
                                 .equ IRCOM_EVSEL_gm = 0x0F ; Event Channel Select group mask
                                 .equ IRCOM_EVSEL_gp = 0 ; Event Channel Select group position
                                 .equ IRCOM_EVSEL0_bm = (1<<0) ; Event Channel Select bit 0 mask
                                 .equ IRCOM_EVSEL0_bp = 0 ; Event Channel Select bit 0 position
                                 .equ IRCOM_EVSEL1_bm = (1<<1) ; Event Channel Select bit 1 mask
                                 .equ IRCOM_EVSEL1_bp = 1 ; Event Channel Select bit 1 position
                                 .equ IRCOM_EVSEL2_bm = (1<<2) ; Event Channel Select bit 2 mask
                                 .equ IRCOM_EVSEL2_bp = 2 ; Event Channel Select bit 2 position
                                 .equ IRCOM_EVSEL3_bm = (1<<3) ; Event Channel Select bit 3 mask
                                 .equ IRCOM_EVSEL3_bp = 3 ; Event Channel Select bit 3 position
                                  
                                 ; Event channel selection
                                 .equ IRDA_EVSEL_OFF_gc = (0x00<<0) ; No Event Source
                                 .equ IRDA_EVSEL_0_gc = (0x08<<0) ; Event Channel 0
                                 .equ IRDA_EVSEL_1_gc = (0x09<<0) ; Event Channel 1
                                 .equ IRDA_EVSEL_2_gc = (0x0A<<0) ; Event Channel 2
                                 .equ IRDA_EVSEL_3_gc = (0x0B<<0) ; Event Channel 3
                                 .equ IRDA_EVSEL_4_gc = (0x0C<<0) ; Event Channel 4
                                 .equ IRDA_EVSEL_5_gc = (0x0D<<0) ; Event Channel 5
                                 .equ IRDA_EVSEL_6_gc = (0x0E<<0) ; Event Channel 6
                                 .equ IRDA_EVSEL_7_gc = (0x0F<<0) ; Event Channel 7
                                 
                                 
                                 ;***************************************************************************
                                 ;** FUSE - Fuses and Lockbits
                                 ;***************************************************************************/
                                 
                                 ; NVM_LOCKBITS_LOCKBITS masks
                                 .equ NVM_LOCKBITS_BLBB_gm = 0xC0 ; Boot Lock Bits - Boot Section group mask
                                 .equ NVM_LOCKBITS_BLBB_gp = 6 ; Boot Lock Bits - Boot Section group position
                                 .equ NVM_LOCKBITS_BLBB0_bm = (1<<6) ; Boot Lock Bits - Boot Section bit 0 mask
                                 .equ NVM_LOCKBITS_BLBB0_bp = 6 ; Boot Lock Bits - Boot Section bit 0 position
                                 .equ NVM_LOCKBITS_BLBB1_bm = (1<<7) ; Boot Lock Bits - Boot Section bit 1 mask
                                 .equ NVM_LOCKBITS_BLBB1_bp = 7 ; Boot Lock Bits - Boot Section bit 1 position
                                 .equ NVM_LOCKBITS_BLBA_gm = 0x30 ; Boot Lock Bits - Application Section group mask
                                 .equ NVM_LOCKBITS_BLBA_gp = 4 ; Boot Lock Bits - Application Section group position
                                 .equ NVM_LOCKBITS_BLBA0_bm = (1<<4) ; Boot Lock Bits - Application Section bit 0 mask
                                 .equ NVM_LOCKBITS_BLBA0_bp = 4 ; Boot Lock Bits - Application Section bit 0 position
                                 .equ NVM_LOCKBITS_BLBA1_bm = (1<<5) ; Boot Lock Bits - Application Section bit 1 mask
                                 .equ NVM_LOCKBITS_BLBA1_bp = 5 ; Boot Lock Bits - Application Section bit 1 position
                                 .equ NVM_LOCKBITS_BLBAT_gm = 0x0C ; Boot Lock Bits - Application Table group mask
                                 .equ NVM_LOCKBITS_BLBAT_gp = 2 ; Boot Lock Bits - Application Table group position
                                 .equ NVM_LOCKBITS_BLBAT0_bm = (1<<2) ; Boot Lock Bits - Application Table bit 0 mask
                                 .equ NVM_LOCKBITS_BLBAT0_bp = 2 ; Boot Lock Bits - Application Table bit 0 position
                                 .equ NVM_LOCKBITS_BLBAT1_bm = (1<<3) ; Boot Lock Bits - Application Table bit 1 mask
                                 .equ NVM_LOCKBITS_BLBAT1_bp = 3 ; Boot Lock Bits - Application Table bit 1 position
                                 .equ NVM_LOCKBITS_LB_gm = 0x03 ; Lock Bits group mask
                                 .equ NVM_LOCKBITS_LB_gp = 0 ; Lock Bits group position
                                 .equ NVM_LOCKBITS_LB0_bm = (1<<0) ; Lock Bits bit 0 mask
                                 .equ NVM_LOCKBITS_LB0_bp = 0 ; Lock Bits bit 0 position
                                 .equ NVM_LOCKBITS_LB1_bm = (1<<1) ; Lock Bits bit 1 mask
                                 .equ NVM_LOCKBITS_LB1_bp = 1 ; Lock Bits bit 1 position
                                 
                                 ; NVM_FUSES_FUSEBYTE0 masks
                                 .equ NVM_FUSES_JTAGUSERID_gm = 0xFF ; JTAG User ID group mask
                                 .equ NVM_FUSES_JTAGUSERID_gp = 0 ; JTAG User ID group position
                                 .equ NVM_FUSES_JTAGUSERID0_bm = (1<<0) ; JTAG User ID bit 0 mask
                                 .equ NVM_FUSES_JTAGUSERID0_bp = 0 ; JTAG User ID bit 0 position
                                 .equ NVM_FUSES_JTAGUSERID1_bm = (1<<1) ; JTAG User ID bit 1 mask
                                 .equ NVM_FUSES_JTAGUSERID1_bp = 1 ; JTAG User ID bit 1 position
                                 .equ NVM_FUSES_JTAGUSERID2_bm = (1<<2) ; JTAG User ID bit 2 mask
                                 .equ NVM_FUSES_JTAGUSERID2_bp = 2 ; JTAG User ID bit 2 position
                                 .equ NVM_FUSES_JTAGUSERID3_bm = (1<<3) ; JTAG User ID bit 3 mask
                                 .equ NVM_FUSES_JTAGUSERID3_bp = 3 ; JTAG User ID bit 3 position
                                 .equ NVM_FUSES_JTAGUSERID4_bm = (1<<4) ; JTAG User ID bit 4 mask
                                 .equ NVM_FUSES_JTAGUSERID4_bp = 4 ; JTAG User ID bit 4 position
                                 .equ NVM_FUSES_JTAGUSERID5_bm = (1<<5) ; JTAG User ID bit 5 mask
                                 .equ NVM_FUSES_JTAGUSERID5_bp = 5 ; JTAG User ID bit 5 position
                                 .equ NVM_FUSES_JTAGUSERID6_bm = (1<<6) ; JTAG User ID bit 6 mask
                                 .equ NVM_FUSES_JTAGUSERID6_bp = 6 ; JTAG User ID bit 6 position
                                 .equ NVM_FUSES_JTAGUSERID7_bm = (1<<7) ; JTAG User ID bit 7 mask
                                 .equ NVM_FUSES_JTAGUSERID7_bp = 7 ; JTAG User ID bit 7 position
                                 
                                 ; NVM_FUSES_FUSEBYTE1 masks
                                 .equ NVM_FUSES_WDWP_gm = 0xF0 ; Watchdog Window Timeout Period group mask
                                 .equ NVM_FUSES_WDWP_gp = 4 ; Watchdog Window Timeout Period group position
                                 .equ NVM_FUSES_WDWP0_bm = (1<<4) ; Watchdog Window Timeout Period bit 0 mask
                                 .equ NVM_FUSES_WDWP0_bp = 4 ; Watchdog Window Timeout Period bit 0 position
                                 .equ NVM_FUSES_WDWP1_bm = (1<<5) ; Watchdog Window Timeout Period bit 1 mask
                                 .equ NVM_FUSES_WDWP1_bp = 5 ; Watchdog Window Timeout Period bit 1 position
                                 .equ NVM_FUSES_WDWP2_bm = (1<<6) ; Watchdog Window Timeout Period bit 2 mask
                                 .equ NVM_FUSES_WDWP2_bp = 6 ; Watchdog Window Timeout Period bit 2 position
                                 .equ NVM_FUSES_WDWP3_bm = (1<<7) ; Watchdog Window Timeout Period bit 3 mask
                                 .equ NVM_FUSES_WDWP3_bp = 7 ; Watchdog Window Timeout Period bit 3 position
                                 .equ NVM_FUSES_WDP_gm = 0x0F ; Watchdog Timeout Period group mask
                                 .equ NVM_FUSES_WDP_gp = 0 ; Watchdog Timeout Period group position
                                 .equ NVM_FUSES_WDP0_bm = (1<<0) ; Watchdog Timeout Period bit 0 mask
                                 .equ NVM_FUSES_WDP0_bp = 0 ; Watchdog Timeout Period bit 0 position
                                 .equ NVM_FUSES_WDP1_bm = (1<<1) ; Watchdog Timeout Period bit 1 mask
                                 .equ NVM_FUSES_WDP1_bp = 1 ; Watchdog Timeout Period bit 1 position
                                 .equ NVM_FUSES_WDP2_bm = (1<<2) ; Watchdog Timeout Period bit 2 mask
                                 .equ NVM_FUSES_WDP2_bp = 2 ; Watchdog Timeout Period bit 2 position
                                 .equ NVM_FUSES_WDP3_bm = (1<<3) ; Watchdog Timeout Period bit 3 mask
                                 .equ NVM_FUSES_WDP3_bp = 3 ; Watchdog Timeout Period bit 3 position
                                 
                                 ; NVM_FUSES_FUSEBYTE2 masks
                                 .equ NVM_FUSES_BOOTRST_bm = 0x40 ; Boot Loader Section Reset Vector bit mask
                                 .equ NVM_FUSES_BOOTRST_bp = 6 ; Boot Loader Section Reset Vector bit position
                                 .equ NVM_FUSES_TOSCSEL_bm = 0x20 ; Timer Oscillator pin location bit mask
                                 .equ NVM_FUSES_TOSCSEL_bp = 5 ; Timer Oscillator pin location bit position
                                 .equ NVM_FUSES_BODPD_gm = 0x03 ; BOD Operation in Power-Down Mode group mask
                                 .equ NVM_FUSES_BODPD_gp = 0 ; BOD Operation in Power-Down Mode group position
                                 .equ NVM_FUSES_BODPD0_bm = (1<<0) ; BOD Operation in Power-Down Mode bit 0 mask
                                 .equ NVM_FUSES_BODPD0_bp = 0 ; BOD Operation in Power-Down Mode bit 0 position
                                 .equ NVM_FUSES_BODPD1_bm = (1<<1) ; BOD Operation in Power-Down Mode bit 1 mask
                                 .equ NVM_FUSES_BODPD1_bp = 1 ; BOD Operation in Power-Down Mode bit 1 position
                                 
                                 ; NVM_FUSES_FUSEBYTE4 masks
                                 .equ NVM_FUSES_RSTDISBL_bm = 0x10 ; External Reset Disable bit mask
                                 .equ NVM_FUSES_RSTDISBL_bp = 4 ; External Reset Disable bit position
                                 .equ NVM_FUSES_SUT_gm = 0x0C ; Start-up Time group mask
                                 .equ NVM_FUSES_SUT_gp = 2 ; Start-up Time group position
                                 .equ NVM_FUSES_SUT0_bm = (1<<2) ; Start-up Time bit 0 mask
                                 .equ NVM_FUSES_SUT0_bp = 2 ; Start-up Time bit 0 position
                                 .equ NVM_FUSES_SUT1_bm = (1<<3) ; Start-up Time bit 1 mask
                                 .equ NVM_FUSES_SUT1_bp = 3 ; Start-up Time bit 1 position
                                 .equ NVM_FUSES_WDLOCK_bm = 0x02 ; Watchdog Timer Lock bit mask
                                 .equ NVM_FUSES_WDLOCK_bp = 1 ; Watchdog Timer Lock bit position
                                 .equ NVM_FUSES_JTAGEN_bm = 0x01 ; JTAG Interface Enable bit mask
                                 .equ NVM_FUSES_JTAGEN_bp = 0 ; JTAG Interface Enable bit position
                                 
                                 ; NVM_FUSES_FUSEBYTE5 masks
                                 .equ NVM_FUSES_BODACT_gm = 0x30 ; BOD Operation in Active Mode group mask
                                 .equ NVM_FUSES_BODACT_gp = 4 ; BOD Operation in Active Mode group position
                                 .equ NVM_FUSES_BODACT0_bm = (1<<4) ; BOD Operation in Active Mode bit 0 mask
                                 .equ NVM_FUSES_BODACT0_bp = 4 ; BOD Operation in Active Mode bit 0 position
                                 .equ NVM_FUSES_BODACT1_bm = (1<<5) ; BOD Operation in Active Mode bit 1 mask
                                 .equ NVM_FUSES_BODACT1_bp = 5 ; BOD Operation in Active Mode bit 1 position
                                 .equ NVM_FUSES_EESAVE_bm = 0x08 ; Preserve EEPROM Through Chip Erase bit mask
                                 .equ NVM_FUSES_EESAVE_bp = 3 ; Preserve EEPROM Through Chip Erase bit position
                                 .equ NVM_FUSES_BODLVL_gm = 0x07 ; Brown Out Detection Voltage Level group mask
                                 .equ NVM_FUSES_BODLVL_gp = 0 ; Brown Out Detection Voltage Level group position
                                 .equ NVM_FUSES_BODLVL0_bm = (1<<0) ; Brown Out Detection Voltage Level bit 0 mask
                                 .equ NVM_FUSES_BODLVL0_bp = 0 ; Brown Out Detection Voltage Level bit 0 position
                                 .equ NVM_FUSES_BODLVL1_bm = (1<<1) ; Brown Out Detection Voltage Level bit 1 mask
                                 .equ NVM_FUSES_BODLVL1_bp = 1 ; Brown Out Detection Voltage Level bit 1 position
                                 .equ NVM_FUSES_BODLVL2_bm = (1<<2) ; Brown Out Detection Voltage Level bit 2 mask
                                 .equ NVM_FUSES_BODLVL2_bp = 2 ; Brown Out Detection Voltage Level bit 2 position
                                  
                                 ; Boot lock bits - boot section
                                 .equ FUSE_BLBB_RWLOCK_gc = (0x00<<6) ; Read and write not allowed
                                 .equ FUSE_BLBB_RLOCK_gc = (0x01<<6) ; Read not allowed
                                 .equ FUSE_BLBB_WLOCK_gc = (0x02<<6) ; Write not allowed
                                 .equ FUSE_BLBB_NOLOCK_gc = (0x03<<6) ; No locks
                                 
                                 ; Boot lock bits - application section
                                 .equ FUSE_BLBA_RWLOCK_gc = (0x00<<4) ; Read and write not allowed
                                 .equ FUSE_BLBA_RLOCK_gc = (0x01<<4) ; Read not allowed
                                 .equ FUSE_BLBA_WLOCK_gc = (0x02<<4) ; Write not allowed
                                 .equ FUSE_BLBA_NOLOCK_gc = (0x03<<4) ; No locks
                                 
                                 ; Boot lock bits - application table section
                                 .equ FUSE_BLBAT_RWLOCK_gc = (0x00<<2) ; Read and write not allowed
                                 .equ FUSE_BLBAT_RLOCK_gc = (0x01<<2) ; Read not allowed
                                 .equ FUSE_BLBAT_WLOCK_gc = (0x02<<2) ; Write not allowed
                                 .equ FUSE_BLBAT_NOLOCK_gc = (0x03<<2) ; No locks
                                 
                                 ; Lock bits
                                 .equ FUSE_LB_RWLOCK_gc = (0x00<<0) ; Read and write not allowed
                                 .equ FUSE_LB_WLOCK_gc = (0x02<<0) ; Write not allowed
                                 .equ FUSE_LB_NOLOCK_gc = (0x03<<0) ; No locks
                                 
                                 ; Boot Loader Section Reset Vector
                                 .equ BOOTRST_BOOTLDR_gc = (0x00<<6) ; Boot Loader Reset
                                 .equ BOOTRST_APPLICATION_gc = (0x01<<6) ; Application Reset
                                 
                                 ; Timer Oscillator pin location
                                 .equ TOSCSEL_ALTERNATE_gc = (0x00<<5) ; TOSC1 / TOSC2 on separate pins
                                 .equ TOSCSEL_XTAL_gc = (0x01<<5) ; TOSC1 / TOSC2 shared with XTAL1 / XTAL2
                                 
                                 ; BOD operation
                                 .equ BOD_SAMPLED_gc = (0x01<<0) ; BOD enabled in sampled mode
                                 .equ BOD_CONTINUOUS_gc = (0x02<<0) ; BOD enabled continuously
                                 .equ BOD_DISABLED_gc = (0x03<<0) ; BOD Disabled
                                 
                                 ; Watchdog (Window) Timeout Period
                                 .equ WD_8CLK_gc = (0x00<<4) ; 8 cycles (8ms @ 3.3V)
                                 .equ WD_16CLK_gc = (0x01<<4) ; 16 cycles (16ms @ 3.3V)
                                 .equ WD_32CLK_gc = (0x02<<4) ; 32 cycles (32ms @ 3.3V)
                                 .equ WD_64CLK_gc = (0x03<<4) ; 64 cycles (64ms @ 3.3V)
                                 .equ WD_128CLK_gc = (0x04<<4) ; 128 cycles (0.125s @ 3.3V)
                                 .equ WD_256CLK_gc = (0x05<<4) ; 256 cycles (0.25s @ 3.3V)
                                 .equ WD_512CLK_gc = (0x06<<4) ; 512 cycles (0.5s @ 3.3V)
                                 .equ WD_1KCLK_gc = (0x07<<4) ; 1K cycles (1s @ 3.3V)
                                 .equ WD_2KCLK_gc = (0x08<<4) ; 2K cycles (2s @ 3.3V)
                                 .equ WD_4KCLK_gc = (0x09<<4) ; 4K cycles (4s @ 3.3V)
                                 .equ WD_8KCLK_gc = (0x0A<<4) ; 8K cycles (8s @ 3.3V)
                                 
                                 ; Start-up Time
                                 .equ SUT_0MS_gc = (0x03<<2) ; 0 ms
                                 .equ SUT_4MS_gc = (0x01<<2) ; 4 ms
                                 .equ SUT_64MS_gc = (0x00<<2) ; 64 ms
                                 
                                 ; Brown Out Detection Voltage Level
                                 .equ BODLVL_1V6_gc = (0x07<<0) ; 1.6 V
                                 .equ BODLVL_1V8_gc = (0x06<<0) ; 1.8 V
                                 .equ BODLVL_2V0_gc = (0x05<<0) ; 2.0 V
                                 .equ BODLVL_2V2_gc = (0x04<<0) ; 2.2 V
                                 .equ BODLVL_2V4_gc = (0x03<<0) ; 2.4 V
                                 .equ BODLVL_2V6_gc = (0x02<<0) ; 2.6 V
                                 .equ BODLVL_2V8_gc = (0x01<<0) ; 2.8 V
                                 .equ BODLVL_3V0_gc = (0x00<<0) ; 3.0 V
                                 
                                 
                                 ;***************************************************************************
                                 ;** SIGROW - Signature Row
                                 ;***************************************************************************/
                                  
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 
                                 
                                 #define PROGMEM_START 0x00000
                                 #define PROGMEM_SIZE 0x22000
                                 #define PROGMEM_END (0x00000 + 0x22000 - 1)
                                 
                                 #define APP_SECTION_START 0x00000
                                 #define APP_SECTION_SIZE 0x20000
                                 #define APP_SECTION_END (0x00000 + 0x20000 - 1)
                                 
                                 #define APPTABLE_SECTION_START 0x1E000
                                 #define APPTABLE_SECTION_SIZE 0x2000
                                 #define APPTABLE_SECTION_END (0x1E000 + 0x2000 - 1)
                                 
                                 #define BOOT_SECTION_START 0x20000
                                 #define BOOT_SECTION_SIZE 0x2000
                                 #define BOOT_SECTION_END (0x20000 + 0x2000 - 1)
                                 
                                 #define EEPROM_START 0x00000
                                 #define EEPROM_SIZE 0x0800
                                 #define EEPROM_END (0x00000 + 0x0800 - 1)
                                 
                                 #define FUSE_START 0x0000
                                 #define FUSE_SIZE 0x0006
                                 #define FUSE_END (0x0000 + 0x0006 - 1)
                                 
                                 #define LOCKBIT_START 0x0000
                                 #define LOCKBIT_SIZE 0x0001
                                 #define LOCKBIT_END (0x0000 + 0x0001 - 1)
                                 
                                 #define SIGNATURES_START 0x0000
                                 #define SIGNATURES_SIZE 0x0003
                                 #define SIGNATURES_END (0x0000 + 0x0003 - 1)
                                 
                                 #define USER_SIGNATURES_START 0x0000
                                 #define USER_SIGNATURES_SIZE 0x0200
                                 #define USER_SIGNATURES_END (0x0000 + 0x0200 - 1)
                                 
                                 #define PROD_SIGNATURES_START 0x0000
                                 #define PROD_SIGNATURES_SIZE 0x0040
                                 #define PROD_SIGNATURES_END (0x0000 + 0x0040 - 1)
                                 
                                 #define DATAMEM_START 0x0000
                                 #define DATAMEM_SIZE 0x1000000
                                 #define DATAMEM_END (0x0000 + 0x1000000 - 1)
                                 
                                 #define IO_START 0x0000
                                 #define IO_SIZE 0x001000
                                 #define IO_END (0x0000 + 0x001000 - 1)
                                 
                                 #define MAPPED_EEPROM_START 0x1000
                                 #define MAPPED_EEPROM_SIZE 0x000800
                                 #define MAPPED_EEPROM_END (0x1000 + 0x000800 - 1)
                                 
                                 #define INTERNAL_SRAM_START 0x2000
                                 #define INTERNAL_SRAM_SIZE 0x002000
                                 #define INTERNAL_SRAM_END (0x2000 + 0x002000 - 1)
                                 
                                 #define EXTERNAL_SRAM_START 0x4000
                                 #define EXTERNAL_SRAM_SIZE 0xFFC000
                                 #define EXTERNAL_SRAM_END (0x4000 + 0xFFC000 - 1)
                                 
                                 
                                 ; Legacy definitions
                                 .equ	FLASHEND    = (PROGMEM_END / 2)  ; Note: Word address
                                 .equ	IOEND       = IO_END
                                 .equ	SRAM_START	= INTERNAL_SRAM_START
                                 .equ	SRAM_SIZE	= INTERNAL_SRAM_SIZE
                                 .equ	RAMEND	    = INTERNAL_SRAM_END
                                 .equ	XRAMEND	    = EXTERNAL_SRAM_END
                                 .equ	E2END	    = EEPROM_END
                                 .equ	EEPROMEND	= EEPROM_END
                                 
                                 
                                 ; Definitions used by the assembler
                                 #pragma AVRPART MEMORY PROG_FLASH 0x22000
                                 #pragma AVRPART MEMORY EEPROM 0x0800
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 0x002000
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x2000
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS, ABSOLUTE ADDRESSES ****************************
                                 
                                 ; OSC interrupt vectors
                                 .equ OSC_OSCF_vect = 2 ; Oscillator Failure Interrupt (NMI)
                                 
                                 ; PORTC interrupt vectors
                                 .equ PORTC_INT0_vect = 4 ; External Interrupt 0
                                 .equ PORTC_INT1_vect = 6 ; External Interrupt 1
                                 
                                 ; PORTR interrupt vectors
                                 .equ PORTR_INT0_vect = 8 ; External Interrupt 0
                                 .equ PORTR_INT1_vect = 10 ; External Interrupt 1
                                 
                                 ; DMA interrupt vectors
                                 .equ DMA_CH0_vect = 12 ; Channel 0 Interrupt
                                 .equ DMA_CH1_vect = 14 ; Channel 1 Interrupt
                                 .equ DMA_CH2_vect = 16 ; Channel 2 Interrupt
                                 .equ DMA_CH3_vect = 18 ; Channel 3 Interrupt
                                 
                                 ; RTC interrupt vectors
                                 .equ RTC_OVF_vect = 20 ; Overflow Interrupt
                                 .equ RTC_COMP_vect = 22 ; Compare Interrupt
                                 
                                 ; TWIC interrupt vectors
                                 .equ TWIC_TWIS_vect = 24 ; TWI Slave Interrupt
                                 .equ TWIC_TWIM_vect = 26 ; TWI Master Interrupt
                                 
                                 ; TCC0 interrupt vectors
                                 .equ TCC0_OVF_vect = 28 ; Overflow Interrupt
                                 .equ TCC0_ERR_vect = 30 ; Error Interrupt
                                 .equ TCC0_CCA_vect = 32 ; Compare or Capture A Interrupt
                                 .equ TCC0_CCB_vect = 34 ; Compare or Capture B Interrupt
                                 .equ TCC0_CCC_vect = 36 ; Compare or Capture C Interrupt
                                 .equ TCC0_CCD_vect = 38 ; Compare or Capture D Interrupt
                                 
                                 ; TCC2 interrupt vectors
                                 .equ TCC2_LUNF_vect = 28 ; Low Byte Underflow Interrupt
                                 .equ TCC2_HUNF_vect = 30 ; High Byte Underflow Interrupt
                                 .equ TCC2_LCMPA_vect = 32 ; Low Byte Compare A Interrupt
                                 .equ TCC2_LCMPB_vect = 34 ; Low Byte Compare B Interrupt
                                 .equ TCC2_LCMPC_vect = 36 ; Low Byte Compare C Interrupt
                                 .equ TCC2_LCMPD_vect = 38 ; Low Byte Compare D Interrupt
                                 
                                 ; TCC1 interrupt vectors
                                 .equ TCC1_OVF_vect = 40 ; Overflow Interrupt
                                 .equ TCC1_ERR_vect = 42 ; Error Interrupt
                                 .equ TCC1_CCA_vect = 44 ; Compare or Capture A Interrupt
                                 .equ TCC1_CCB_vect = 46 ; Compare or Capture B Interrupt
                                 
                                 ; SPIC interrupt vectors
                                 .equ SPIC_INT_vect = 48 ; SPI Interrupt
                                 
                                 ; USARTC0 interrupt vectors
                                 .equ USARTC0_RXC_vect = 50 ; Reception Complete Interrupt
                                 .equ USARTC0_DRE_vect = 52 ; Data Register Empty Interrupt
                                 .equ USARTC0_TXC_vect = 54 ; Transmission Complete Interrupt
                                 
                                 ; USARTC1 interrupt vectors
                                 .equ USARTC1_RXC_vect = 56 ; Reception Complete Interrupt
                                 .equ USARTC1_DRE_vect = 58 ; Data Register Empty Interrupt
                                 .equ USARTC1_TXC_vect = 60 ; Transmission Complete Interrupt
                                 
                                 ; AES interrupt vectors
                                 .equ AES_INT_vect = 62 ; AES Interrupt
                                 
                                 ; NVM interrupt vectors
                                 .equ NVM_EE_vect = 64 ; EE Interrupt
                                 .equ NVM_SPM_vect = 66 ; SPM Interrupt
                                 
                                 ; PORTB interrupt vectors
                                 .equ PORTB_INT0_vect = 68 ; External Interrupt 0
                                 .equ PORTB_INT1_vect = 70 ; External Interrupt 1
                                 
                                 ; ACB interrupt vectors
                                 .equ ACB_AC0_vect = 72 ; AC0 Interrupt
                                 .equ ACB_AC1_vect = 74 ; AC1 Interrupt
                                 .equ ACB_ACW_vect = 76 ; ACW Window Mode Interrupt
                                 
                                 ; ADCB interrupt vectors
                                 .equ ADCB_CH0_vect = 78 ; Interrupt 0
                                 .equ ADCB_CH1_vect = 80 ; Interrupt 1
                                 .equ ADCB_CH2_vect = 82 ; Interrupt 2
                                 .equ ADCB_CH3_vect = 84 ; Interrupt 3
                                 
                                 ; PORTE interrupt vectors
                                 .equ PORTE_INT0_vect = 86 ; External Interrupt 0
                                 .equ PORTE_INT1_vect = 88 ; External Interrupt 1
                                 
                                 ; TWIE interrupt vectors
                                 .equ TWIE_TWIS_vect = 90 ; TWI Slave Interrupt
                                 .equ TWIE_TWIM_vect = 92 ; TWI Master Interrupt
                                 
                                 ; TCE0 interrupt vectors
                                 .equ TCE0_OVF_vect = 94 ; Overflow Interrupt
                                 .equ TCE0_ERR_vect = 96 ; Error Interrupt
                                 .equ TCE0_CCA_vect = 98 ; Compare or Capture A Interrupt
                                 .equ TCE0_CCB_vect = 100 ; Compare or Capture B Interrupt
                                 .equ TCE0_CCC_vect = 102 ; Compare or Capture C Interrupt
                                 .equ TCE0_CCD_vect = 104 ; Compare or Capture D Interrupt
                                 
                                 ; TCE2 interrupt vectors
                                 .equ TCE2_LUNF_vect = 94 ; Low Byte Underflow Interrupt
                                 .equ TCE2_HUNF_vect = 96 ; High Byte Underflow Interrupt
                                 .equ TCE2_LCMPA_vect = 98 ; Low Byte Compare A Interrupt
                                 .equ TCE2_LCMPB_vect = 100 ; Low Byte Compare B Interrupt
                                 .equ TCE2_LCMPC_vect = 102 ; Low Byte Compare C Interrupt
                                 .equ TCE2_LCMPD_vect = 104 ; Low Byte Compare D Interrupt
                                 
                                 ; TCE1 interrupt vectors
                                 .equ TCE1_OVF_vect = 106 ; Overflow Interrupt
                                 .equ TCE1_ERR_vect = 108 ; Error Interrupt
                                 .equ TCE1_CCA_vect = 110 ; Compare or Capture A Interrupt
                                 .equ TCE1_CCB_vect = 112 ; Compare or Capture B Interrupt
                                 
                                 ; SPIE interrupt vectors
                                 .equ SPIE_INT_vect = 114 ; SPI Interrupt
                                 
                                 ; USARTE0 interrupt vectors
                                 .equ USARTE0_RXC_vect = 116 ; Reception Complete Interrupt
                                 .equ USARTE0_DRE_vect = 118 ; Data Register Empty Interrupt
                                 .equ USARTE0_TXC_vect = 120 ; Transmission Complete Interrupt
                                 
                                 ; USARTE1 interrupt vectors
                                 .equ USARTE1_RXC_vect = 122 ; Reception Complete Interrupt
                                 .equ USARTE1_DRE_vect = 124 ; Data Register Empty Interrupt
                                 .equ USARTE1_TXC_vect = 126 ; Transmission Complete Interrupt
                                 
                                 ; PORTD interrupt vectors
                                 .equ PORTD_INT0_vect = 128 ; External Interrupt 0
                                 .equ PORTD_INT1_vect = 130 ; External Interrupt 1
                                 
                                 ; PORTA interrupt vectors
                                 .equ PORTA_INT0_vect = 132 ; External Interrupt 0
                                 .equ PORTA_INT1_vect = 134 ; External Interrupt 1
                                 
                                 ; ACA interrupt vectors
                                 .equ ACA_AC0_vect = 136 ; AC0 Interrupt
                                 .equ ACA_AC1_vect = 138 ; AC1 Interrupt
                                 .equ ACA_ACW_vect = 140 ; ACW Window Mode Interrupt
                                 
                                 ; ADCA interrupt vectors
                                 .equ ADCA_CH0_vect = 142 ; Interrupt 0
                                 .equ ADCA_CH1_vect = 144 ; Interrupt 1
                                 .equ ADCA_CH2_vect = 146 ; Interrupt 2
                                 .equ ADCA_CH3_vect = 148 ; Interrupt 3
                                 
                                 ; TWID interrupt vectors
                                 .equ TWID_TWIS_vect = 150 ; TWI Slave Interrupt
                                 .equ TWID_TWIM_vect = 152 ; TWI Master Interrupt
                                 
                                 ; TCD0 interrupt vectors
                                 .equ TCD0_OVF_vect = 154 ; Overflow Interrupt
                                 .equ TCD0_ERR_vect = 156 ; Error Interrupt
                                 .equ TCD0_CCA_vect = 158 ; Compare or Capture A Interrupt
                                 .equ TCD0_CCB_vect = 160 ; Compare or Capture B Interrupt
                                 .equ TCD0_CCC_vect = 162 ; Compare or Capture C Interrupt
                                 .equ TCD0_CCD_vect = 164 ; Compare or Capture D Interrupt
                                 
                                 ; TCD2 interrupt vectors
                                 .equ TCD2_LUNF_vect = 154 ; Low Byte Underflow Interrupt
                                 .equ TCD2_HUNF_vect = 156 ; High Byte Underflow Interrupt
                                 .equ TCD2_LCMPA_vect = 158 ; Low Byte Compare A Interrupt
                                 .equ TCD2_LCMPB_vect = 160 ; Low Byte Compare B Interrupt
                                 .equ TCD2_LCMPC_vect = 162 ; Low Byte Compare C Interrupt
                                 .equ TCD2_LCMPD_vect = 164 ; Low Byte Compare D Interrupt
                                 
                                 ; TCD1 interrupt vectors
                                 .equ TCD1_OVF_vect = 166 ; Overflow Interrupt
                                 .equ TCD1_ERR_vect = 168 ; Error Interrupt
                                 .equ TCD1_CCA_vect = 170 ; Compare or Capture A Interrupt
                                 .equ TCD1_CCB_vect = 172 ; Compare or Capture B Interrupt
                                 
                                 ; SPID interrupt vectors
                                 .equ SPID_INT_vect = 174 ; SPI Interrupt
                                 
                                 ; USARTD0 interrupt vectors
                                 .equ USARTD0_RXC_vect = 176 ; Reception Complete Interrupt
                                 .equ USARTD0_DRE_vect = 178 ; Data Register Empty Interrupt
                                 .equ USARTD0_TXC_vect = 180 ; Transmission Complete Interrupt
                                 
                                 ; USARTD1 interrupt vectors
                                 .equ USARTD1_RXC_vect = 182 ; Reception Complete Interrupt
                                 .equ USARTD1_DRE_vect = 184 ; Data Register Empty Interrupt
                                 .equ USARTD1_TXC_vect = 186 ; Transmission Complete Interrupt
                                 
                                 ; PORTQ interrupt vectors
                                 .equ PORTQ_INT0_vect = 188 ; External Interrupt 0
                                 .equ PORTQ_INT1_vect = 190 ; External Interrupt 1
                                 
                                 ; PORTH interrupt vectors
                                 .equ PORTH_INT0_vect = 192 ; External Interrupt 0
                                 .equ PORTH_INT1_vect = 194 ; External Interrupt 1
                                 
                                 ; PORTJ interrupt vectors
                                 .equ PORTJ_INT0_vect = 196 ; External Interrupt 0
                                 .equ PORTJ_INT1_vect = 198 ; External Interrupt 1
                                 
                                 ; PORTK interrupt vectors
                                 .equ PORTK_INT0_vect = 200 ; External Interrupt 0
                                 .equ PORTK_INT1_vect = 202 ; External Interrupt 1
                                 
                                 ; PORTF interrupt vectors
                                 .equ PORTF_INT0_vect = 208 ; External Interrupt 0
                                 .equ PORTF_INT1_vect = 210 ; External Interrupt 1
                                 
                                 ; TWIF interrupt vectors
                                 .equ TWIF_TWIS_vect = 212 ; TWI Slave Interrupt
                                 .equ TWIF_TWIM_vect = 214 ; TWI Master Interrupt
                                 
                                 ; TCF0 interrupt vectors
                                 .equ TCF0_OVF_vect = 216 ; Overflow Interrupt
                                 .equ TCF0_ERR_vect = 218 ; Error Interrupt
                                 .equ TCF0_CCA_vect = 220 ; Compare or Capture A Interrupt
                                 .equ TCF0_CCB_vect = 222 ; Compare or Capture B Interrupt
                                 .equ TCF0_CCC_vect = 224 ; Compare or Capture C Interrupt
                                 .equ TCF0_CCD_vect = 226 ; Compare or Capture D Interrupt
                                 
                                 ; TCF2 interrupt vectors
                                 .equ TCF2_LUNF_vect = 216 ; Low Byte Underflow Interrupt
                                 .equ TCF2_HUNF_vect = 218 ; High Byte Underflow Interrupt
                                 .equ TCF2_LCMPA_vect = 220 ; Low Byte Compare A Interrupt
                                 .equ TCF2_LCMPB_vect = 222 ; Low Byte Compare B Interrupt
                                 .equ TCF2_LCMPC_vect = 224 ; Low Byte Compare C Interrupt
                                 .equ TCF2_LCMPD_vect = 226 ; Low Byte Compare D Interrupt
                                 
                                 ; TCF1 interrupt vectors
                                 .equ TCF1_OVF_vect = 228 ; Overflow Interrupt
                                 .equ TCF1_ERR_vect = 230 ; Error Interrupt
                                 .equ TCF1_CCA_vect = 232 ; Compare or Capture A Interrupt
                                 .equ TCF1_CCB_vect = 234 ; Compare or Capture B Interrupt
                                 
                                 ; SPIF interrupt vectors
                                 .equ SPIF_INT_vect = 236 ; SPI Interrupt
                                 
                                 ; USARTF0 interrupt vectors
                                 .equ USARTF0_RXC_vect = 238 ; Reception Complete Interrupt
                                 .equ USARTF0_DRE_vect = 240 ; Data Register Empty Interrupt
                                 .equ USARTF0_TXC_vect = 242 ; Transmission Complete Interrupt
                                 
                                 ; USARTF1 interrupt vectors
                                 .equ USARTF1_RXC_vect = 244 ; Reception Complete Interrupt
                                 .equ USARTF1_DRE_vect = 246 ; Data Register Empty Interrupt
                                 .equ USARTF1_TXC_vect = 248 ; Transmission Complete Interrupt
                                 
                                 ; USB interrupt vectors
                                 .equ USB_BUSEVENT_vect = 250 ; SOF, suspend, resume, reset bus event interrupts, crc, underflow, overflow and stall error interrupts
                                 .equ USB_TRNCOMPL_vect = 252 ; Transaction complete interrupt
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS, MODULE BASES **********************************
                                 
                                 .equ OSC_vbase = 2
                                 .equ PORTC_vbase = 4
                                 .equ PORTR_vbase = 8
                                 .equ DMA_vbase = 12
                                 .equ RTC_vbase = 20
                                 .equ TWIC_vbase = 24
                                 .equ TCC0_vbase = 28
                                 .equ TCC2_vbase = 28
                                 .equ TCC1_vbase = 40
                                 .equ SPIC_vbase = 48
                                 .equ USARTC0_vbase = 50
                                 .equ USARTC1_vbase = 56
                                 .equ AES_vbase = 62
                                 .equ NVM_vbase = 64
                                 .equ PORTB_vbase = 68
                                 .equ ACB_vbase = 72
                                 .equ ADCB_vbase = 78
                                 .equ PORTE_vbase = 86
                                 .equ TWIE_vbase = 90
                                 .equ TCE0_vbase = 94
                                 .equ TCE2_vbase = 94
                                 .equ TCE1_vbase = 106
                                 .equ SPIE_vbase = 114
                                 .equ USARTE0_vbase = 116
                                 .equ USARTE1_vbase = 122
                                 .equ PORTD_vbase = 128
                                 .equ PORTA_vbase = 132
                                 .equ ACA_vbase = 136
                                 .equ ADCA_vbase = 142
                                 .equ TWID_vbase = 150
                                 .equ TCD0_vbase = 154
                                 .equ TCD2_vbase = 154
                                 .equ TCD1_vbase = 166
                                 .equ SPID_vbase = 174
                                 .equ USARTD0_vbase = 176
                                 .equ USARTD1_vbase = 182
                                 .equ PORTQ_vbase = 188
                                 .equ PORTH_vbase = 192
                                 .equ PORTJ_vbase = 196
                                 .equ PORTK_vbase = 200
                                 .equ PORTF_vbase = 208
                                 .equ TWIF_vbase = 212
                                 .equ TCF0_vbase = 216
                                 .equ TCF2_vbase = 216
                                 .equ TCF1_vbase = 228
                                 .equ SPIF_vbase = 236
                                 .equ USARTF0_vbase = 238
                                 .equ USARTF1_vbase = 244
                                 .equ USB_vbase = 250
                                 
                                 
                                 ; ***** INTERRUPT VECTORS, VECTOR OFFSETS *********************************
                                 
                                 ; OSC interrupt vector offsets
                                 
                                 .equ OSC_OSCF_voffset = 0
                                 
                                 ; AES interrupt vector offsets
                                 
                                 .equ AES_INT_voffset = 0
                                 
                                 ; DMA interrupt vector offsets
                                 
                                 .equ DMA_CH0_voffset = 0
                                 .equ DMA_CH1_voffset = 2
                                 .equ DMA_CH2_voffset = 4
                                 .equ DMA_CH3_voffset = 6
                                 
                                 ; NVM interrupt vector offsets
                                 
                                 .equ NVM_EE_voffset = 0
                                 .equ NVM_SPM_voffset = 2
                                 
                                 ; ADC interrupt vector offsets
                                 
                                 .equ ADC_CH0_voffset = 0
                                 .equ ADC_CH1_voffset = 2
                                 .equ ADC_CH2_voffset = 4
                                 .equ ADC_CH3_voffset = 6
                                 
                                 ; AC interrupt vector offsets
                                 
                                 .equ AC_AC0_voffset = 0
                                 .equ AC_AC1_voffset = 2
                                 .equ AC_ACW_voffset = 4
                                 
                                 ; RTC interrupt vector offsets
                                 
                                 .equ RTC_OVF_voffset = 0
                                 .equ RTC_COMP_voffset = 2
                                 
                                 ; TWI interrupt vector offsets
                                 
                                 .equ TWI_TWIS_voffset = 0
                                 .equ TWI_TWIM_voffset = 2
                                 
                                 ; USB interrupt vector offsets
                                 
                                 .equ USB_BUSEVENT_voffset = 0
                                 .equ USB_TRNCOMPL_voffset = 2
                                 
                                 ; PORT interrupt vector offsets
                                 
                                 .equ PORT_INT0_voffset = 0
                                 .equ PORT_INT1_voffset = 2
                                 
                                 ; TC0 interrupt vector offsets
                                 
                                 .equ TC0_OVF_voffset = 0
                                 .equ TC0_ERR_voffset = 2
                                 .equ TC0_CCA_voffset = 4
                                 .equ TC0_CCB_voffset = 6
                                 .equ TC0_CCC_voffset = 8
                                 .equ TC0_CCD_voffset = 10
                                 
                                 ; TC1 interrupt vector offsets
                                 
                                 .equ TC1_OVF_voffset = 0
                                 .equ TC1_ERR_voffset = 2
                                 .equ TC1_CCA_voffset = 4
                                 .equ TC1_CCB_voffset = 6
                                 
                                 ; TC2 interrupt vector offsets
                                 
                                 .equ TC2_LUNF_voffset = 0
                                 .equ TC2_HUNF_voffset = 2
                                 .equ TC2_LCMPA_voffset = 4
                                 .equ TC2_LCMPB_voffset = 6
                                 .equ TC2_LCMPC_voffset = 8
                                 .equ TC2_LCMPD_voffset = 10
                                 
                                 ; USART interrupt vector offsets
                                 
                                 .equ USART_RXC_voffset = 0
                                 .equ USART_DRE_voffset = 2
                                 .equ USART_TXC_voffset = 4
                                 
                                 ; SPI interrupt vector offsets
                                 
                                 .equ SPI_INT_voffset = 0
                                 
                                 
                                 
                                 .equ INT_VECTORS_SIZE = 254 ; size in words
                                 
                                 
                                 #endif  /* _ATxmega128A1UDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 
                                 
                                 ; Lab4_3a.asm
                                 ;
                                 ; Lab 4, Section 3, Part A
                                 ; Name: Kylie Lennon
                                 ; Class #: 11319
                                 ; PI Name: Timothy Carpenter
                                 ; Description: Write the data from the text file into the external SRAM
                                 ;			Then read back the data to the external I/O port at a rate
                                 ;			of 1 byte per 300 ms
                                 ;************************************************************************
                                 
                                 ;*********************************INCLUDES*******************************
                                 .include "ATxmega128a1udef.inc"
                                 
                                 
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : ATxmega128A1Udef.inc
                                 ;* Title             : Register/Bit Definitions for the ATxmega128A1U
                                 ;* Date              : Jan 01 2008
                                 ;* Version           : 1.00
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATxmega128A1U
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;*************************************************************************
                                 
                                 #ifndef _ATxmega128A1UDEF_INC_
                                 #endif  /* _ATxmega128A1UDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 
                                 ;***********END OF INCLUDES******************************
                                 
                                 ;*********************************EQUATES********************************
                                 .equ BIT0_bm = 0x01 << 0
                                 .equ BIT1_bm = 0x01 << 1
                                 .equ BIT2_bm = 0x01 << 2
                                 .equ BIT3_bm = 0x01 << 3
                                 .equ BIT4_bm = 0x01 << 4
                                 .equ BIT5_bm = 0x01 << 5
                                 .equ BIT6_bm = 0x01 << 6
                                 .equ BIT7_bm = 0x01 << 7
                                 ;***********END OF EQUATES*******************************
                                 
                                 ;***********MEMORY CONFIGURATION*************************
                                 ; program memory constants (if necessary)
                                 .cseg
                                 .org 0x200
                                 START_SRAM_TABLE:
                                 .include "sram_data_asm.txt"
000200 6e49
000201 7561
000202 7567
000203 6172                      
000204 206c
000205 6441
000206 7264
000207 7365                      .db 0x6c,0x20,0x41,0x64,0x64,0x72,0x65,0x73
000208 2073
000209 666f
00020a 4a20
00020b 686f                      .db 0x73,0x20,0x6f,0x66,0x20,0x4a,0x6f,0x68
00020c 206e
00020d 2e46
00020e 4b20
00020f 6e65                      .db 0x6e,0x20,0x46,0x2e,0x20,0x4b,0x65,0x6e
000210 656e
000211 7964
000212 0a0a
000213 5246                      .db 0x6e,0x65,0x64,0x79,0x0a,0x0a,0x46,0x52
000214 4449
000215 5941
000216 202c
000217 414a                      .db 0x49,0x44,0x41,0x59,0x2c,0x20,0x4a,0x41
000218 554e
000219 5241
00021a 2059
00021b 3032                      .db 0x4e,0x55,0x41,0x52,0x59,0x20,0x32,0x30
00021c 202c
00021d 3931
00021e 3136
00021f 560a                      .db 0x2c,0x20,0x31,0x39,0x36,0x31,0x0a,0x56
000220 6369
000221 2065
000222 7250
000223 7365                      .db 0x69,0x63,0x65,0x20,0x50,0x72,0x65,0x73
000224 6469
000225 6e65
000226 2074
000227 6f4a                      .db 0x69,0x64,0x65,0x6e,0x74,0x20,0x4a,0x6f
000228 6e68
000229 6f73
00022a 2c6e
00022b 4d20                      .db 0x68,0x6e,0x73,0x6f,0x6e,0x2c,0x20,0x4d
00022c 2e72
00022d 5320
00022e 6570
00022f 6b61                      .db 0x72,0x2e,0x20,0x53,0x70,0x65,0x61,0x6b
000230 7265
000231 202c
000232 724d
000233 202e                      .db 0x65,0x72,0x2c,0x20,0x4d,0x72,0x2e,0x20
000234 6843
000235 6569
000236 2066
000237 754a                      .db 0x43,0x68,0x69,0x65,0x66,0x20,0x4a,0x75
000238 7473
000239 6369
00023a 2c65
00023b 5020                      .db 0x73,0x74,0x69,0x63,0x65,0x2c,0x20,0x50
00023c 6572
00023d 6973
00023e 6564
00023f 746e                      .db 0x72,0x65,0x73,0x69,0x64,0x65,0x6e,0x74
000240 4520
000241 7369
000242 6e65
000243 6f68                      .db 0x20,0x45,0x69,0x73,0x65,0x6e,0x68,0x6f
000244 6577
000245 2c72
000246 5620
000247 6369                      .db 0x77,0x65,0x72,0x2c,0x20,0x56,0x69,0x63
000248 2065
000249 7250
00024a 7365
00024b 6469                      .db 0x65,0x20,0x50,0x72,0x65,0x73,0x69,0x64
00024c 6e65
00024d 2074
00024e 694e
00024f 6f78                      .db 0x65,0x6e,0x74,0x20,0x4e,0x69,0x78,0x6f
000250 2c6e
000251 5020
000252 6572
000253 6973                      .db 0x6e,0x2c,0x20,0x50,0x72,0x65,0x73,0x69
000254 6564
000255 746e
000256 5420
000257 7572                      .db 0x64,0x65,0x6e,0x74,0x20,0x54,0x72,0x75
000258 616d
000259 2c6e
00025a 7220
00025b 7665                      .db 0x6d,0x61,0x6e,0x2c,0x20,0x72,0x65,0x76
00025c 7265
00025d 6e65
00025e 2064
00025f 6c63                      .db 0x65,0x72,0x65,0x6e,0x64,0x20,0x63,0x6c
000260 7265
000261 7967
000262 202c
000263 6566                      .db 0x65,0x72,0x67,0x79,0x2c,0x20,0x66,0x65
000264 6c6c
000265 776f
000266 6320
000267 7469                      .db 0x6c,0x6c,0x6f,0x77,0x20,0x63,0x69,0x74
000268 7a69
000269 6e65
00026a 2c73
00026b 7720                      .db 0x69,0x7a,0x65,0x6e,0x73,0x2c,0x20,0x77
00026c 2065
00026d 626f
00026e 6573
00026f 7672                      .db 0x65,0x20,0x6f,0x62,0x73,0x65,0x72,0x76
000270 2065
000271 6f74
000272 6164
000273 2079                      .db 0x65,0x20,0x74,0x6f,0x64,0x61,0x79,0x20
000274 6f6e
000275 2074
000276 2061
000277 6976                      .db 0x6e,0x6f,0x74,0x20,0x61,0x20,0x76,0x69
000278 7463
000279 726f
00027a 2079
00027b 666f                      .db 0x63,0x74,0x6f,0x72,0x79,0x20,0x6f,0x66
00027c 7020
00027d 7261
00027e 7974
00027f 202c                      .db 0x20,0x70,0x61,0x72,0x74,0x79,0x2c,0x20
000280 7562
000281 2074
000282 2061
000283 6563                      .db 0x62,0x75,0x74,0x20,0x61,0x20,0x63,0x65
000284 656c
000285 7262
000286 7461
000287 6f69                      .db 0x6c,0x65,0x62,0x72,0x61,0x74,0x69,0x6f
000288 206e
000289 666f
00028a 6620
00028b 6572                      .db 0x6e,0x20,0x6f,0x66,0x20,0x66,0x72,0x65
00028c 6465
00028d 6d6f
00028e 2d2d
00028f 7973                      .db 0x65,0x64,0x6f,0x6d,0x2d,0x2d,0x73,0x79
000290 626d
000291 6c6f
000292 7a69
000293 6e69                      .db 0x6d,0x62,0x6f,0x6c,0x69,0x7a,0x69,0x6e
000294 2067
000295 6e61
000296 6520
000297 646e                      .db 0x67,0x20,0x61,0x6e,0x20,0x65,0x6e,0x64
000298 202c
000299 7361
00029a 7720
00029b 6c65                      .db 0x2c,0x20,0x61,0x73,0x20,0x77,0x65,0x6c
00029c 206c
00029d 7361
00029e 6120
00029f 6220                      .db 0x6c,0x20,0x61,0x73,0x20,0x61,0x20,0x62
0002a0 6765
0002a1 6e69
0002a2 696e
0002a3 676e                      .db 0x65,0x67,0x69,0x6e,0x6e,0x69,0x6e,0x67
0002a4 2d2d
0002a5 6973
0002a6 6e67
0002a7 6669                      .db 0x2d,0x2d,0x73,0x69,0x67,0x6e,0x69,0x66
0002a8 6979
0002a9 676e
0002aa 7220
0002ab 6e65                      .db 0x79,0x69,0x6e,0x67,0x20,0x72,0x65,0x6e
0002ac 7765
0002ad 6c61
0002ae 202c
0002af 7361                      .db 0x65,0x77,0x61,0x6c,0x2c,0x20,0x61,0x73
0002b0 7720
0002b1 6c65
0002b2 206c
0002b3 7361                      .db 0x20,0x77,0x65,0x6c,0x6c,0x20,0x61,0x73
0002b4 6320
0002b5 6168
0002b6 676e
0002b7 2e65                      .db 0x20,0x63,0x68,0x61,0x6e,0x67,0x65,0x2e
0002b8 4620
0002b9 726f
0002ba 4920
0002bb 6820                      .db 0x20,0x46,0x6f,0x72,0x20,0x49,0x20,0x68
0002bc 7661
0002bd 2065
0002be 7773
0002bf 726f                      .db 0x61,0x76,0x65,0x20,0x73,0x77,0x6f,0x72
0002c0 206e
0002c1 6562
0002c2 6f66
0002c3 6572                      .db 0x6e,0x20,0x62,0x65,0x66,0x6f,0x72,0x65
0002c4 7920
0002c5 756f
0002c6 6120
0002c7 646e                      .db 0x20,0x79,0x6f,0x75,0x20,0x61,0x6e,0x64
0002c8 4120
0002c9 6d6c
0002ca 6769
0002cb 7468                      .db 0x20,0x41,0x6c,0x6d,0x69,0x67,0x68,0x74
0002cc 2079
0002cd 6f47
0002ce 2064
0002cf 6874                      .db 0x79,0x20,0x47,0x6f,0x64,0x20,0x74,0x68
0002d0 2065
0002d1 6173
0002d2 656d
0002d3 7320                      .db 0x65,0x20,0x73,0x61,0x6d,0x65,0x20,0x73
0002d4 6c6f
0002d5 6d65
0002d6 206e
0002d7 616f                      .db 0x6f,0x6c,0x65,0x6d,0x6e,0x20,0x6f,0x61
0002d8 6874
0002d9 6f20
0002da 7275
0002db 6620                      .db 0x74,0x68,0x20,0x6f,0x75,0x72,0x20,0x66
0002dc 726f
0002dd 6265
0002de 6165
0002df 7372                      .db 0x6f,0x72,0x65,0x62,0x65,0x61,0x72,0x73
0002e0 7020
0002e1 6572
0002e2 6373
0002e3 6972                      .db 0x20,0x70,0x72,0x65,0x73,0x63,0x72,0x69
0002e4 6562
0002e5 2064
0002e6 656e
0002e7 7261                      .db 0x62,0x65,0x64,0x20,0x6e,0x65,0x61,0x72
0002e8 796c
0002e9 6120
0002ea 6320
0002eb 6e65                      .db 0x6c,0x79,0x20,0x61,0x20,0x63,0x65,0x6e
0002ec 7574
0002ed 7972
0002ee 6120
0002ef 646e                      .db 0x74,0x75,0x72,0x79,0x20,0x61,0x6e,0x64
0002f0 7420
0002f1 7268
0002f2 6565
0002f3 7120                      .db 0x20,0x74,0x68,0x72,0x65,0x65,0x20,0x71
0002f4 6175
0002f5 7472
0002f6 7265
0002f7 2073                      .db 0x75,0x61,0x72,0x74,0x65,0x72,0x73,0x20
0002f8 6761
0002f9 2e6f
0002fa 0a0a
0002fb 6854                      .db 0x61,0x67,0x6f,0x2e,0x0a,0x0a,0x54,0x68
0002fc 2065
0002fd 6f77
0002fe 6c72
0002ff 2064                      .db 0x65,0x20,0x77,0x6f,0x72,0x6c,0x64,0x20
000300 7369
000301 7620
000302 7265
000303 2079                      .db 0x69,0x73,0x20,0x76,0x65,0x72,0x79,0x20
000304 6964
000305 6666
000306 7265
000307 6e65                      .db 0x64,0x69,0x66,0x66,0x65,0x72,0x65,0x6e
000308 2074
000309 6f6e
00030a 2e77
00030b 4620                      .db 0x74,0x20,0x6e,0x6f,0x77,0x2e,0x20,0x46
00030c 726f
00030d 6d20
00030e 6e61
00030f 6820                      .db 0x6f,0x72,0x20,0x6d,0x61,0x6e,0x20,0x68
000310 6c6f
000311 7364
000312 6920
000313 206e                      .db 0x6f,0x6c,0x64,0x73,0x20,0x69,0x6e,0x20
000314 6968
000315 2073
000316 6f6d
000317 7472                      .db 0x68,0x69,0x73,0x20,0x6d,0x6f,0x72,0x74
000318 6c61
000319 6820
00031a 6e61
00031b 7364                      .db 0x61,0x6c,0x20,0x68,0x61,0x6e,0x64,0x73
00031c 7420
00031d 6568
00031e 7020
00031f 776f                      .db 0x20,0x74,0x68,0x65,0x20,0x70,0x6f,0x77
000320 7265
000321 7420
000322 206f
000323 6261                      .db 0x65,0x72,0x20,0x74,0x6f,0x20,0x61,0x62
000324 6c6f
000325 7369
000326 2068
000327 6c61                      .db 0x6f,0x6c,0x69,0x73,0x68,0x20,0x61,0x6c
000328 206c
000329 6f66
00032a 6d72
00032b 2073                      .db 0x6c,0x20,0x66,0x6f,0x72,0x6d,0x73,0x20
00032c 666f
00032d 6820
00032e 6d75
00032f 6e61                      .db 0x6f,0x66,0x20,0x68,0x75,0x6d,0x61,0x6e
000330 7020
000331 766f
000332 7265
000333 7974                      .db 0x20,0x70,0x6f,0x76,0x65,0x72,0x74,0x79
000334 6120
000335 646e
000336 6120
000337 6c6c                      .db 0x20,0x61,0x6e,0x64,0x20,0x61,0x6c,0x6c
000338 6620
000339 726f
00033a 736d
00033b 6f20                      .db 0x20,0x66,0x6f,0x72,0x6d,0x73,0x20,0x6f
00033c 2066
00033d 7568
00033e 616d
00033f 206e                      .db 0x66,0x20,0x68,0x75,0x6d,0x61,0x6e,0x20
000340 696c
000341 6566
000342 202e
000343 6e41                      .db 0x6c,0x69,0x66,0x65,0x2e,0x20,0x41,0x6e
000344 2064
000345 6579
000346 2074
000347 6874                      .db 0x64,0x20,0x79,0x65,0x74,0x20,0x74,0x68
000348 2065
000349 6173
00034a 656d
00034b 7220                      .db 0x65,0x20,0x73,0x61,0x6d,0x65,0x20,0x72
00034c 7665
00034d 6c6f
00034e 7475
00034f 6f69                      .db 0x65,0x76,0x6f,0x6c,0x75,0x74,0x69,0x6f
000350 616e
000351 7972
000352 6220
000353 6c65                      .db 0x6e,0x61,0x72,0x79,0x20,0x62,0x65,0x6c
000354 6569
000355 7366
000356 6620
000357 726f                      .db 0x69,0x65,0x66,0x73,0x20,0x66,0x6f,0x72
000358 7720
000359 6968
00035a 6863
00035b 6f20                      .db 0x20,0x77,0x68,0x69,0x63,0x68,0x20,0x6f
00035c 7275
00035d 6620
00035e 726f
00035f 6265                      .db 0x75,0x72,0x20,0x66,0x6f,0x72,0x65,0x62
000360 6165
000361 7372
000362 6620
000363 756f                      .db 0x65,0x61,0x72,0x73,0x20,0x66,0x6f,0x75
000364 6867
000365 2074
000366 7261
000367 2065                      .db 0x67,0x68,0x74,0x20,0x61,0x72,0x65,0x20
000368 7473
000369 6c69
00036a 206c
00036b 7461                      .db 0x73,0x74,0x69,0x6c,0x6c,0x20,0x61,0x74
00036c 6920
00036d 7373
00036e 6575
00036f 6120                      .db 0x20,0x69,0x73,0x73,0x75,0x65,0x20,0x61
000370 6f72
000371 6e75
000372 2064
000373 6874                      .db 0x72,0x6f,0x75,0x6e,0x64,0x20,0x74,0x68
000374 2065
000375 6c67
000376 626f
000377 2d65                      .db 0x65,0x20,0x67,0x6c,0x6f,0x62,0x65,0x2d
000378 742d
000379 6568
00037a 6220
00037b 6c65                      .db 0x2d,0x74,0x68,0x65,0x20,0x62,0x65,0x6c
00037c 6569
00037d 2066
00037e 6874
00037f 7461                      .db 0x69,0x65,0x66,0x20,0x74,0x68,0x61,0x74
000380 7420
000381 6568
000382 7220
000383 6769                      .db 0x20,0x74,0x68,0x65,0x20,0x72,0x69,0x67
000384 7468
000385 2073
000386 666f
000387 6d20                      .db 0x68,0x74,0x73,0x20,0x6f,0x66,0x20,0x6d
000388 6e61
000389 6320
00038a 6d6f
00038b 2065                      .db 0x61,0x6e,0x20,0x63,0x6f,0x6d,0x65,0x20
00038c 6f6e
00038d 2074
00038e 7266
00038f 6d6f                      .db 0x6e,0x6f,0x74,0x20,0x66,0x72,0x6f,0x6d
000390 7420
000391 6568
000392 6720
000393 6e65                      .db 0x20,0x74,0x68,0x65,0x20,0x67,0x65,0x6e
000394 7265
000395 736f
000396 7469
000397 2079                      .db 0x65,0x72,0x6f,0x73,0x69,0x74,0x79,0x20
000398 666f
000399 7420
00039a 6568
00039b 7320                      .db 0x6f,0x66,0x20,0x74,0x68,0x65,0x20,0x73
00039c 6174
00039d 6574
00039e 202c
00039f 7562                      .db 0x74,0x61,0x74,0x65,0x2c,0x20,0x62,0x75
0003a0 2074
0003a1 7266
0003a2 6d6f
0003a3 7420                      .db 0x74,0x20,0x66,0x72,0x6f,0x6d,0x20,0x74
0003a4 6568
0003a5 6820
0003a6 6e61
0003a7 2064                      .db 0x68,0x65,0x20,0x68,0x61,0x6e,0x64,0x20
0003a8 666f
0003a9 4720
0003aa 646f
0003ab 0a2e                      .db 0x6f,0x66,0x20,0x47,0x6f,0x64,0x2e,0x0a
0003ac 570a
0003ad 2065
0003ae 6164
0003af 6572                      .db 0x0a,0x57,0x65,0x20,0x64,0x61,0x72,0x65
0003b0 6e20
0003b1 746f
0003b2 6620
0003b3 726f                      .db 0x20,0x6e,0x6f,0x74,0x20,0x66,0x6f,0x72
0003b4 6567
0003b5 2074
0003b6 6f74
0003b7 6164                      .db 0x67,0x65,0x74,0x20,0x74,0x6f,0x64,0x61
0003b8 2079
0003b9 6874
0003ba 7461
0003bb 7720                      .db 0x79,0x20,0x74,0x68,0x61,0x74,0x20,0x77
0003bc 2065
0003bd 7261
0003be 2065
0003bf 6874                      .db 0x65,0x20,0x61,0x72,0x65,0x20,0x74,0x68
0003c0 2065
0003c1 6568
0003c2 7269
0003c3 2073                      .db 0x65,0x20,0x68,0x65,0x69,0x72,0x73,0x20
0003c4 666f
0003c5 7420
0003c6 6168
0003c7 2074                      .db 0x6f,0x66,0x20,0x74,0x68,0x61,0x74,0x20
0003c8 6966
0003c9 7372
0003ca 2074
0003cb 6572                      .db 0x66,0x69,0x72,0x73,0x74,0x20,0x72,0x65
0003cc 6f76
0003cd 756c
0003ce 6974
0003cf 6e6f                      .db 0x76,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e
0003d0 202e
0003d1 654c
0003d2 2074
0003d3 6874                      .db 0x2e,0x20,0x4c,0x65,0x74,0x20,0x74,0x68
0003d4 2065
0003d5 6f77
0003d6 6472
0003d7 6720                      .db 0x65,0x20,0x77,0x6f,0x72,0x64,0x20,0x67
0003d8 206f
0003d9 6f66
0003da 7472
0003db 2068                      .db 0x6f,0x20,0x66,0x6f,0x72,0x74,0x68,0x20
0003dc 7266
0003dd 6d6f
0003de 7420
0003df 6968                      .db 0x66,0x72,0x6f,0x6d,0x20,0x74,0x68,0x69
0003e0 2073
0003e1 6974
0003e2 656d
0003e3 6120                      .db 0x73,0x20,0x74,0x69,0x6d,0x65,0x20,0x61
0003e4 646e
0003e5 7020
0003e6 616c
0003e7 6563                      .db 0x6e,0x64,0x20,0x70,0x6c,0x61,0x63,0x65
0003e8 202c
0003e9 6f74
0003ea 6620
0003eb 6972                      .db 0x2c,0x20,0x74,0x6f,0x20,0x66,0x72,0x69
0003ec 6e65
0003ed 2064
0003ee 6e61
0003ef 2064                      .db 0x65,0x6e,0x64,0x20,0x61,0x6e,0x64,0x20
0003f0 6f66
0003f1 2065
0003f2 6c61
0003f3 6b69                      .db 0x66,0x6f,0x65,0x20,0x61,0x6c,0x69,0x6b
0003f4 2c65
0003f5 7420
0003f6 6168
0003f7 2074                      .db 0x65,0x2c,0x20,0x74,0x68,0x61,0x74,0x20
0003f8 6874
0003f9 2065
0003fa 6f74
0003fb 6372                      .db 0x74,0x68,0x65,0x20,0x74,0x6f,0x72,0x63
0003fc 2068
0003fd 6168
0003fe 2073
0003ff 6562                      .db 0x68,0x20,0x68,0x61,0x73,0x20,0x62,0x65
000400 6e65
000401 7020
000402 7361
000403 6573                      .db 0x65,0x6e,0x20,0x70,0x61,0x73,0x73,0x65
000404 2064
000405 6f74
000406 6120
000407 6e20                      .db 0x64,0x20,0x74,0x6f,0x20,0x61,0x20,0x6e
000408 7765
000409 6720
00040a 6e65
00040b 7265                      .db 0x65,0x77,0x20,0x67,0x65,0x6e,0x65,0x72
00040c 7461
00040d 6f69
00040e 206e
00040f 666f                      .db 0x61,0x74,0x69,0x6f,0x6e,0x20,0x6f,0x66
000410 4120
000411 656d
000412 6972
000413 6163                      .db 0x20,0x41,0x6d,0x65,0x72,0x69,0x63,0x61
000414 736e
000415 2d2d
000416 6f62
000417 6e72                      .db 0x6e,0x73,0x2d,0x2d,0x62,0x6f,0x72,0x6e
000418 6920
000419 206e
00041a 6874
00041b 7369                      .db 0x20,0x69,0x6e,0x20,0x74,0x68,0x69,0x73
00041c 6320
00041d 6e65
00041e 7574
00041f 7972                      .db 0x20,0x63,0x65,0x6e,0x74,0x75,0x72,0x79
000420 202c
000421 6574
000422 706d
000423 7265                      .db 0x2c,0x20,0x74,0x65,0x6d,0x70,0x65,0x72
000424 6465
000425 6220
000426 2079
000427 6177                      .db 0x65,0x64,0x20,0x62,0x79,0x20,0x77,0x61
000428 2c72
000429 6420
00042a 7369
00042b 6963                      .db 0x72,0x2c,0x20,0x64,0x69,0x73,0x63,0x69
00042c 6c70
00042d 6e69
00042e 6465
00042f 6220                      .db 0x70,0x6c,0x69,0x6e,0x65,0x64,0x20,0x62
000430 2079
000431 2061
000432 6168
000433 6472                      .db 0x79,0x20,0x61,0x20,0x68,0x61,0x72,0x64
000434 6120
000435 646e
000436 6220
000437 7469                      .db 0x20,0x61,0x6e,0x64,0x20,0x62,0x69,0x74
000438 6574
000439 2072
00043a 6570
00043b 6361                      .db 0x74,0x65,0x72,0x20,0x70,0x65,0x61,0x63
00043c 2c65
00043d 7020
00043e 6f72
00043f 6475                      .db 0x65,0x2c,0x20,0x70,0x72,0x6f,0x75,0x64
000440 6f20
000441 2066
000442 756f
000443 2072                      .db 0x20,0x6f,0x66,0x20,0x6f,0x75,0x72,0x20
000444 6e61
000445 6963
000446 6e65
000447 2074                      .db 0x61,0x6e,0x63,0x69,0x65,0x6e,0x74,0x20
000448 6568
000449 6972
00044a 6174
00044b 6567                      .db 0x68,0x65,0x72,0x69,0x74,0x61,0x67,0x65
00044c 2d2d
00044d 6e61
00044e 2064
00044f 6e75                      .db 0x2d,0x2d,0x61,0x6e,0x64,0x20,0x75,0x6e
000450 6977
000451 6c6c
000452 6e69
000453 2067                      .db 0x77,0x69,0x6c,0x6c,0x69,0x6e,0x67,0x20
000454 6f74
000455 7720
000456 7469
000457 656e                      .db 0x74,0x6f,0x20,0x77,0x69,0x74,0x6e,0x65
000458 7373
000459 6f20
00045a 2072
00045b 6570                      .db 0x73,0x73,0x20,0x6f,0x72,0x20,0x70,0x65
00045c 6d72
00045d 7469
00045e 7420
00045f 6568                      .db 0x72,0x6d,0x69,0x74,0x20,0x74,0x68,0x65
000460 7320
000461 6f6c
000462 2077
000463 6e75                      .db 0x20,0x73,0x6c,0x6f,0x77,0x20,0x75,0x6e
000464 6f64
000465 6e69
000466 2067
000467 666f                      .db 0x64,0x6f,0x69,0x6e,0x67,0x20,0x6f,0x66
000468 7420
000469 6f68
00046a 6573
00046b 6820                      .db 0x20,0x74,0x68,0x6f,0x73,0x65,0x20,0x68
00046c 6d75
00046d 6e61
00046e 7220
00046f 6769                      .db 0x75,0x6d,0x61,0x6e,0x20,0x72,0x69,0x67
000470 7468
000471 2073
000472 6f74
000473 7720                      .db 0x68,0x74,0x73,0x20,0x74,0x6f,0x20,0x77
000474 6968
000475 6863
000476 7420
000477 6968                      .db 0x68,0x69,0x63,0x68,0x20,0x74,0x68,0x69
000478 2073
000479 614e
00047a 6974
00047b 6e6f                      .db 0x73,0x20,0x4e,0x61,0x74,0x69,0x6f,0x6e
00047c 6820
00047d 7361
00047e 6120
00047f 776c                      .db 0x20,0x68,0x61,0x73,0x20,0x61,0x6c,0x77
000480 7961
000481 2073
000482 6562
000483 6e65                      .db 0x61,0x79,0x73,0x20,0x62,0x65,0x65,0x6e
000484 6320
000485 6d6f
000486 696d
000487 7474                      .db 0x20,0x63,0x6f,0x6d,0x6d,0x69,0x74,0x74
000488 6465
000489 202c
00048a 6e61
00048b 2064                      .db 0x65,0x64,0x2c,0x20,0x61,0x6e,0x64,0x20
00048c 6f74
00048d 7720
00048e 6968
00048f 6863                      .db 0x74,0x6f,0x20,0x77,0x68,0x69,0x63,0x68
000490 7720
000491 2065
000492 7261
000493 2065                      .db 0x20,0x77,0x65,0x20,0x61,0x72,0x65,0x20
000494 6f63
000495 6d6d
000496 7469
000497 6574                      .db 0x63,0x6f,0x6d,0x6d,0x69,0x74,0x74,0x65
000498 2064
000499 6f74
00049a 6164
00049b 2079                      .db 0x64,0x20,0x74,0x6f,0x64,0x61,0x79,0x20
00049c 7461
00049d 6820
00049e 6d6f
00049f 2065                      .db 0x61,0x74,0x20,0x68,0x6f,0x6d,0x65,0x20
0004a0 6e61
0004a1 2064
0004a2 7261
0004a3 756f                      .db 0x61,0x6e,0x64,0x20,0x61,0x72,0x6f,0x75
0004a4 646e
0004a5 7420
0004a6 6568
0004a7 7720                      .db 0x6e,0x64,0x20,0x74,0x68,0x65,0x20,0x77
0004a8 726f
0004a9 646c
0004aa 0a2e
0004ab 4c0a                      .db 0x6f,0x72,0x6c,0x64,0x2e,0x0a,0x0a,0x4c
0004ac 7465
0004ad 6520
0004ae 6576
0004af 7972                      .db 0x65,0x74,0x20,0x65,0x76,0x65,0x72,0x79
0004b0 6e20
0004b1 7461
0004b2 6f69
0004b3 206e                      .db 0x20,0x6e,0x61,0x74,0x69,0x6f,0x6e,0x20
0004b4 6e6b
0004b5 776f
0004b6 202c
0004b7 6877                      .db 0x6b,0x6e,0x6f,0x77,0x2c,0x20,0x77,0x68
0004b8 7465
0004b9 6568
0004ba 2072
0004bb 7469                      .db 0x65,0x74,0x68,0x65,0x72,0x20,0x69,0x74
0004bc 7720
0004bd 7369
0004be 6568
0004bf 2073                      .db 0x20,0x77,0x69,0x73,0x68,0x65,0x73,0x20
0004c0 7375
0004c1 7720
0004c2 6c65
0004c3 206c                      .db 0x75,0x73,0x20,0x77,0x65,0x6c,0x6c,0x20
0004c4 726f
0004c5 6920
0004c6 6c6c
0004c7 202c                      .db 0x6f,0x72,0x20,0x69,0x6c,0x6c,0x2c,0x20
0004c8 6874
0004c9 7461
0004ca 7720
0004cb 2065                      .db 0x74,0x68,0x61,0x74,0x20,0x77,0x65,0x20
0004cc 6873
0004cd 6c61
0004ce 206c
0004cf 6170                      .db 0x73,0x68,0x61,0x6c,0x6c,0x20,0x70,0x61
0004d0 2079
0004d1 6e61
0004d2 2079
0004d3 7270                      .db 0x79,0x20,0x61,0x6e,0x79,0x20,0x70,0x72
0004d4 6369
0004d5 2c65
0004d6 6220
0004d7 6165                      .db 0x69,0x63,0x65,0x2c,0x20,0x62,0x65,0x61
0004d8 2072
0004d9 6e61
0004da 2079
0004db 7562                      .db 0x72,0x20,0x61,0x6e,0x79,0x20,0x62,0x75
0004dc 6472
0004dd 6e65
0004de 202c
0004df 656d                      .db 0x72,0x64,0x65,0x6e,0x2c,0x20,0x6d,0x65
0004e0 7465
0004e1 6120
0004e2 796e
0004e3 6820                      .db 0x65,0x74,0x20,0x61,0x6e,0x79,0x20,0x68
0004e4 7261
0004e5 7364
0004e6 6968
0004e7 2c70                      .db 0x61,0x72,0x64,0x73,0x68,0x69,0x70,0x2c
0004e8 7320
0004e9 7075
0004ea 6f70
0004eb 7472                      .db 0x20,0x73,0x75,0x70,0x70,0x6f,0x72,0x74
0004ec 6120
0004ed 796e
0004ee 6620
0004ef 6972                      .db 0x20,0x61,0x6e,0x79,0x20,0x66,0x72,0x69
0004f0 6e65
0004f1 2c64
0004f2 6f20
0004f3 7070                      .db 0x65,0x6e,0x64,0x2c,0x20,0x6f,0x70,0x70
0004f4 736f
0004f5 2065
0004f6 6e61
0004f7 2079                      .db 0x6f,0x73,0x65,0x20,0x61,0x6e,0x79,0x20
0004f8 6f66
0004f9 2c65
0004fa 6920
0004fb 206e                      .db 0x66,0x6f,0x65,0x2c,0x20,0x69,0x6e,0x20
0004fc 726f
0004fd 6564
0004fe 2072
0004ff 6f74                      .db 0x6f,0x72,0x64,0x65,0x72,0x20,0x74,0x6f
000500 6120
000501 7373
000502 7275
000503 2065                      .db 0x20,0x61,0x73,0x73,0x75,0x72,0x65,0x20
000504 6874
000505 2065
000506 7573
000507 7672                      .db 0x74,0x68,0x65,0x20,0x73,0x75,0x72,0x76
000508 7669
000509 6c61
00050a 6120
00050b 646e                      .db 0x69,0x76,0x61,0x6c,0x20,0x61,0x6e,0x64
00050c 7420
00050d 6568
00050e 7320
00050f 6375                      .db 0x20,0x74,0x68,0x65,0x20,0x73,0x75,0x63
000510 6563
000511 7373
000512 6f20
000513 2066                      .db 0x63,0x65,0x73,0x73,0x20,0x6f,0x66,0x20
000514 696c
000515 6562
000516 7472
000517 2e79                      .db 0x6c,0x69,0x62,0x65,0x72,0x74,0x79,0x2e
000518 0a0a
000519 6854
00051a 7369
00051b 6d20                      .db 0x0a,0x0a,0x54,0x68,0x69,0x73,0x20,0x6d
00051c 6375
00051d 2068
00051e 6577
00051f 7020                      .db 0x75,0x63,0x68,0x20,0x77,0x65,0x20,0x70
000520 656c
000521 6764
000522 2d65
000523 612d                      .db 0x6c,0x65,0x64,0x67,0x65,0x2d,0x2d,0x61
000524 646e
000525 6d20
000526 726f
000527 2e65                      .db 0x6e,0x64,0x20,0x6d,0x6f,0x72,0x65,0x2e
000528 0a0a
000529 6f54
00052a 7420
00052b 6f68                      .db 0x0a,0x0a,0x54,0x6f,0x20,0x74,0x68,0x6f
00052c 6573
00052d 6f20
00052e 646c
00052f 6120                      .db 0x73,0x65,0x20,0x6f,0x6c,0x64,0x20,0x61
000530 6c6c
000531 6569
000532 2073
000533 6877                      .db 0x6c,0x6c,0x69,0x65,0x73,0x20,0x77,0x68
000534 736f
000535 2065
000536 7563
000537 746c                      .db 0x6f,0x73,0x65,0x20,0x63,0x75,0x6c,0x74
000538 7275
000539 6c61
00053a 6120
00053b 646e                      .db 0x75,0x72,0x61,0x6c,0x20,0x61,0x6e,0x64
00053c 7320
00053d 6970
00053e 6972
00053f 7574                      .db 0x20,0x73,0x70,0x69,0x72,0x69,0x74,0x75
000540 6c61
000541 6f20
000542 6972
000543 6967                      .db 0x61,0x6c,0x20,0x6f,0x72,0x69,0x67,0x69
000544 736e
000545 7720
000546 2065
000547 6873                      .db 0x6e,0x73,0x20,0x77,0x65,0x20,0x73,0x68
000548 7261
000549 2c65
00054a 7720
00054b 2065                      .db 0x61,0x72,0x65,0x2c,0x20,0x77,0x65,0x20
00054c 6c70
00054d 6465
00054e 6567
00054f 7420                      .db 0x70,0x6c,0x65,0x64,0x67,0x65,0x20,0x74
000550 6568
000551 6c20
000552 796f
000553 6c61                      .db 0x68,0x65,0x20,0x6c,0x6f,0x79,0x61,0x6c
000554 7974
000555 6f20
000556 2066
000557 6166                      .db 0x74,0x79,0x20,0x6f,0x66,0x20,0x66,0x61
000558 7469
000559 6668
00055a 6c75
00055b 6620                      .db 0x69,0x74,0x68,0x66,0x75,0x6c,0x20,0x66
00055c 6972
00055d 6e65
00055e 7364
00055f 202e                      .db 0x72,0x69,0x65,0x6e,0x64,0x73,0x2e,0x20
000560 6e55
000561 7469
000562 6465
000563 202c                      .db 0x55,0x6e,0x69,0x74,0x65,0x64,0x2c,0x20
000564 6874
000565 7265
000566 2065
000567 7369                      .db 0x74,0x68,0x65,0x72,0x65,0x20,0x69,0x73
000568 6c20
000569 7469
00056a 6c74
00056b 2065                      .db 0x20,0x6c,0x69,0x74,0x74,0x6c,0x65,0x20
00056c 6577
00056d 6320
00056e 6e61
00056f 6f6e                      .db 0x77,0x65,0x20,0x63,0x61,0x6e,0x6e,0x6f
000570 2074
000571 6f64
000572 6920
000573 206e                      .db 0x74,0x20,0x64,0x6f,0x20,0x69,0x6e,0x20
000574 2061
000575 6f68
000576 7473
000577 6f20                      .db 0x61,0x20,0x68,0x6f,0x73,0x74,0x20,0x6f
000578 2066
000579 6f63
00057a 706f
00057b 7265                      .db 0x66,0x20,0x63,0x6f,0x6f,0x70,0x65,0x72
00057c 7461
00057d 7669
00057e 2065
00057f 6576                      .db 0x61,0x74,0x69,0x76,0x65,0x20,0x76,0x65
000580 746e
000581 7275
000582 7365
000583 202e                      .db 0x6e,0x74,0x75,0x72,0x65,0x73,0x2e,0x20
000584 6944
000585 6976
000586 6564
000587 2c64                      .db 0x44,0x69,0x76,0x69,0x64,0x65,0x64,0x2c
000588 7420
000589 6568
00058a 6572
00058b 6920                      .db 0x20,0x74,0x68,0x65,0x72,0x65,0x20,0x69
00058c 2073
00058d 696c
00058e 7474
00058f 656c                      .db 0x73,0x20,0x6c,0x69,0x74,0x74,0x6c,0x65
000590 7720
000591 2065
000592 6163
000593 206e                      .db 0x20,0x77,0x65,0x20,0x63,0x61,0x6e,0x20
000594 6f64
000595 2d2d
000596 6f66
000597 2072                      .db 0x64,0x6f,0x2d,0x2d,0x66,0x6f,0x72,0x20
000598 6577
000599 6420
00059a 7261
00059b 2065                      .db 0x77,0x65,0x20,0x64,0x61,0x72,0x65,0x20
00059c 6f6e
00059d 2074
00059e 656d
00059f 7465                      .db 0x6e,0x6f,0x74,0x20,0x6d,0x65,0x65,0x74
0005a0 6120
0005a1 7020
0005a2 776f
0005a3 7265                      .db 0x20,0x61,0x20,0x70,0x6f,0x77,0x65,0x72
0005a4 7566
0005a5 206c
0005a6 6863
0005a7 6c61                      .db 0x66,0x75,0x6c,0x20,0x63,0x68,0x61,0x6c
0005a8 656c
0005a9 676e
0005aa 2065
0005ab 7461                      .db 0x6c,0x65,0x6e,0x67,0x65,0x20,0x61,0x74
0005ac 6f20
0005ad 6464
0005ae 2073
0005af 6e61                      .db 0x20,0x6f,0x64,0x64,0x73,0x20,0x61,0x6e
0005b0 2064
0005b1 7073
0005b2 696c
0005b3 2074                      .db 0x64,0x20,0x73,0x70,0x6c,0x69,0x74,0x20
0005b4 7361
0005b5 6e75
0005b6 6564
0005b7 2e72                      .db 0x61,0x73,0x75,0x6e,0x64,0x65,0x72,0x2e
0005b8 0a0a
0005b9 6f54
0005ba 7420
0005bb 6f68                      .db 0x0a,0x0a,0x54,0x6f,0x20,0x74,0x68,0x6f
0005bc 6573
0005bd 6e20
0005be 7765
0005bf 5320                      .db 0x73,0x65,0x20,0x6e,0x65,0x77,0x20,0x53
0005c0 6174
0005c1 6574
0005c2 2073
0005c3 6877                      .db 0x74,0x61,0x74,0x65,0x73,0x20,0x77,0x68
0005c4 6d6f
0005c5 7720
0005c6 2065
0005c7 6577                      .db 0x6f,0x6d,0x20,0x77,0x65,0x20,0x77,0x65
0005c8 636c
0005c9 6d6f
0005ca 2065
0005cb 6f74                      .db 0x6c,0x63,0x6f,0x6d,0x65,0x20,0x74,0x6f
0005cc 7420
0005cd 6568
0005ce 7220
0005cf 6e61                      .db 0x20,0x74,0x68,0x65,0x20,0x72,0x61,0x6e
0005d0 736b
0005d1 6f20
0005d2 2066
0005d3 6874                      .db 0x6b,0x73,0x20,0x6f,0x66,0x20,0x74,0x68
0005d4 2065
0005d5 7266
0005d6 6565
0005d7 202c                      .db 0x65,0x20,0x66,0x72,0x65,0x65,0x2c,0x20
0005d8 6577
0005d9 7020
0005da 656c
0005db 6764                      .db 0x77,0x65,0x20,0x70,0x6c,0x65,0x64,0x67
0005dc 2065
0005dd 756f
0005de 2072
0005df 6f77                      .db 0x65,0x20,0x6f,0x75,0x72,0x20,0x77,0x6f
0005e0 6472
0005e1 7420
0005e2 6168
0005e3 2074                      .db 0x72,0x64,0x20,0x74,0x68,0x61,0x74,0x20
0005e4 6e6f
0005e5 2065
0005e6 6f66
0005e7 6d72                      .db 0x6f,0x6e,0x65,0x20,0x66,0x6f,0x72,0x6d
0005e8 6f20
0005e9 2066
0005ea 6f63
0005eb 6f6c                      .db 0x20,0x6f,0x66,0x20,0x63,0x6f,0x6c,0x6f
0005ec 696e
0005ed 6c61
0005ee 6320
0005ef 6e6f                      .db 0x6e,0x69,0x61,0x6c,0x20,0x63,0x6f,0x6e
0005f0 7274
0005f1 6c6f
0005f2 7320
0005f3 6168                      .db 0x74,0x72,0x6f,0x6c,0x20,0x73,0x68,0x61
0005f4 6c6c
0005f5 6e20
0005f6 746f
0005f7 6820                      .db 0x6c,0x6c,0x20,0x6e,0x6f,0x74,0x20,0x68
0005f8 7661
0005f9 2065
0005fa 6170
0005fb 7373                      .db 0x61,0x76,0x65,0x20,0x70,0x61,0x73,0x73
0005fc 6465
0005fd 6120
0005fe 6177
0005ff 2079                      .db 0x65,0x64,0x20,0x61,0x77,0x61,0x79,0x20
000600 656d
000601 6572
000602 796c
000603 7420                      .db 0x6d,0x65,0x72,0x65,0x6c,0x79,0x20,0x74
000604 206f
000605 6562
000606 7220
000607 7065                      .db 0x6f,0x20,0x62,0x65,0x20,0x72,0x65,0x70
000608 616c
000609 6563
00060a 2064
00060b 7962                      .db 0x6c,0x61,0x63,0x65,0x64,0x20,0x62,0x79
00060c 6120
00060d 6620
00060e 7261
00060f 6d20                      .db 0x20,0x61,0x20,0x66,0x61,0x72,0x20,0x6d
000610 726f
000611 2065
000612 7269
000613 6e6f                      .db 0x6f,0x72,0x65,0x20,0x69,0x72,0x6f,0x6e
000614 7420
000615 7279
000616 6e61
000617 796e                      .db 0x20,0x74,0x79,0x72,0x61,0x6e,0x6e,0x79
000618 202e
000619 6557
00061a 7320
00061b 6168                      .db 0x2e,0x20,0x57,0x65,0x20,0x73,0x68,0x61
00061c 6c6c
00061d 6e20
00061e 746f
00061f 6120                      .db 0x6c,0x6c,0x20,0x6e,0x6f,0x74,0x20,0x61
000620 776c
000621 7961
000622 2073
000623 7865                      .db 0x6c,0x77,0x61,0x79,0x73,0x20,0x65,0x78
000624 6570
000625 7463
000626 7420
000627 206f                      .db 0x70,0x65,0x63,0x74,0x20,0x74,0x6f,0x20
000628 6966
000629 646e
00062a 7420
00062b 6568                      .db 0x66,0x69,0x6e,0x64,0x20,0x74,0x68,0x65
00062c 206d
00062d 7573
00062e 7070
00062f 726f                      .db 0x6d,0x20,0x73,0x75,0x70,0x70,0x6f,0x72
000630 6974
000631 676e
000632 6f20
000633 7275                      .db 0x74,0x69,0x6e,0x67,0x20,0x6f,0x75,0x72
000634 7620
000635 6569
000636 2e77
000637 4220                      .db 0x20,0x76,0x69,0x65,0x77,0x2e,0x20,0x42
000638 7475
000639 7720
00063a 2065
00063b 6873                      .db 0x75,0x74,0x20,0x77,0x65,0x20,0x73,0x68
00063c 6c61
00063d 206c
00063e 6c61
00063f 6177                      .db 0x61,0x6c,0x6c,0x20,0x61,0x6c,0x77,0x61
000640 7379
000641 6820
000642 706f
000643 2065                      .db 0x79,0x73,0x20,0x68,0x6f,0x70,0x65,0x20
000644 6f74
000645 6620
000646 6e69
000647 2064                      .db 0x74,0x6f,0x20,0x66,0x69,0x6e,0x64,0x20
000648 6874
000649 6d65
00064a 7320
00064b 7274                      .db 0x74,0x68,0x65,0x6d,0x20,0x73,0x74,0x72
00064c 6e6f
00064d 6c67
00064e 2079
00064f 7573                      .db 0x6f,0x6e,0x67,0x6c,0x79,0x20,0x73,0x75
000650 7070
000651 726f
000652 6974
000653 676e                      .db 0x70,0x70,0x6f,0x72,0x74,0x69,0x6e,0x67
000654 7420
000655 6568
000656 7269
000657 6f20                      .db 0x20,0x74,0x68,0x65,0x69,0x72,0x20,0x6f
000658 6e77
000659 6620
00065a 6572
00065b 6465                      .db 0x77,0x6e,0x20,0x66,0x72,0x65,0x65,0x64
00065c 6d6f
00065d 2d2d
00065e 6e61
00065f 2064                      .db 0x6f,0x6d,0x2d,0x2d,0x61,0x6e,0x64,0x20
000660 6f74
000661 7220
000662 6d65
000663 6d65                      .db 0x74,0x6f,0x20,0x72,0x65,0x6d,0x65,0x6d
000664 6562
000665 2072
000666 6874
000667 7461                      .db 0x62,0x65,0x72,0x20,0x74,0x68,0x61,0x74
000668 202c
000669 6e69
00066a 7420
00066b 6568                      .db 0x2c,0x20,0x69,0x6e,0x20,0x74,0x68,0x65
00066c 7020
00066d 7361
00066e 2c74
00066f 7420                      .db 0x20,0x70,0x61,0x73,0x74,0x2c,0x20,0x74
000670 6f68
000671 6573
000672 7720
000673 6f68                      .db 0x68,0x6f,0x73,0x65,0x20,0x77,0x68,0x6f
000674 6620
000675 6f6f
000676 696c
000677 6873                      .db 0x20,0x66,0x6f,0x6f,0x6c,0x69,0x73,0x68
000678 796c
000679 7320
00067a 756f
00067b 6867                      .db 0x6c,0x79,0x20,0x73,0x6f,0x75,0x67,0x68
00067c 2074
00067d 6f70
00067e 6577
00067f 2072                      .db 0x74,0x20,0x70,0x6f,0x77,0x65,0x72,0x20
000680 7962
000681 7220
000682 6469
000683 6e69                      .db 0x62,0x79,0x20,0x72,0x69,0x64,0x69,0x6e
000684 2067
000685 6874
000686 2065
000687 6162                      .db 0x67,0x20,0x74,0x68,0x65,0x20,0x62,0x61
000688 6b63
000689 6f20
00068a 2066
00068b 6874                      .db 0x63,0x6b,0x20,0x6f,0x66,0x20,0x74,0x68
00068c 2065
00068d 6974
00068e 6567
00068f 2072                      .db 0x65,0x20,0x74,0x69,0x67,0x65,0x72,0x20
000690 6e65
000691 6564
000692 2064
000693 7075                      .db 0x65,0x6e,0x64,0x65,0x64,0x20,0x75,0x70
000694 6920
000695 736e
000696 6469
000697 2e65                      .db 0x20,0x69,0x6e,0x73,0x69,0x64,0x65,0x2e
000698 0a0a
000699 6f54
00069a 7420
00069b 6f68                      .db 0x0a,0x0a,0x54,0x6f,0x20,0x74,0x68,0x6f
00069c 6573
00069d 7020
00069e 6f65
00069f 6c70                      .db 0x73,0x65,0x20,0x70,0x65,0x6f,0x70,0x6c
0006a0 7365
0006a1 6920
0006a2 206e
0006a3 6874                      .db 0x65,0x73,0x20,0x69,0x6e,0x20,0x74,0x68
0006a4 2065
0006a5 7568
0006a6 7374
0006a7 6120                      .db 0x65,0x20,0x68,0x75,0x74,0x73,0x20,0x61
0006a8 646e
0006a9 7620
0006aa 6c69
0006ab 616c                      .db 0x6e,0x64,0x20,0x76,0x69,0x6c,0x6c,0x61
0006ac 6567
0006ad 2073
0006ae 6361
0006af 6f72                      .db 0x67,0x65,0x73,0x20,0x61,0x63,0x72,0x6f
0006b0 7373
0006b1 7420
0006b2 6568
0006b3 6720                      .db 0x73,0x73,0x20,0x74,0x68,0x65,0x20,0x67
0006b4 6f6c
0006b5 6562
0006b6 7320
0006b7 7274                      .db 0x6c,0x6f,0x62,0x65,0x20,0x73,0x74,0x72
0006b8 6775
0006b9 6c67
0006ba 6e69
0006bb 2067                      .db 0x75,0x67,0x67,0x6c,0x69,0x6e,0x67,0x20
0006bc 6f74
0006bd 6220
0006be 6572
0006bf 6b61                      .db 0x74,0x6f,0x20,0x62,0x72,0x65,0x61,0x6b
0006c0 7420
0006c1 6568
0006c2 6220
0006c3 6e6f                      .db 0x20,0x74,0x68,0x65,0x20,0x62,0x6f,0x6e
0006c4 7364
0006c5 6f20
0006c6 2066
0006c7 616d                      .db 0x64,0x73,0x20,0x6f,0x66,0x20,0x6d,0x61
0006c8 7373
0006c9 6d20
0006ca 7369
0006cb 7265                      .db 0x73,0x73,0x20,0x6d,0x69,0x73,0x65,0x72
0006cc 2c79
0006cd 7720
0006ce 2065
0006cf 6c70                      .db 0x79,0x2c,0x20,0x77,0x65,0x20,0x70,0x6c
0006d0 6465
0006d1 6567
0006d2 6f20
0006d3 7275                      .db 0x65,0x64,0x67,0x65,0x20,0x6f,0x75,0x72
0006d4 6220
0006d5 7365
0006d6 2074
0006d7 6665                      .db 0x20,0x62,0x65,0x73,0x74,0x20,0x65,0x66
0006d8 6f66
0006d9 7472
0006da 2073
0006db 6f74                      .db 0x66,0x6f,0x72,0x74,0x73,0x20,0x74,0x6f
0006dc 6820
0006dd 6c65
0006de 2070
0006df 6874                      .db 0x20,0x68,0x65,0x6c,0x70,0x20,0x74,0x68
0006e0 6d65
0006e1 6820
0006e2 6c65
0006e3 2070                      .db 0x65,0x6d,0x20,0x68,0x65,0x6c,0x70,0x20
0006e4 6874
0006e5 6d65
0006e6 6573
0006e7 766c                      .db 0x74,0x68,0x65,0x6d,0x73,0x65,0x6c,0x76
0006e8 7365
0006e9 202c
0006ea 6f66
0006eb 2072                      .db 0x65,0x73,0x2c,0x20,0x66,0x6f,0x72,0x20
0006ec 6877
0006ed 7461
0006ee 7665
0006ef 7265                      .db 0x77,0x68,0x61,0x74,0x65,0x76,0x65,0x72
0006f0 7020
0006f1 7265
0006f2 6f69
0006f3 2064                      .db 0x20,0x70,0x65,0x72,0x69,0x6f,0x64,0x20
0006f4 7369
0006f5 7220
0006f6 7165
0006f7 6975                      .db 0x69,0x73,0x20,0x72,0x65,0x71,0x75,0x69
0006f8 6572
0006f9 2d64
0006fa 6e2d
0006fb 746f                      .db 0x72,0x65,0x64,0x2d,0x2d,0x6e,0x6f,0x74
0006fc 6220
0006fd 6365
0006fe 7561
0006ff 6573                      .db 0x20,0x62,0x65,0x63,0x61,0x75,0x73,0x65
000700 7420
000701 6568
000702 4320
000703 6d6f                      .db 0x20,0x74,0x68,0x65,0x20,0x43,0x6f,0x6d
000704 756d
000705 696e
000706 7473
000707 2073                      .db 0x6d,0x75,0x6e,0x69,0x73,0x74,0x73,0x20
000708 616d
000709 2079
00070a 6562
00070b 6420                      .db 0x6d,0x61,0x79,0x20,0x62,0x65,0x20,0x64
00070c 696f
00070d 676e
00070e 6920
00070f 2c74                      .db 0x6f,0x69,0x6e,0x67,0x20,0x69,0x74,0x2c
000710 6e20
000711 746f
000712 6220
000713 6365                      .db 0x20,0x6e,0x6f,0x74,0x20,0x62,0x65,0x63
000714 7561
000715 6573
000716 7720
000717 2065                      .db 0x61,0x75,0x73,0x65,0x20,0x77,0x65,0x20
000718 6573
000719 6b65
00071a 7420
00071b 6568                      .db 0x73,0x65,0x65,0x6b,0x20,0x74,0x68,0x65
00071c 7269
00071d 7620
00071e 746f
00071f 7365                      .db 0x69,0x72,0x20,0x76,0x6f,0x74,0x65,0x73
000720 202c
000721 7562
000722 2074
000723 6562                      .db 0x2c,0x20,0x62,0x75,0x74,0x20,0x62,0x65
000724 6163
000725 7375
000726 2065
000727 7469                      .db 0x63,0x61,0x75,0x73,0x65,0x20,0x69,0x74
000728 6920
000729 2073
00072a 6972
00072b 6867                      .db 0x20,0x69,0x73,0x20,0x72,0x69,0x67,0x68
00072c 2e74
00072d 4920
00072e 2066
00072f 2061                      .db 0x74,0x2e,0x20,0x49,0x66,0x20,0x61,0x20
000730 7266
000731 6565
000732 7320
000733 636f                      .db 0x66,0x72,0x65,0x65,0x20,0x73,0x6f,0x63
000734 6569
000735 7974
000736 6320
000737 6e61                      .db 0x69,0x65,0x74,0x79,0x20,0x63,0x61,0x6e
000738 6f6e
000739 2074
00073a 6568
00073b 706c                      .db 0x6e,0x6f,0x74,0x20,0x68,0x65,0x6c,0x70
00073c 7420
00073d 6568
00073e 6d20
00073f 6e61                      .db 0x20,0x74,0x68,0x65,0x20,0x6d,0x61,0x6e
000740 2079
000741 6877
000742 206f
000743 7261                      .db 0x79,0x20,0x77,0x68,0x6f,0x20,0x61,0x72
000744 2065
000745 6f70
000746 726f
000747 202c                      .db 0x65,0x20,0x70,0x6f,0x6f,0x72,0x2c,0x20
000748 7469
000749 6320
00074a 6e61
00074b 6f6e                      .db 0x69,0x74,0x20,0x63,0x61,0x6e,0x6e,0x6f
00074c 2074
00074d 6173
00074e 6576
00074f 7420                      .db 0x74,0x20,0x73,0x61,0x76,0x65,0x20,0x74
000750 6568
000751 6620
000752 7765
000753 7720                      .db 0x68,0x65,0x20,0x66,0x65,0x77,0x20,0x77
000754 6f68
000755 6120
000756 6572
000757 7220                      .db 0x68,0x6f,0x20,0x61,0x72,0x65,0x20,0x72
000758 6369
000759 2e68
00075a 0a0a
00075b 6f54                      .db 0x69,0x63,0x68,0x2e,0x0a,0x0a,0x54,0x6f
00075c 6f20
00075d 7275
00075e 7320
00075f 7369                      .db 0x20,0x6f,0x75,0x72,0x20,0x73,0x69,0x73
000760 6574
000761 2072
000762 6572
000763 7570                      .db 0x74,0x65,0x72,0x20,0x72,0x65,0x70,0x75
000764 6c62
000765 6369
000766 2073
000767 6f73                      .db 0x62,0x6c,0x69,0x63,0x73,0x20,0x73,0x6f
000768 7475
000769 2068
00076a 666f
00076b 6f20                      .db 0x75,0x74,0x68,0x20,0x6f,0x66,0x20,0x6f
00076c 7275
00076d 6220
00076e 726f
00076f 6564                      .db 0x75,0x72,0x20,0x62,0x6f,0x72,0x64,0x65
000770 2c72
000771 7720
000772 2065
000773 666f                      .db 0x72,0x2c,0x20,0x77,0x65,0x20,0x6f,0x66
000774 6566
000775 2072
000776 2061
000777 7073                      .db 0x66,0x65,0x72,0x20,0x61,0x20,0x73,0x70
000778 6365
000779 6169
00077a 206c
00077b 6c70                      .db 0x65,0x63,0x69,0x61,0x6c,0x20,0x70,0x6c
00077c 6465
00077d 6567
00077e 2d2d
00077f 6f74                      .db 0x65,0x64,0x67,0x65,0x2d,0x2d,0x74,0x6f
000780 6320
000781 6e6f
000782 6576
000783 7472                      .db 0x20,0x63,0x6f,0x6e,0x76,0x65,0x72,0x74
000784 6f20
000785 7275
000786 6720
000787 6f6f                      .db 0x20,0x6f,0x75,0x72,0x20,0x67,0x6f,0x6f
000788 2064
000789 6f77
00078a 6472
00078b 2073                      .db 0x64,0x20,0x77,0x6f,0x72,0x64,0x73,0x20
00078c 6e69
00078d 6f74
00078e 6720
00078f 6f6f                      .db 0x69,0x6e,0x74,0x6f,0x20,0x67,0x6f,0x6f
000790 2064
000791 6564
000792 6465
000793 2d73                      .db 0x64,0x20,0x64,0x65,0x65,0x64,0x73,0x2d
000794 692d
000795 206e
000796 2061
000797 656e                      .db 0x2d,0x69,0x6e,0x20,0x61,0x20,0x6e,0x65
000798 2077
000799 6c61
00079a 696c
00079b 6e61                      .db 0x77,0x20,0x61,0x6c,0x6c,0x69,0x61,0x6e
00079c 6563
00079d 6620
00079e 726f
00079f 7020                      .db 0x63,0x65,0x20,0x66,0x6f,0x72,0x20,0x70
0007a0 6f72
0007a1 7267
0007a2 7365
0007a3 2d73                      .db 0x72,0x6f,0x67,0x72,0x65,0x73,0x73,0x2d
0007a4 742d
0007a5 206f
0007a6 7361
0007a7 6973                      .db 0x2d,0x74,0x6f,0x20,0x61,0x73,0x73,0x69
0007a8 7473
0007a9 6620
0007aa 6572
0007ab 2065                      .db 0x73,0x74,0x20,0x66,0x72,0x65,0x65,0x20
0007ac 656d
0007ad 206e
0007ae 6e61
0007af 2064                      .db 0x6d,0x65,0x6e,0x20,0x61,0x6e,0x64,0x20
0007b0 7266
0007b1 6565
0007b2 6720
0007b3 766f                      .db 0x66,0x72,0x65,0x65,0x20,0x67,0x6f,0x76
0007b4 7265
0007b5 6d6e
0007b6 6e65
0007b7 7374                      .db 0x65,0x72,0x6e,0x6d,0x65,0x6e,0x74,0x73
0007b8 6920
0007b9 206e
0007ba 6163
0007bb 7473                      .db 0x20,0x69,0x6e,0x20,0x63,0x61,0x73,0x74
0007bc 6e69
0007bd 2067
0007be 666f
0007bf 2066                      .db 0x69,0x6e,0x67,0x20,0x6f,0x66,0x66,0x20
0007c0 6874
0007c1 2065
0007c2 6863
0007c3 6961                      .db 0x74,0x68,0x65,0x20,0x63,0x68,0x61,0x69
0007c4 736e
0007c5 6f20
0007c6 2066
0007c7 6f70                      .db 0x6e,0x73,0x20,0x6f,0x66,0x20,0x70,0x6f
0007c8 6576
0007c9 7472
0007ca 2e79
0007cb 4220                      .db 0x76,0x65,0x72,0x74,0x79,0x2e,0x20,0x42
0007cc 7475
0007cd 7420
0007ce 6968
0007cf 2073                      .db 0x75,0x74,0x20,0x74,0x68,0x69,0x73,0x20
0007d0 6570
0007d1 6361
0007d2 6665
0007d3 6c75                      .db 0x70,0x65,0x61,0x63,0x65,0x66,0x75,0x6c
0007d4 7220
0007d5 7665
0007d6 6c6f
0007d7 7475                      .db 0x20,0x72,0x65,0x76,0x6f,0x6c,0x75,0x74
0007d8 6f69
0007d9 206e
0007da 666f
0007db 6820                      .db 0x69,0x6f,0x6e,0x20,0x6f,0x66,0x20,0x68
0007dc 706f
0007dd 2065
0007de 6163
0007df 6e6e                      .db 0x6f,0x70,0x65,0x20,0x63,0x61,0x6e,0x6e
0007e0 746f
0007e1 6220
0007e2 6365
0007e3 6d6f                      .db 0x6f,0x74,0x20,0x62,0x65,0x63,0x6f,0x6d
0007e4 2065
0007e5 6874
0007e6 2065
0007e7 7270                      .db 0x65,0x20,0x74,0x68,0x65,0x20,0x70,0x72
0007e8 7965
0007e9 6f20
0007ea 2066
0007eb 6f68                      .db 0x65,0x79,0x20,0x6f,0x66,0x20,0x68,0x6f
0007ec 7473
0007ed 6c69
0007ee 2065
0007ef 6f70                      .db 0x73,0x74,0x69,0x6c,0x65,0x20,0x70,0x6f
0007f0 6577
0007f1 7372
0007f2 202e
0007f3 654c                      .db 0x77,0x65,0x72,0x73,0x2e,0x20,0x4c,0x65
0007f4 2074
0007f5 6c61
0007f6 206c
0007f7 756f                      .db 0x74,0x20,0x61,0x6c,0x6c,0x20,0x6f,0x75
0007f8 2072
0007f9 656e
0007fa 6769
0007fb 6268                      .db 0x72,0x20,0x6e,0x65,0x69,0x67,0x68,0x62
0007fc 726f
0007fd 2073
0007fe 6e6b
0007ff 776f                      .db 0x6f,0x72,0x73,0x20,0x6b,0x6e,0x6f,0x77
000800 7420
000801 6168
000802 2074
000803 6577                      .db 0x20,0x74,0x68,0x61,0x74,0x20,0x77,0x65
000804 7320
000805 6168
000806 6c6c
000807 6a20                      .db 0x20,0x73,0x68,0x61,0x6c,0x6c,0x20,0x6a
000808 696f
000809 206e
00080a 6977
00080b 6874                      .db 0x6f,0x69,0x6e,0x20,0x77,0x69,0x74,0x68
00080c 7420
00080d 6568
00080e 206d
00080f 6f74                      .db 0x20,0x74,0x68,0x65,0x6d,0x20,0x74,0x6f
000810 6f20
000811 7070
000812 736f
000813 2065                      .db 0x20,0x6f,0x70,0x70,0x6f,0x73,0x65,0x20
000814 6761
000815 7267
000816 7365
000817 6973                      .db 0x61,0x67,0x67,0x72,0x65,0x73,0x73,0x69
000818 6e6f
000819 6f20
00081a 2072
00081b 7573                      .db 0x6f,0x6e,0x20,0x6f,0x72,0x20,0x73,0x75
00081c 7662
00081d 7265
00081e 6973
00081f 6e6f                      .db 0x62,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e
000820 6120
000821 796e
000822 6877
000823 7265                      .db 0x20,0x61,0x6e,0x79,0x77,0x68,0x65,0x72
000824 2065
000825 6e69
000826 7420
000827 6568                      .db 0x65,0x20,0x69,0x6e,0x20,0x74,0x68,0x65
000828 4120
000829 656d
00082a 6972
00082b 6163                      .db 0x20,0x41,0x6d,0x65,0x72,0x69,0x63,0x61
00082c 2e73
00082d 4120
00082e 646e
00082f 6c20                      .db 0x73,0x2e,0x20,0x41,0x6e,0x64,0x20,0x6c
000830 7465
000831 6520
000832 6576
000833 7972                      .db 0x65,0x74,0x20,0x65,0x76,0x65,0x72,0x79
000834 6f20
000835 6874
000836 7265
000837 7020                      .db 0x20,0x6f,0x74,0x68,0x65,0x72,0x20,0x70
000838 776f
000839 7265
00083a 6b20
00083b 6f6e                      .db 0x6f,0x77,0x65,0x72,0x20,0x6b,0x6e,0x6f
00083c 2077
00083d 6874
00083e 7461
00083f 7420                      .db 0x77,0x20,0x74,0x68,0x61,0x74,0x20,0x74
000840 6968
000841 2073
000842 6548
000843 696d                      .db 0x68,0x69,0x73,0x20,0x48,0x65,0x6d,0x69
000844 7073
000845 6568
000846 6572
000847 6920                      .db 0x73,0x70,0x68,0x65,0x72,0x65,0x20,0x69
000848 746e
000849 6e65
00084a 7364
00084b 7420                      .db 0x6e,0x74,0x65,0x6e,0x64,0x73,0x20,0x74
00084c 206f
00084d 6572
00084e 616d
00084f 6e69                      .db 0x6f,0x20,0x72,0x65,0x6d,0x61,0x69,0x6e
000850 7420
000851 6568
000852 6d20
000853 7361                      .db 0x20,0x74,0x68,0x65,0x20,0x6d,0x61,0x73
000854 6574
000855 2072
000856 666f
000857 6920                      .db 0x74,0x65,0x72,0x20,0x6f,0x66,0x20,0x69
000858 7374
000859 6f20
00085a 6e77
00085b 6820                      .db 0x74,0x73,0x20,0x6f,0x77,0x6e,0x20,0x68
00085c 756f
00085d 6573
00085e 0a2e
00085f 540a                      .db 0x6f,0x75,0x73,0x65,0x2e,0x0a,0x0a,0x54
000860 206f
000861 6874
000862 7461
000863 7720                      .db 0x6f,0x20,0x74,0x68,0x61,0x74,0x20,0x77
000864 726f
000865 646c
000866 6120
000867 7373                      .db 0x6f,0x72,0x6c,0x64,0x20,0x61,0x73,0x73
000868 6d65
000869 6c62
00086a 2079
00086b 666f                      .db 0x65,0x6d,0x62,0x6c,0x79,0x20,0x6f,0x66
00086c 7320
00086d 766f
00086e 7265
00086f 6965                      .db 0x20,0x73,0x6f,0x76,0x65,0x72,0x65,0x69
000870 6e67
000871 7320
000872 6174
000873 6574                      .db 0x67,0x6e,0x20,0x73,0x74,0x61,0x74,0x65
000874 2c73
000875 7420
000876 6568
000877 5520                      .db 0x73,0x2c,0x20,0x74,0x68,0x65,0x20,0x55
000878 696e
000879 6574
00087a 2064
00087b 614e                      .db 0x6e,0x69,0x74,0x65,0x64,0x20,0x4e,0x61
00087c 6974
00087d 6e6f
00087e 2c73
00087f 6f20                      .db 0x74,0x69,0x6f,0x6e,0x73,0x2c,0x20,0x6f
000880 7275
000881 6c20
000882 7361
000883 2074                      .db 0x75,0x72,0x20,0x6c,0x61,0x73,0x74,0x20
000884 6562
000885 7473
000886 6820
000887 706f                      .db 0x62,0x65,0x73,0x74,0x20,0x68,0x6f,0x70
000888 2065
000889 6e69
00088a 6120
00088b 206e                      .db 0x65,0x20,0x69,0x6e,0x20,0x61,0x6e,0x20
00088c 6761
00088d 2065
00088e 6877
00088f 7265                      .db 0x61,0x67,0x65,0x20,0x77,0x68,0x65,0x72
000890 2065
000891 6874
000892 2065
000893 6e69                      .db 0x65,0x20,0x74,0x68,0x65,0x20,0x69,0x6e
000894 7473
000895 7572
000896 656d
000897 746e                      .db 0x73,0x74,0x72,0x75,0x6d,0x65,0x6e,0x74
000898 2073
000899 666f
00089a 7720
00089b 7261                      .db 0x73,0x20,0x6f,0x66,0x20,0x77,0x61,0x72
00089c 6820
00089d 7661
00089e 2065
00089f 6166                      .db 0x20,0x68,0x61,0x76,0x65,0x20,0x66,0x61
0008a0 2072
0008a1 756f
0008a2 7074
0008a3 6361                      .db 0x72,0x20,0x6f,0x75,0x74,0x70,0x61,0x63
0008a4 6465
0008a5 7420
0008a6 6568
0008a7 6920                      .db 0x65,0x64,0x20,0x74,0x68,0x65,0x20,0x69
0008a8 736e
0008a9 7274
0008aa 6d75
0008ab 6e65                      .db 0x6e,0x73,0x74,0x72,0x75,0x6d,0x65,0x6e
0008ac 7374
0008ad 6f20
0008ae 2066
0008af 6570                      .db 0x74,0x73,0x20,0x6f,0x66,0x20,0x70,0x65
0008b0 6361
0008b1 2c65
0008b2 7720
0008b3 2065                      .db 0x61,0x63,0x65,0x2c,0x20,0x77,0x65,0x20
0008b4 6572
0008b5 656e
0008b6 2077
0008b7 756f                      .db 0x72,0x65,0x6e,0x65,0x77,0x20,0x6f,0x75
0008b8 2072
0008b9 6c70
0008ba 6465
0008bb 6567                      .db 0x72,0x20,0x70,0x6c,0x65,0x64,0x67,0x65
0008bc 6f20
0008bd 2066
0008be 7573
0008bf 7070                      .db 0x20,0x6f,0x66,0x20,0x73,0x75,0x70,0x70
0008c0 726f
0008c1 2d74
0008c2 742d
0008c3 206f                      .db 0x6f,0x72,0x74,0x2d,0x2d,0x74,0x6f,0x20
0008c4 7270
0008c5 7665
0008c6 6e65
0008c7 2074                      .db 0x70,0x72,0x65,0x76,0x65,0x6e,0x74,0x20
0008c8 7469
0008c9 6620
0008ca 6f72
0008cb 206d                      .db 0x69,0x74,0x20,0x66,0x72,0x6f,0x6d,0x20
0008cc 6562
0008cd 6f63
0008ce 696d
0008cf 676e                      .db 0x62,0x65,0x63,0x6f,0x6d,0x69,0x6e,0x67
0008d0 6d20
0008d1 7265
0008d2 6c65
0008d3 2079                      .db 0x20,0x6d,0x65,0x72,0x65,0x6c,0x79,0x20
0008d4 2061
0008d5 6f66
0008d6 7572
0008d7 206d                      .db 0x61,0x20,0x66,0x6f,0x72,0x75,0x6d,0x20
0008d8 6f66
0008d9 2072
0008da 6e69
0008db 6576                      .db 0x66,0x6f,0x72,0x20,0x69,0x6e,0x76,0x65
0008dc 7463
0008dd 7669
0008de 2d65
0008df 742d                      .db 0x63,0x74,0x69,0x76,0x65,0x2d,0x2d,0x74
0008e0 206f
0008e1 7473
0008e2 6572
0008e3 676e                      .db 0x6f,0x20,0x73,0x74,0x72,0x65,0x6e,0x67
0008e4 6874
0008e5 6e65
0008e6 6920
0008e7 7374                      .db 0x74,0x68,0x65,0x6e,0x20,0x69,0x74,0x73
0008e8 7320
0008e9 6968
0008ea 6c65
0008eb 2064                      .db 0x20,0x73,0x68,0x69,0x65,0x6c,0x64,0x20
0008ec 666f
0008ed 7420
0008ee 6568
0008ef 6e20                      .db 0x6f,0x66,0x20,0x74,0x68,0x65,0x20,0x6e
0008f0 7765
0008f1 6120
0008f2 646e
0008f3 7420                      .db 0x65,0x77,0x20,0x61,0x6e,0x64,0x20,0x74
0008f4 6568
0008f5 7720
0008f6 6165
0008f7 2d6b                      .db 0x68,0x65,0x20,0x77,0x65,0x61,0x6b,0x2d
0008f8 612d
0008f9 646e
0008fa 7420
0008fb 206f                      .db 0x2d,0x61,0x6e,0x64,0x20,0x74,0x6f,0x20
0008fc 6e65
0008fd 616c
0008fe 6772
0008ff 2065                      .db 0x65,0x6e,0x6c,0x61,0x72,0x67,0x65,0x20
000900 6874
000901 2065
000902 7261
000903 6165                      .db 0x74,0x68,0x65,0x20,0x61,0x72,0x65,0x61
000904 6920
000905 206e
000906 6877
000907 6369                      .db 0x20,0x69,0x6e,0x20,0x77,0x68,0x69,0x63
000908 2068
000909 7469
00090a 2073
00090b 7277                      .db 0x68,0x20,0x69,0x74,0x73,0x20,0x77,0x72
00090c 7469
00090d 6d20
00090e 7961
00090f 7220                      .db 0x69,0x74,0x20,0x6d,0x61,0x79,0x20,0x72
000910 6e75
000911 0a2e
000912 460a
000913 6e69                      .db 0x75,0x6e,0x2e,0x0a,0x0a,0x46,0x69,0x6e
000914 6c61
000915 796c
000916 202c
000917 6f74                      .db 0x61,0x6c,0x6c,0x79,0x2c,0x20,0x74,0x6f
000918 7420
000919 6f68
00091a 6573
00091b 6e20                      .db 0x20,0x74,0x68,0x6f,0x73,0x65,0x20,0x6e
00091c 7461
00091d 6f69
00091e 736e
00091f 7720                      .db 0x61,0x74,0x69,0x6f,0x6e,0x73,0x20,0x77
000920 6f68
000921 7720
000922 756f
000923 646c                      .db 0x68,0x6f,0x20,0x77,0x6f,0x75,0x6c,0x64
000924 6d20
000925 6b61
000926 2065
000927 6874                      .db 0x20,0x6d,0x61,0x6b,0x65,0x20,0x74,0x68
000928 6d65
000929 6573
00092a 766c
00092b 7365                      .db 0x65,0x6d,0x73,0x65,0x6c,0x76,0x65,0x73
00092c 6f20
00092d 7275
00092e 6120
00092f 7664                      .db 0x20,0x6f,0x75,0x72,0x20,0x61,0x64,0x76
000930 7265
000931 6173
000932 7972
000933 202c                      .db 0x65,0x72,0x73,0x61,0x72,0x79,0x2c,0x20
000934 6577
000935 6f20
000936 6666
000937 7265                      .db 0x77,0x65,0x20,0x6f,0x66,0x66,0x65,0x72
000938 6e20
000939 746f
00093a 6120
00093b 7020                      .db 0x20,0x6e,0x6f,0x74,0x20,0x61,0x20,0x70
00093c 656c
00093d 6764
00093e 2065
00093f 7562                      .db 0x6c,0x65,0x64,0x67,0x65,0x20,0x62,0x75
000940 2074
000941 2061
000942 6572
000943 7571                      .db 0x74,0x20,0x61,0x20,0x72,0x65,0x71,0x75
000944 7365
000945 3a74
000946 7420
000947 6168                      .db 0x65,0x73,0x74,0x3a,0x20,0x74,0x68,0x61
000948 2074
000949 6f62
00094a 6874
00094b 7320                      .db 0x74,0x20,0x62,0x6f,0x74,0x68,0x20,0x73
00094c 6469
00094d 7365
00094e 6220
00094f 6765                      .db 0x69,0x64,0x65,0x73,0x20,0x62,0x65,0x67
000950 6e69
000951 6120
000952 656e
000953 2077                      .db 0x69,0x6e,0x20,0x61,0x6e,0x65,0x77,0x20
000954 6874
000955 2065
000956 7571
000957 7365                      .db 0x74,0x68,0x65,0x20,0x71,0x75,0x65,0x73
000958 2074
000959 6f66
00095a 2072
00095b 6570                      .db 0x74,0x20,0x66,0x6f,0x72,0x20,0x70,0x65
00095c 6361
00095d 2c65
00095e 6220
00095f 6665                      .db 0x61,0x63,0x65,0x2c,0x20,0x62,0x65,0x66
000960 726f
000961 2065
000962 6874
000963 2065                      .db 0x6f,0x72,0x65,0x20,0x74,0x68,0x65,0x20
000964 6164
000965 6b72
000966 7020
000967 776f                      .db 0x64,0x61,0x72,0x6b,0x20,0x70,0x6f,0x77
000968 7265
000969 2073
00096a 666f
00096b 6420                      .db 0x65,0x72,0x73,0x20,0x6f,0x66,0x20,0x64
00096c 7365
00096d 7274
00096e 6375
00096f 6974                      .db 0x65,0x73,0x74,0x72,0x75,0x63,0x74,0x69
000970 6e6f
000971 7520
000972 6c6e
000973 6165                      .db 0x6f,0x6e,0x20,0x75,0x6e,0x6c,0x65,0x61
000974 6873
000975 6465
000976 6220
000977 2079                      .db 0x73,0x68,0x65,0x64,0x20,0x62,0x79,0x20
000978 6373
000979 6569
00097a 636e
00097b 2065                      .db 0x73,0x63,0x69,0x65,0x6e,0x63,0x65,0x20
00097c 6e65
00097d 7567
00097e 666c
00097f 6120                      .db 0x65,0x6e,0x67,0x75,0x6c,0x66,0x20,0x61
000980 6c6c
000981 6820
000982 6d75
000983 6e61                      .db 0x6c,0x6c,0x20,0x68,0x75,0x6d,0x61,0x6e
000984 7469
000985 2079
000986 6e69
000987 7020                      .db 0x69,0x74,0x79,0x20,0x69,0x6e,0x20,0x70
000988 616c
000989 6e6e
00098a 6465
00098b 6f20                      .db 0x6c,0x61,0x6e,0x6e,0x65,0x64,0x20,0x6f
00098c 2072
00098d 6361
00098e 6963
00098f 6564                      .db 0x72,0x20,0x61,0x63,0x63,0x69,0x64,0x65
000990 746e
000991 6c61
000992 7320
000993 6c65                      .db 0x6e,0x74,0x61,0x6c,0x20,0x73,0x65,0x6c
000994 2d66
000995 6564
000996 7473
000997 7572                      .db 0x66,0x2d,0x64,0x65,0x73,0x74,0x72,0x75
000998 7463
000999 6f69
00099a 2e6e
00099b 0a0a                      .db 0x63,0x74,0x69,0x6f,0x6e,0x2e,0x0a,0x0a
00099c 6557
00099d 6420
00099e 7261
00099f 2065                      .db 0x57,0x65,0x20,0x64,0x61,0x72,0x65,0x20
0009a0 6f6e
0009a1 2074
0009a2 6574
0009a3 706d                      .db 0x6e,0x6f,0x74,0x20,0x74,0x65,0x6d,0x70
0009a4 2074
0009a5 6874
0009a6 6d65
0009a7 7720                      .db 0x74,0x20,0x74,0x68,0x65,0x6d,0x20,0x77
0009a8 7469
0009a9 2068
0009aa 6577
0009ab 6b61                      .db 0x69,0x74,0x68,0x20,0x77,0x65,0x61,0x6b
0009ac 656e
0009ad 7373
0009ae 202e
0009af 6f46                      .db 0x6e,0x65,0x73,0x73,0x2e,0x20,0x46,0x6f
0009b0 2072
0009b1 6e6f
0009b2 796c
0009b3 7720                      .db 0x72,0x20,0x6f,0x6e,0x6c,0x79,0x20,0x77
0009b4 6568
0009b5 206e
0009b6 756f
0009b7 2072                      .db 0x68,0x65,0x6e,0x20,0x6f,0x75,0x72,0x20
0009b8 7261
0009b9 736d
0009ba 6120
0009bb 6572                      .db 0x61,0x72,0x6d,0x73,0x20,0x61,0x72,0x65
0009bc 7320
0009bd 6675
0009be 6966
0009bf 6963                      .db 0x20,0x73,0x75,0x66,0x66,0x69,0x63,0x69
0009c0 6e65
0009c1 2074
0009c2 6562
0009c3 6f79                      .db 0x65,0x6e,0x74,0x20,0x62,0x65,0x79,0x6f
0009c4 646e
0009c5 6420
0009c6 756f
0009c7 7462                      .db 0x6e,0x64,0x20,0x64,0x6f,0x75,0x62,0x74
0009c8 6320
0009c9 6e61
0009ca 7720
0009cb 2065                      .db 0x20,0x63,0x61,0x6e,0x20,0x77,0x65,0x20
0009cc 6562
0009cd 6320
0009ce 7265
0009cf 6174                      .db 0x62,0x65,0x20,0x63,0x65,0x72,0x74,0x61
0009d0 6e69
0009d1 6220
0009d2 7965
0009d3 6e6f                      .db 0x69,0x6e,0x20,0x62,0x65,0x79,0x6f,0x6e
0009d4 2064
0009d5 6f64
0009d6 6275
0009d7 2074                      .db 0x64,0x20,0x64,0x6f,0x75,0x62,0x74,0x20
0009d8 6874
0009d9 7461
0009da 7420
0009db 6568                      .db 0x74,0x68,0x61,0x74,0x20,0x74,0x68,0x65
0009dc 2079
0009dd 6977
0009de 6c6c
0009df 6e20                      .db 0x79,0x20,0x77,0x69,0x6c,0x6c,0x20,0x6e
0009e0 7665
0009e1 7265
0009e2 6220
0009e3 2065                      .db 0x65,0x76,0x65,0x72,0x20,0x62,0x65,0x20
0009e4 6d65
0009e5 6c70
0009e6 796f
0009e7 6465                      .db 0x65,0x6d,0x70,0x6c,0x6f,0x79,0x65,0x64
0009e8 0a2e
0009e9 420a
0009ea 7475
0009eb 6e20                      .db 0x2e,0x0a,0x0a,0x42,0x75,0x74,0x20,0x6e
0009ec 6965
0009ed 6874
0009ee 7265
0009ef 6320                      .db 0x65,0x69,0x74,0x68,0x65,0x72,0x20,0x63
0009f0 6e61
0009f1 7420
0009f2 6f77
0009f3 6720                      .db 0x61,0x6e,0x20,0x74,0x77,0x6f,0x20,0x67
0009f4 6572
0009f5 7461
0009f6 6120
0009f7 646e                      .db 0x72,0x65,0x61,0x74,0x20,0x61,0x6e,0x64
0009f8 7020
0009f9 776f
0009fa 7265
0009fb 7566                      .db 0x20,0x70,0x6f,0x77,0x65,0x72,0x66,0x75
0009fc 206c
0009fd 7267
0009fe 756f
0009ff 7370                      .db 0x6c,0x20,0x67,0x72,0x6f,0x75,0x70,0x73
000a00 6f20
000a01 2066
000a02 616e
000a03 6974                      .db 0x20,0x6f,0x66,0x20,0x6e,0x61,0x74,0x69
000a04 6e6f
000a05 2073
000a06 6174
000a07 656b                      .db 0x6f,0x6e,0x73,0x20,0x74,0x61,0x6b,0x65
000a08 6320
000a09 6d6f
000a0a 6f66
000a0b 7472                      .db 0x20,0x63,0x6f,0x6d,0x66,0x6f,0x72,0x74
000a0c 6620
000a0d 6f72
000a0e 206d
000a0f 756f                      .db 0x20,0x66,0x72,0x6f,0x6d,0x20,0x6f,0x75
000a10 2072
000a11 7270
000a12 7365
000a13 6e65                      .db 0x72,0x20,0x70,0x72,0x65,0x73,0x65,0x6e
000a14 2074
000a15 6f63
000a16 7275
000a17 6573                      .db 0x74,0x20,0x63,0x6f,0x75,0x72,0x73,0x65
000a18 2d2d
000a19 6f62
000a1a 6874
000a1b 7320                      .db 0x2d,0x2d,0x62,0x6f,0x74,0x68,0x20,0x73
000a1c 6469
000a1d 7365
000a1e 6f20
000a1f 6576                      .db 0x69,0x64,0x65,0x73,0x20,0x6f,0x76,0x65
000a20 6272
000a21 7275
000a22 6564
000a23 656e                      .db 0x72,0x62,0x75,0x72,0x64,0x65,0x6e,0x65
000a24 2064
000a25 7962
000a26 7420
000a27 6568                      .db 0x64,0x20,0x62,0x79,0x20,0x74,0x68,0x65
000a28 6320
000a29 736f
000a2a 2074
000a2b 666f                      .db 0x20,0x63,0x6f,0x73,0x74,0x20,0x6f,0x66
000a2c 6d20
000a2d 646f
000a2e 7265
000a2f 206e                      .db 0x20,0x6d,0x6f,0x64,0x65,0x72,0x6e,0x20
000a30 6577
000a31 7061
000a32 6e6f
000a33 2c73                      .db 0x77,0x65,0x61,0x70,0x6f,0x6e,0x73,0x2c
000a34 6220
000a35 746f
000a36 2068
000a37 6972                      .db 0x20,0x62,0x6f,0x74,0x68,0x20,0x72,0x69
000a38 6867
000a39 6c74
000a3a 2079
000a3b 6c61                      .db 0x67,0x68,0x74,0x6c,0x79,0x20,0x61,0x6c
000a3c 7261
000a3d 656d
000a3e 2064
000a3f 7962                      .db 0x61,0x72,0x6d,0x65,0x64,0x20,0x62,0x79
000a40 7420
000a41 6568
000a42 7320
000a43 6574                      .db 0x20,0x74,0x68,0x65,0x20,0x73,0x74,0x65
000a44 6461
000a45 2079
000a46 7073
000a47 6572                      .db 0x61,0x64,0x79,0x20,0x73,0x70,0x72,0x65
000a48 6461
000a49 6f20
000a4a 2066
000a4b 6874                      .db 0x61,0x64,0x20,0x6f,0x66,0x20,0x74,0x68
000a4c 2065
000a4d 6564
000a4e 6461
000a4f 796c                      .db 0x65,0x20,0x64,0x65,0x61,0x64,0x6c,0x79
000a50 6120
000a51 6f74
000a52 2c6d
000a53 7920                      .db 0x20,0x61,0x74,0x6f,0x6d,0x2c,0x20,0x79
000a54 7465
000a55 6220
000a56 746f
000a57 2068                      .db 0x65,0x74,0x20,0x62,0x6f,0x74,0x68,0x20
000a58 6172
000a59 6963
000a5a 676e
000a5b 7420                      .db 0x72,0x61,0x63,0x69,0x6e,0x67,0x20,0x74
000a5c 206f
000a5d 6c61
000a5e 6574
000a5f 2072                      .db 0x6f,0x20,0x61,0x6c,0x74,0x65,0x72,0x20
000a60 6874
000a61 7461
000a62 7520
000a63 636e                      .db 0x74,0x68,0x61,0x74,0x20,0x75,0x6e,0x63
000a64 7265
000a65 6174
000a66 6e69
000a67 6220                      .db 0x65,0x72,0x74,0x61,0x69,0x6e,0x20,0x62
000a68 6c61
000a69 6e61
000a6a 6563
000a6b 6f20                      .db 0x61,0x6c,0x61,0x6e,0x63,0x65,0x20,0x6f
000a6c 2066
000a6d 6574
000a6e 7272
000a6f 726f                      .db 0x66,0x20,0x74,0x65,0x72,0x72,0x6f,0x72
000a70 7420
000a71 6168
000a72 2074
000a73 7473                      .db 0x20,0x74,0x68,0x61,0x74,0x20,0x73,0x74
000a74 7961
000a75 2073
000a76 6874
000a77 2065                      .db 0x61,0x79,0x73,0x20,0x74,0x68,0x65,0x20
000a78 6168
000a79 646e
000a7a 6f20
000a7b 2066                      .db 0x68,0x61,0x6e,0x64,0x20,0x6f,0x66,0x20
000a7c 616d
000a7d 6b6e
000a7e 6e69
000a7f 2764                      .db 0x6d,0x61,0x6e,0x6b,0x69,0x6e,0x64,0x27
000a80 2073
000a81 6966
000a82 616e
000a83 206c                      .db 0x73,0x20,0x66,0x69,0x6e,0x61,0x6c,0x20
000a84 6177
000a85 2e72
000a86 0a0a
000a87 6f53                      .db 0x77,0x61,0x72,0x2e,0x0a,0x0a,0x53,0x6f
000a88 6c20
000a89 7465
000a8a 7520
000a8b 2073                      .db 0x20,0x6c,0x65,0x74,0x20,0x75,0x73,0x20
000a8c 6562
000a8d 6967
000a8e 206e
000a8f 6e61                      .db 0x62,0x65,0x67,0x69,0x6e,0x20,0x61,0x6e
000a90 7765
000a91 2d2d
000a92 6572
000a93 656d                      .db 0x65,0x77,0x2d,0x2d,0x72,0x65,0x6d,0x65
000a94 626d
000a95 7265
000a96 6e69
000a97 2067                      .db 0x6d,0x62,0x65,0x72,0x69,0x6e,0x67,0x20
000a98 6e6f
000a99 6220
000a9a 746f
000a9b 2068                      .db 0x6f,0x6e,0x20,0x62,0x6f,0x74,0x68,0x20
000a9c 6973
000a9d 6564
000a9e 2073
000a9f 6874                      .db 0x73,0x69,0x64,0x65,0x73,0x20,0x74,0x68
000aa0 7461
000aa1 6320
000aa2 7669
000aa3 6c69                      .db 0x61,0x74,0x20,0x63,0x69,0x76,0x69,0x6c
000aa4 7469
000aa5 2079
000aa6 7369
000aa7 6e20                      .db 0x69,0x74,0x79,0x20,0x69,0x73,0x20,0x6e
000aa8 746f
000aa9 6120
000aaa 7320
000aab 6769                      .db 0x6f,0x74,0x20,0x61,0x20,0x73,0x69,0x67
000aac 206e
000aad 666f
000aae 7720
000aaf 6165                      .db 0x6e,0x20,0x6f,0x66,0x20,0x77,0x65,0x61
000ab0 6e6b
000ab1 7365
000ab2 2c73
000ab3 6120                      .db 0x6b,0x6e,0x65,0x73,0x73,0x2c,0x20,0x61
000ab4 646e
000ab5 7320
000ab6 6e69
000ab7 6563                      .db 0x6e,0x64,0x20,0x73,0x69,0x6e,0x63,0x65
000ab8 6972
000ab9 7974
000aba 6920
000abb 2073                      .db 0x72,0x69,0x74,0x79,0x20,0x69,0x73,0x20
000abc 6c61
000abd 6177
000abe 7379
000abf 7320                      .db 0x61,0x6c,0x77,0x61,0x79,0x73,0x20,0x73
000ac0 6275
000ac1 656a
000ac2 7463
000ac3 7420                      .db 0x75,0x62,0x6a,0x65,0x63,0x74,0x20,0x74
000ac4 206f
000ac5 7270
000ac6 6f6f
000ac7 2e66                      .db 0x6f,0x20,0x70,0x72,0x6f,0x6f,0x66,0x2e
000ac8 4c20
000ac9 7465
000aca 7520
000acb 2073                      .db 0x20,0x4c,0x65,0x74,0x20,0x75,0x73,0x20
000acc 656e
000acd 6576
000ace 2072
000acf 656e                      .db 0x6e,0x65,0x76,0x65,0x72,0x20,0x6e,0x65
000ad0 6f67
000ad1 6974
000ad2 7461
000ad3 2065                      .db 0x67,0x6f,0x74,0x69,0x61,0x74,0x65,0x20
000ad4 756f
000ad5 2074
000ad6 666f
000ad7 6620                      .db 0x6f,0x75,0x74,0x20,0x6f,0x66,0x20,0x66
000ad8 6165
000ad9 2e72
000ada 4220
000adb 7475                      .db 0x65,0x61,0x72,0x2e,0x20,0x42,0x75,0x74
000adc 6c20
000add 7465
000ade 7520
000adf 2073                      .db 0x20,0x6c,0x65,0x74,0x20,0x75,0x73,0x20
000ae0 656e
000ae1 6576
000ae2 2072
000ae3 6566                      .db 0x6e,0x65,0x76,0x65,0x72,0x20,0x66,0x65
000ae4 7261
000ae5 7420
000ae6 206f
000ae7 656e                      .db 0x61,0x72,0x20,0x74,0x6f,0x20,0x6e,0x65
000ae8 6f67
000ae9 6974
000aea 7461
000aeb 2e65                      .db 0x67,0x6f,0x74,0x69,0x61,0x74,0x65,0x2e
000aec 0a0a
000aed 654c
000aee 2074
000aef 6f62                      .db 0x0a,0x0a,0x4c,0x65,0x74,0x20,0x62,0x6f
000af0 6874
000af1 7320
000af2 6469
000af3 7365                      .db 0x74,0x68,0x20,0x73,0x69,0x64,0x65,0x73
000af4 6520
000af5 7078
000af6 6f6c
000af7 6572                      .db 0x20,0x65,0x78,0x70,0x6c,0x6f,0x72,0x65
000af8 7720
000af9 6168
000afa 2074
000afb 7270                      .db 0x20,0x77,0x68,0x61,0x74,0x20,0x70,0x72
000afc 626f
000afd 656c
000afe 736d
000aff 7520                      .db 0x6f,0x62,0x6c,0x65,0x6d,0x73,0x20,0x75
000b00 696e
000b01 6574
000b02 7520
000b03 2073                      .db 0x6e,0x69,0x74,0x65,0x20,0x75,0x73,0x20
000b04 6e69
000b05 7473
000b06 6165
000b07 2064                      .db 0x69,0x6e,0x73,0x74,0x65,0x61,0x64,0x20
000b08 666f
000b09 6220
000b0a 6c65
000b0b 6261                      .db 0x6f,0x66,0x20,0x62,0x65,0x6c,0x61,0x62
000b0c 726f
000b0d 6e69
000b0e 2067
000b0f 6874                      .db 0x6f,0x72,0x69,0x6e,0x67,0x20,0x74,0x68
000b10 736f
000b11 2065
000b12 7270
000b13 626f                      .db 0x6f,0x73,0x65,0x20,0x70,0x72,0x6f,0x62
000b14 656c
000b15 736d
000b16 7720
000b17 6968                      .db 0x6c,0x65,0x6d,0x73,0x20,0x77,0x68,0x69
000b18 6863
000b19 6420
000b1a 7669
000b1b 6469                      .db 0x63,0x68,0x20,0x64,0x69,0x76,0x69,0x64
000b1c 2065
000b1d 7375
000b1e 0a2e
000b1f 4c0a                      .db 0x65,0x20,0x75,0x73,0x2e,0x0a,0x0a,0x4c
000b20 7465
000b21 6220
000b22 746f
000b23 2068                      .db 0x65,0x74,0x20,0x62,0x6f,0x74,0x68,0x20
000b24 6973
000b25 6564
000b26 2c73
000b27 6620                      .db 0x73,0x69,0x64,0x65,0x73,0x2c,0x20,0x66
000b28 726f
000b29 7420
000b2a 6568
000b2b 6620                      .db 0x6f,0x72,0x20,0x74,0x68,0x65,0x20,0x66
000b2c 7269
000b2d 7473
000b2e 7420
000b2f 6d69                      .db 0x69,0x72,0x73,0x74,0x20,0x74,0x69,0x6d
000b30 2c65
000b31 6620
000b32 726f
000b33 756d                      .db 0x65,0x2c,0x20,0x66,0x6f,0x72,0x6d,0x75
000b34 616c
000b35 6574
000b36 7320
000b37 7265                      .db 0x6c,0x61,0x74,0x65,0x20,0x73,0x65,0x72
000b38 6f69
000b39 7375
000b3a 6120
000b3b 646e                      .db 0x69,0x6f,0x75,0x73,0x20,0x61,0x6e,0x64
000b3c 7020
000b3d 6572
000b3e 6963
000b3f 6573                      .db 0x20,0x70,0x72,0x65,0x63,0x69,0x73,0x65
000b40 7020
000b41 6f72
000b42 6f70
000b43 6173                      .db 0x20,0x70,0x72,0x6f,0x70,0x6f,0x73,0x61
000b44 736c
000b45 6620
000b46 726f
000b47 7420                      .db 0x6c,0x73,0x20,0x66,0x6f,0x72,0x20,0x74
000b48 6568
000b49 6920
000b4a 736e
000b4b 6570                      .db 0x68,0x65,0x20,0x69,0x6e,0x73,0x70,0x65
000b4c 7463
000b4d 6f69
000b4e 206e
000b4f 6e61                      .db 0x63,0x74,0x69,0x6f,0x6e,0x20,0x61,0x6e
000b50 2064
000b51 6f63
000b52 746e
000b53 6f72                      .db 0x64,0x20,0x63,0x6f,0x6e,0x74,0x72,0x6f
000b54 206c
000b55 666f
000b56 6120
000b57 6d72                      .db 0x6c,0x20,0x6f,0x66,0x20,0x61,0x72,0x6d
000b58 2d73
000b59 612d
000b5a 646e
000b5b 6220                      .db 0x73,0x2d,0x2d,0x61,0x6e,0x64,0x20,0x62
000b5c 6972
000b5d 676e
000b5e 7420
000b5f 6568                      .db 0x72,0x69,0x6e,0x67,0x20,0x74,0x68,0x65
000b60 6120
000b61 7362
000b62 6c6f
000b63 7475                      .db 0x20,0x61,0x62,0x73,0x6f,0x6c,0x75,0x74
000b64 2065
000b65 6f70
000b66 6577
000b67 2072                      .db 0x65,0x20,0x70,0x6f,0x77,0x65,0x72,0x20
000b68 6f74
000b69 6420
000b6a 7365
000b6b 7274                      .db 0x74,0x6f,0x20,0x64,0x65,0x73,0x74,0x72
000b6c 796f
000b6d 6f20
000b6e 6874
000b6f 7265                      .db 0x6f,0x79,0x20,0x6f,0x74,0x68,0x65,0x72
000b70 6e20
000b71 7461
000b72 6f69
000b73 736e                      .db 0x20,0x6e,0x61,0x74,0x69,0x6f,0x6e,0x73
000b74 7520
000b75 646e
000b76 7265
000b77 7420                      .db 0x20,0x75,0x6e,0x64,0x65,0x72,0x20,0x74
000b78 6568
000b79 6120
000b7a 7362
000b7b 6c6f                      .db 0x68,0x65,0x20,0x61,0x62,0x73,0x6f,0x6c
000b7c 7475
000b7d 2065
000b7e 6f63
000b7f 746e                      .db 0x75,0x74,0x65,0x20,0x63,0x6f,0x6e,0x74
000b80 6f72
000b81 206c
000b82 666f
000b83 6120                      .db 0x72,0x6f,0x6c,0x20,0x6f,0x66,0x20,0x61
000b84 6c6c
000b85 6e20
000b86 7461
000b87 6f69                      .db 0x6c,0x6c,0x20,0x6e,0x61,0x74,0x69,0x6f
000b88 736e
000b89 0a2e
000b8a 4c0a
000b8b 7465                      .db 0x6e,0x73,0x2e,0x0a,0x0a,0x4c,0x65,0x74
000b8c 6220
000b8d 746f
000b8e 2068
000b8f 6973                      .db 0x20,0x62,0x6f,0x74,0x68,0x20,0x73,0x69
000b90 6564
000b91 2073
000b92 6573
000b93 6b65                      .db 0x64,0x65,0x73,0x20,0x73,0x65,0x65,0x6b
000b94 7420
000b95 206f
000b96 6e69
000b97 6f76                      .db 0x20,0x74,0x6f,0x20,0x69,0x6e,0x76,0x6f
000b98 656b
000b99 7420
000b9a 6568
000b9b 7720                      .db 0x6b,0x65,0x20,0x74,0x68,0x65,0x20,0x77
000b9c 6e6f
000b9d 6564
000b9e 7372
000b9f 6f20                      .db 0x6f,0x6e,0x64,0x65,0x72,0x73,0x20,0x6f
000ba0 2066
000ba1 6373
000ba2 6569
000ba3 636e                      .db 0x66,0x20,0x73,0x63,0x69,0x65,0x6e,0x63
000ba4 2065
000ba5 6e69
000ba6 7473
000ba7 6165                      .db 0x65,0x20,0x69,0x6e,0x73,0x74,0x65,0x61
000ba8 2064
000ba9 666f
000baa 6920
000bab 7374                      .db 0x64,0x20,0x6f,0x66,0x20,0x69,0x74,0x73
000bac 7420
000bad 7265
000bae 6f72
000baf 7372                      .db 0x20,0x74,0x65,0x72,0x72,0x6f,0x72,0x73
000bb0 202e
000bb1 6f54
000bb2 6567
000bb3 6874                      .db 0x2e,0x20,0x54,0x6f,0x67,0x65,0x74,0x68
000bb4 7265
000bb5 6c20
000bb6 7465
000bb7 7520                      .db 0x65,0x72,0x20,0x6c,0x65,0x74,0x20,0x75
000bb8 2073
000bb9 7865
000bba 6c70
000bbb 726f                      .db 0x73,0x20,0x65,0x78,0x70,0x6c,0x6f,0x72
000bbc 2065
000bbd 6874
000bbe 2065
000bbf 7473                      .db 0x65,0x20,0x74,0x68,0x65,0x20,0x73,0x74
000bc0 7261
000bc1 2c73
000bc2 6320
000bc3 6e6f                      .db 0x61,0x72,0x73,0x2c,0x20,0x63,0x6f,0x6e
000bc4 7571
000bc5 7265
000bc6 7420
000bc7 6568                      .db 0x71,0x75,0x65,0x72,0x20,0x74,0x68,0x65
000bc8 6420
000bc9 7365
000bca 7265
000bcb 7374                      .db 0x20,0x64,0x65,0x73,0x65,0x72,0x74,0x73
000bcc 202c
000bcd 7265
000bce 6461
000bcf 6369                      .db 0x2c,0x20,0x65,0x72,0x61,0x64,0x69,0x63
000bd0 7461
000bd1 2065
000bd2 6964
000bd3 6573                      .db 0x61,0x74,0x65,0x20,0x64,0x69,0x73,0x65
000bd4 7361
000bd5 2c65
000bd6 7420
000bd7 7061                      .db 0x61,0x73,0x65,0x2c,0x20,0x74,0x61,0x70
000bd8 7420
000bd9 6568
000bda 6f20
000bdb 6563                      .db 0x20,0x74,0x68,0x65,0x20,0x6f,0x63,0x65
000bdc 6e61
000bdd 6420
000bde 7065
000bdf 6874                      .db 0x61,0x6e,0x20,0x64,0x65,0x70,0x74,0x68
000be0 2c73
000be1 6120
000be2 646e
000be3 6520                      .db 0x73,0x2c,0x20,0x61,0x6e,0x64,0x20,0x65
000be4 636e
000be5 756f
000be6 6172
000be7 6567                      .db 0x6e,0x63,0x6f,0x75,0x72,0x61,0x67,0x65
000be8 7420
000be9 6568
000bea 6120
000beb 7472                      .db 0x20,0x74,0x68,0x65,0x20,0x61,0x72,0x74
000bec 2073
000bed 6e61
000bee 2064
000bef 6f63                      .db 0x73,0x20,0x61,0x6e,0x64,0x20,0x63,0x6f
000bf0 6d6d
000bf1 7265
000bf2 6563
000bf3 0a2e                      .db 0x6d,0x6d,0x65,0x72,0x63,0x65,0x2e,0x0a
000bf4 4c0a
000bf5 7465
000bf6 6220
000bf7 746f                      .db 0x0a,0x4c,0x65,0x74,0x20,0x62,0x6f,0x74
000bf8 2068
000bf9 6973
000bfa 6564
000bfb 2073                      .db 0x68,0x20,0x73,0x69,0x64,0x65,0x73,0x20
000bfc 6e75
000bfd 7469
000bfe 2065
000bff 6f74                      .db 0x75,0x6e,0x69,0x74,0x65,0x20,0x74,0x6f
000c00 6820
000c01 6565
000c02 2064
000c03 6e69                      .db 0x20,0x68,0x65,0x65,0x64,0x20,0x69,0x6e
000c04 6120
000c05 6c6c
000c06 6320
000c07 726f                      .db 0x20,0x61,0x6c,0x6c,0x20,0x63,0x6f,0x72
000c08 656e
000c09 7372
000c0a 6f20
000c0b 2066                      .db 0x6e,0x65,0x72,0x73,0x20,0x6f,0x66,0x20
000c0c 6874
000c0d 2065
000c0e 6165
000c0f 7472                      .db 0x74,0x68,0x65,0x20,0x65,0x61,0x72,0x74
000c10 2068
000c11 6874
000c12 2065
000c13 6f63                      .db 0x68,0x20,0x74,0x68,0x65,0x20,0x63,0x6f
000c14 6d6d
000c15 6e61
000c16 2064
000c17 666f                      .db 0x6d,0x6d,0x61,0x6e,0x64,0x20,0x6f,0x66
000c18 4920
000c19 6173
000c1a 6169
000c1b 2d68                      .db 0x20,0x49,0x73,0x61,0x69,0x61,0x68,0x2d
000c1c 742d
000c1d 206f
000c1e 7522
000c1f 646e                      .db 0x2d,0x74,0x6f,0x20,0x22,0x75,0x6e,0x64
000c20 206f
000c21 6874
000c22 2065
000c23 6568                      .db 0x6f,0x20,0x74,0x68,0x65,0x20,0x68,0x65
000c24 7661
000c25 2079
000c26 7562
000c27 6472                      .db 0x61,0x76,0x79,0x20,0x62,0x75,0x72,0x64
000c28 6e65
000c29 2073
000c2a 2e2e
000c2b 202e                      .db 0x65,0x6e,0x73,0x20,0x2e,0x2e,0x2e,0x20
000c2c 6e61
000c2d 2064
000c2e 6f74
000c2f 6c20                      .db 0x61,0x6e,0x64,0x20,0x74,0x6f,0x20,0x6c
000c30 7465
000c31 7420
000c32 6568
000c33 6f20                      .db 0x65,0x74,0x20,0x74,0x68,0x65,0x20,0x6f
000c34 7070
000c35 6572
000c36 7373
000c37 6465                      .db 0x70,0x70,0x72,0x65,0x73,0x73,0x65,0x64
000c38 6720
000c39 206f
000c3a 7266
000c3b 6565                      .db 0x20,0x67,0x6f,0x20,0x66,0x72,0x65,0x65
000c3c 222e
000c3d 0a0a
000c3e 6e41
000c3f 2064                      .db 0x2e,0x22,0x0a,0x0a,0x41,0x6e,0x64,0x20
000c40 6669
000c41 6120
000c42 6220
000c43 6165                      .db 0x69,0x66,0x20,0x61,0x20,0x62,0x65,0x61
000c44 6863
000c45 6568
000c46 6461
000c47 6f20                      .db 0x63,0x68,0x68,0x65,0x61,0x64,0x20,0x6f
000c48 2066
000c49 6f63
000c4a 706f
000c4b 7265                      .db 0x66,0x20,0x63,0x6f,0x6f,0x70,0x65,0x72
000c4c 7461
000c4d 6f69
000c4e 206e
000c4f 616d                      .db 0x61,0x74,0x69,0x6f,0x6e,0x20,0x6d,0x61
000c50 2079
000c51 7570
000c52 6873
000c53 6220                      .db 0x79,0x20,0x70,0x75,0x73,0x68,0x20,0x62
000c54 6361
000c55 206b
000c56 6874
000c57 2065                      .db 0x61,0x63,0x6b,0x20,0x74,0x68,0x65,0x20
000c58 756a
000c59 676e
000c5a 656c
000c5b 6f20                      .db 0x6a,0x75,0x6e,0x67,0x6c,0x65,0x20,0x6f
000c5c 2066
000c5d 7573
000c5e 7073
000c5f 6369                      .db 0x66,0x20,0x73,0x75,0x73,0x70,0x69,0x63
000c60 6f69
000c61 2c6e
000c62 6c20
000c63 7465                      .db 0x69,0x6f,0x6e,0x2c,0x20,0x6c,0x65,0x74
000c64 6220
000c65 746f
000c66 2068
000c67 6973                      .db 0x20,0x62,0x6f,0x74,0x68,0x20,0x73,0x69
000c68 6564
000c69 2073
000c6a 6f6a
000c6b 6e69                      .db 0x64,0x65,0x73,0x20,0x6a,0x6f,0x69,0x6e
000c6c 6920
000c6d 206e
000c6e 7263
000c6f 6165                      .db 0x20,0x69,0x6e,0x20,0x63,0x72,0x65,0x61
000c70 6974
000c71 676e
000c72 6120
000c73 6e20                      .db 0x74,0x69,0x6e,0x67,0x20,0x61,0x20,0x6e
000c74 7765
000c75 6520
000c76 646e
000c77 6165                      .db 0x65,0x77,0x20,0x65,0x6e,0x64,0x65,0x61
000c78 6f76
000c79 2c72
000c7a 6e20
000c7b 746f                      .db 0x76,0x6f,0x72,0x2c,0x20,0x6e,0x6f,0x74
000c7c 6120
000c7d 6e20
000c7e 7765
000c7f 6220                      .db 0x20,0x61,0x20,0x6e,0x65,0x77,0x20,0x62
000c80 6c61
000c81 6e61
000c82 6563
000c83 6f20                      .db 0x61,0x6c,0x61,0x6e,0x63,0x65,0x20,0x6f
000c84 2066
000c85 6f70
000c86 6577
000c87 2c72                      .db 0x66,0x20,0x70,0x6f,0x77,0x65,0x72,0x2c
000c88 6220
000c89 7475
000c8a 6120
000c8b 6e20                      .db 0x20,0x62,0x75,0x74,0x20,0x61,0x20,0x6e
000c8c 7765
000c8d 7720
000c8e 726f
000c8f 646c                      .db 0x65,0x77,0x20,0x77,0x6f,0x72,0x6c,0x64
000c90 6f20
000c91 2066
000c92 616c
000c93 2c77                      .db 0x20,0x6f,0x66,0x20,0x6c,0x61,0x77,0x2c
000c94 7720
000c95 6568
000c96 6572
000c97 7420                      .db 0x20,0x77,0x68,0x65,0x72,0x65,0x20,0x74
000c98 6568
000c99 7320
000c9a 7274
000c9b 6e6f                      .db 0x68,0x65,0x20,0x73,0x74,0x72,0x6f,0x6e
000c9c 2067
000c9d 7261
000c9e 2065
000c9f 756a                      .db 0x67,0x20,0x61,0x72,0x65,0x20,0x6a,0x75
000ca0 7473
000ca1 6120
000ca2 646e
000ca3 7420                      .db 0x73,0x74,0x20,0x61,0x6e,0x64,0x20,0x74
000ca4 6568
000ca5 7720
000ca6 6165
000ca7 206b                      .db 0x68,0x65,0x20,0x77,0x65,0x61,0x6b,0x20
000ca8 6573
000ca9 7563
000caa 6572
000cab 6120                      .db 0x73,0x65,0x63,0x75,0x72,0x65,0x20,0x61
000cac 646e
000cad 7420
000cae 6568
000caf 7020                      .db 0x6e,0x64,0x20,0x74,0x68,0x65,0x20,0x70
000cb0 6165
000cb1 6563
000cb2 7020
000cb3 6572                      .db 0x65,0x61,0x63,0x65,0x20,0x70,0x72,0x65
000cb4 6573
000cb5 7672
000cb6 6465
000cb7 0a2e                      .db 0x73,0x65,0x72,0x76,0x65,0x64,0x2e,0x0a
000cb8 410a
000cb9 6c6c
000cba 7420
000cbb 6968                      .db 0x0a,0x41,0x6c,0x6c,0x20,0x74,0x68,0x69
000cbc 2073
000cbd 6977
000cbe 6c6c
000cbf 6e20                      .db 0x73,0x20,0x77,0x69,0x6c,0x6c,0x20,0x6e
000cc0 746f
000cc1 6220
000cc2 2065
000cc3 6966                      .db 0x6f,0x74,0x20,0x62,0x65,0x20,0x66,0x69
000cc4 696e
000cc5 6873
000cc6 6465
000cc7 6920                      .db 0x6e,0x69,0x73,0x68,0x65,0x64,0x20,0x69
000cc8 206e
000cc9 6874
000cca 2065
000ccb 6966                      .db 0x6e,0x20,0x74,0x68,0x65,0x20,0x66,0x69
000ccc 7372
000ccd 2074
000cce 3031
000ccf 2030                      .db 0x72,0x73,0x74,0x20,0x31,0x30,0x30,0x20
000cd0 6164
000cd1 7379
000cd2 202e
000cd3 6f4e                      .db 0x64,0x61,0x79,0x73,0x2e,0x20,0x4e,0x6f
000cd4 2072
000cd5 6977
000cd6 6c6c
000cd7 6920                      .db 0x72,0x20,0x77,0x69,0x6c,0x6c,0x20,0x69
000cd8 2074
000cd9 6562
000cda 6620
000cdb 6e69                      .db 0x74,0x20,0x62,0x65,0x20,0x66,0x69,0x6e
000cdc 7369
000cdd 6568
000cde 2064
000cdf 6e69                      .db 0x69,0x73,0x68,0x65,0x64,0x20,0x69,0x6e
000ce0 7420
000ce1 6568
000ce2 6620
000ce3 7269                      .db 0x20,0x74,0x68,0x65,0x20,0x66,0x69,0x72
000ce4 7473
000ce5 3120
000ce6 302c
000ce7 3030                      .db 0x73,0x74,0x20,0x31,0x2c,0x30,0x30,0x30
000ce8 6420
000ce9 7961
000cea 2c73
000ceb 6e20                      .db 0x20,0x64,0x61,0x79,0x73,0x2c,0x20,0x6e
000cec 726f
000ced 6920
000cee 206e
000cef 6874                      .db 0x6f,0x72,0x20,0x69,0x6e,0x20,0x74,0x68
000cf0 2065
000cf1 696c
000cf2 6566
000cf3 6f20                      .db 0x65,0x20,0x6c,0x69,0x66,0x65,0x20,0x6f
000cf4 2066
000cf5 6874
000cf6 7369
000cf7 4120                      .db 0x66,0x20,0x74,0x68,0x69,0x73,0x20,0x41
000cf8 6d64
000cf9 6e69
000cfa 7369
000cfb 7274                      .db 0x64,0x6d,0x69,0x6e,0x69,0x73,0x74,0x72
000cfc 7461
000cfd 6f69
000cfe 2c6e
000cff 6e20                      .db 0x61,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x6e
000d00 726f
000d01 6520
000d02 6576
000d03 206e                      .db 0x6f,0x72,0x20,0x65,0x76,0x65,0x6e,0x20
000d04 6570
000d05 6872
000d06 7061
000d07 2073                      .db 0x70,0x65,0x72,0x68,0x61,0x70,0x73,0x20
000d08 6e69
000d09 6f20
000d0a 7275
000d0b 6c20                      .db 0x69,0x6e,0x20,0x6f,0x75,0x72,0x20,0x6c
000d0c 6669
000d0d 7465
000d0e 6d69
000d0f 2065                      .db 0x69,0x66,0x65,0x74,0x69,0x6d,0x65,0x20
000d10 6e6f
000d11 7420
000d12 6968
000d13 2073                      .db 0x6f,0x6e,0x20,0x74,0x68,0x69,0x73,0x20
000d14 6c70
000d15 6e61
000d16 7465
000d17 202e                      .db 0x70,0x6c,0x61,0x6e,0x65,0x74,0x2e,0x20
000d18 7542
000d19 2074
000d1a 656c
000d1b 2074                      .db 0x42,0x75,0x74,0x20,0x6c,0x65,0x74,0x20
000d1c 7375
000d1d 6220
000d1e 6765
000d1f 6e69                      .db 0x75,0x73,0x20,0x62,0x65,0x67,0x69,0x6e
000d20 0a2e
000d21 490a
000d22 206e
000d23 6f79                      .db 0x2e,0x0a,0x0a,0x49,0x6e,0x20,0x79,0x6f
000d24 7275
000d25 6820
000d26 6e61
000d27 7364                      .db 0x75,0x72,0x20,0x68,0x61,0x6e,0x64,0x73
000d28 202c
000d29 796d
000d2a 6620
000d2b 6c65                      .db 0x2c,0x20,0x6d,0x79,0x20,0x66,0x65,0x6c
000d2c 6f6c
000d2d 2077
000d2e 6963
000d2f 6974                      .db 0x6c,0x6f,0x77,0x20,0x63,0x69,0x74,0x69
000d30 657a
000d31 736e
000d32 202c
000d33 6f6d                      .db 0x7a,0x65,0x6e,0x73,0x2c,0x20,0x6d,0x6f
000d34 6572
000d35 7420
000d36 6168
000d37 206e                      .db 0x72,0x65,0x20,0x74,0x68,0x61,0x6e,0x20
000d38 6e69
000d39 6d20
000d3a 6e69
000d3b 2c65                      .db 0x69,0x6e,0x20,0x6d,0x69,0x6e,0x65,0x2c
000d3c 7720
000d3d 6c69
000d3e 206c
000d3f 6572                      .db 0x20,0x77,0x69,0x6c,0x6c,0x20,0x72,0x65
000d40 7473
000d41 7420
000d42 6568
000d43 6620                      .db 0x73,0x74,0x20,0x74,0x68,0x65,0x20,0x66
000d44 6e69
000d45 6c61
000d46 7320
000d47 6375                      .db 0x69,0x6e,0x61,0x6c,0x20,0x73,0x75,0x63
000d48 6563
000d49 7373
000d4a 6f20
000d4b 2072                      .db 0x63,0x65,0x73,0x73,0x20,0x6f,0x72,0x20
000d4c 6166
000d4d 6c69
000d4e 7275
000d4f 2065                      .db 0x66,0x61,0x69,0x6c,0x75,0x72,0x65,0x20
000d50 666f
000d51 6f20
000d52 7275
000d53 6320                      .db 0x6f,0x66,0x20,0x6f,0x75,0x72,0x20,0x63
000d54 756f
000d55 7372
000d56 2e65
000d57 5320                      .db 0x6f,0x75,0x72,0x73,0x65,0x2e,0x20,0x53
000d58 6e69
000d59 6563
000d5a 7420
000d5b 6968                      .db 0x69,0x6e,0x63,0x65,0x20,0x74,0x68,0x69
000d5c 2073
000d5d 6f63
000d5e 6e75
000d5f 7274                      .db 0x73,0x20,0x63,0x6f,0x75,0x6e,0x74,0x72
000d60 2079
000d61 6177
000d62 2073
000d63 6f66                      .db 0x79,0x20,0x77,0x61,0x73,0x20,0x66,0x6f
000d64 6e75
000d65 6564
000d66 2c64
000d67 6520                      .db 0x75,0x6e,0x64,0x65,0x64,0x2c,0x20,0x65
000d68 6361
000d69 2068
000d6a 6567
000d6b 656e                      .db 0x61,0x63,0x68,0x20,0x67,0x65,0x6e,0x65
000d6c 6172
000d6d 6974
000d6e 6e6f
000d6f 6f20                      .db 0x72,0x61,0x74,0x69,0x6f,0x6e,0x20,0x6f
000d70 2066
000d71 6d41
000d72 7265
000d73 6369                      .db 0x66,0x20,0x41,0x6d,0x65,0x72,0x69,0x63
000d74 6e61
000d75 2073
000d76 6168
000d77 2073                      .db 0x61,0x6e,0x73,0x20,0x68,0x61,0x73,0x20
000d78 6562
000d79 6e65
000d7a 7320
000d7b 6d75                      .db 0x62,0x65,0x65,0x6e,0x20,0x73,0x75,0x6d
000d7c 6f6d
000d7d 656e
000d7e 2064
000d7f 6f74                      .db 0x6d,0x6f,0x6e,0x65,0x64,0x20,0x74,0x6f
000d80 6720
000d81 7669
000d82 2065
000d83 6574                      .db 0x20,0x67,0x69,0x76,0x65,0x20,0x74,0x65
000d84 7473
000d85 6d69
000d86 6e6f
000d87 2079                      .db 0x73,0x74,0x69,0x6d,0x6f,0x6e,0x79,0x20
000d88 6f74
000d89 6920
000d8a 7374
000d8b 6e20                      .db 0x74,0x6f,0x20,0x69,0x74,0x73,0x20,0x6e
000d8c 7461
000d8d 6f69
000d8e 616e
000d8f 206c                      .db 0x61,0x74,0x69,0x6f,0x6e,0x61,0x6c,0x20
000d90 6f6c
000d91 6179
000d92 746c
000d93 2e79                      .db 0x6c,0x6f,0x79,0x61,0x6c,0x74,0x79,0x2e
000d94 5420
000d95 6568
000d96 6720
000d97 6172                      .db 0x20,0x54,0x68,0x65,0x20,0x67,0x72,0x61
000d98 6576
000d99 2073
000d9a 666f
000d9b 7920                      .db 0x76,0x65,0x73,0x20,0x6f,0x66,0x20,0x79
000d9c 756f
000d9d 676e
000d9e 4120
000d9f 656d                      .db 0x6f,0x75,0x6e,0x67,0x20,0x41,0x6d,0x65
000da0 6972
000da1 6163
000da2 736e
000da3 7720                      .db 0x72,0x69,0x63,0x61,0x6e,0x73,0x20,0x77
000da4 6f68
000da5 6120
000da6 736e
000da7 6577                      .db 0x68,0x6f,0x20,0x61,0x6e,0x73,0x77,0x65
000da8 6572
000da9 2064
000daa 6874
000dab 2065                      .db 0x72,0x65,0x64,0x20,0x74,0x68,0x65,0x20
000dac 6163
000dad 6c6c
000dae 7420
000daf 206f                      .db 0x63,0x61,0x6c,0x6c,0x20,0x74,0x6f,0x20
000db0 6573
000db1 7672
000db2 6369
000db3 2065                      .db 0x73,0x65,0x72,0x76,0x69,0x63,0x65,0x20
000db4 7573
000db5 7272
000db6 756f
000db7 646e                      .db 0x73,0x75,0x72,0x72,0x6f,0x75,0x6e,0x64
000db8 7420
000db9 6568
000dba 6720
000dbb 6f6c                      .db 0x20,0x74,0x68,0x65,0x20,0x67,0x6c,0x6f
000dbc 6562
000dbd 0a2e
000dbe 4e0a
000dbf 776f                      .db 0x62,0x65,0x2e,0x0a,0x0a,0x4e,0x6f,0x77
000dc0 7420
000dc1 6568
000dc2 7420
000dc3 7572                      .db 0x20,0x74,0x68,0x65,0x20,0x74,0x72,0x75
000dc4 706d
000dc5 7465
000dc6 7320
000dc7 6d75                      .db 0x6d,0x70,0x65,0x74,0x20,0x73,0x75,0x6d
000dc8 6f6d
000dc9 736e
000dca 7520
000dcb 2073                      .db 0x6d,0x6f,0x6e,0x73,0x20,0x75,0x73,0x20
000dcc 6761
000dcd 6961
000dce 2d6e
000dcf 6e2d                      .db 0x61,0x67,0x61,0x69,0x6e,0x2d,0x2d,0x6e
000dd0 746f
000dd1 6120
000dd2 2073
000dd3 2061                      .db 0x6f,0x74,0x20,0x61,0x73,0x20,0x61,0x20
000dd4 6163
000dd5 6c6c
000dd6 7420
000dd7 206f                      .db 0x63,0x61,0x6c,0x6c,0x20,0x74,0x6f,0x20
000dd8 6562
000dd9 7261
000dda 6120
000ddb 6d72                      .db 0x62,0x65,0x61,0x72,0x20,0x61,0x72,0x6d
000ddc 2c73
000ddd 7420
000dde 6f68
000ddf 6775                      .db 0x73,0x2c,0x20,0x74,0x68,0x6f,0x75,0x67
000de0 2068
000de1 7261
000de2 736d
000de3 7720                      .db 0x68,0x20,0x61,0x72,0x6d,0x73,0x20,0x77
000de4 2065
000de5 656e
000de6 6465
000de7 203b                      .db 0x65,0x20,0x6e,0x65,0x65,0x64,0x3b,0x20
000de8 6f6e
000de9 2074
000dea 7361
000deb 6120                      .db 0x6e,0x6f,0x74,0x20,0x61,0x73,0x20,0x61
000dec 6320
000ded 6c61
000dee 206c
000def 6f74                      .db 0x20,0x63,0x61,0x6c,0x6c,0x20,0x74,0x6f
000df0 6220
000df1 7461
000df2 6c74
000df3 2c65                      .db 0x20,0x62,0x61,0x74,0x74,0x6c,0x65,0x2c
000df4 7420
000df5 6f68
000df6 6775
000df7 2068                      .db 0x20,0x74,0x68,0x6f,0x75,0x67,0x68,0x20
000df8 6d65
000df9 6162
000dfa 7474
000dfb 656c                      .db 0x65,0x6d,0x62,0x61,0x74,0x74,0x6c,0x65
000dfc 2064
000dfd 6577
000dfe 6120
000dff 6572                      .db 0x64,0x20,0x77,0x65,0x20,0x61,0x72,0x65
000e00 2d2d
000e01 7562
000e02 2074
000e03 2061                      .db 0x2d,0x2d,0x62,0x75,0x74,0x20,0x61,0x20
000e04 6163
000e05 6c6c
000e06 7420
000e07 206f                      .db 0x63,0x61,0x6c,0x6c,0x20,0x74,0x6f,0x20
000e08 6562
000e09 7261
000e0a 7420
000e0b 6568                      .db 0x62,0x65,0x61,0x72,0x20,0x74,0x68,0x65
000e0c 6220
000e0d 7275
000e0e 6564
000e0f 206e                      .db 0x20,0x62,0x75,0x72,0x64,0x65,0x6e,0x20
000e10 666f
000e11 6120
000e12 6c20
000e13 6e6f                      .db 0x6f,0x66,0x20,0x61,0x20,0x6c,0x6f,0x6e
000e14 2067
000e15 7774
000e16 6c69
000e17 6769                      .db 0x67,0x20,0x74,0x77,0x69,0x6c,0x69,0x67
000e18 7468
000e19 7320
000e1a 7274
000e1b 6775                      .db 0x68,0x74,0x20,0x73,0x74,0x72,0x75,0x67
000e1c 6c67
000e1d 2c65
000e1e 7920
000e1f 6165                      .db 0x67,0x6c,0x65,0x2c,0x20,0x79,0x65,0x61
000e20 2072
000e21 6e69
000e22 6120
000e23 646e                      .db 0x72,0x20,0x69,0x6e,0x20,0x61,0x6e,0x64
000e24 7920
000e25 6165
000e26 2072
000e27 756f                      .db 0x20,0x79,0x65,0x61,0x72,0x20,0x6f,0x75
000e28 2c74
000e29 2220
000e2a 6572
000e2b 6f6a                      .db 0x74,0x2c,0x20,0x22,0x72,0x65,0x6a,0x6f
000e2c 6369
000e2d 6e69
000e2e 2067
000e2f 6e69                      .db 0x69,0x63,0x69,0x6e,0x67,0x20,0x69,0x6e
000e30 6820
000e31 706f
000e32 2c65
000e33 7020                      .db 0x20,0x68,0x6f,0x70,0x65,0x2c,0x20,0x70
000e34 7461
000e35 6569
000e36 746e
000e37 6920                      .db 0x61,0x74,0x69,0x65,0x6e,0x74,0x20,0x69
000e38 206e
000e39 7274
000e3a 6269
000e3b 6c75                      .db 0x6e,0x20,0x74,0x72,0x69,0x62,0x75,0x6c
000e3c 7461
000e3d 6f69
000e3e 226e
000e3f 2d2d                      .db 0x61,0x74,0x69,0x6f,0x6e,0x22,0x2d,0x2d
000e40 2061
000e41 7473
000e42 7572
000e43 6767                      .db 0x61,0x20,0x73,0x74,0x72,0x75,0x67,0x67
000e44 656c
000e45 6120
000e46 6167
000e47 6e69                      .db 0x6c,0x65,0x20,0x61,0x67,0x61,0x69,0x6e
000e48 7473
000e49 7420
000e4a 6568
000e4b 6320                      .db 0x73,0x74,0x20,0x74,0x68,0x65,0x20,0x63
000e4c 6d6f
000e4d 6f6d
000e4e 206e
000e4f 6e65                      .db 0x6f,0x6d,0x6d,0x6f,0x6e,0x20,0x65,0x6e
000e50 6d65
000e51 6569
000e52 2073
000e53 666f                      .db 0x65,0x6d,0x69,0x65,0x73,0x20,0x6f,0x66
000e54 6d20
000e55 6e61
000e56 203a
000e57 7974                      .db 0x20,0x6d,0x61,0x6e,0x3a,0x20,0x74,0x79
000e58 6172
000e59 6e6e
000e5a 2c79
000e5b 7020                      .db 0x72,0x61,0x6e,0x6e,0x79,0x2c,0x20,0x70
000e5c 766f
000e5d 7265
000e5e 7974
000e5f 202c                      .db 0x6f,0x76,0x65,0x72,0x74,0x79,0x2c,0x20
000e60 6964
000e61 6573
000e62 7361
000e63 2c65                      .db 0x64,0x69,0x73,0x65,0x61,0x73,0x65,0x2c
000e64 6120
000e65 646e
000e66 7720
000e67 7261                      .db 0x20,0x61,0x6e,0x64,0x20,0x77,0x61,0x72
000e68 6920
000e69 7374
000e6a 6c65
000e6b 2e66                      .db 0x20,0x69,0x74,0x73,0x65,0x6c,0x66,0x2e
000e6c 0a0a
000e6d 6143
000e6e 206e
000e6f 6577                      .db 0x0a,0x0a,0x43,0x61,0x6e,0x20,0x77,0x65
000e70 6620
000e71 726f
000e72 6567
000e73 6120                      .db 0x20,0x66,0x6f,0x72,0x67,0x65,0x20,0x61
000e74 6167
000e75 6e69
000e76 7473
000e77 7420                      .db 0x67,0x61,0x69,0x6e,0x73,0x74,0x20,0x74
000e78 6568
000e79 6573
000e7a 6520
000e7b 656e                      .db 0x68,0x65,0x73,0x65,0x20,0x65,0x6e,0x65
000e7c 696d
000e7d 7365
000e7e 6120
000e7f 6720                      .db 0x6d,0x69,0x65,0x73,0x20,0x61,0x20,0x67
000e80 6172
000e81 646e
000e82 6120
000e83 646e                      .db 0x72,0x61,0x6e,0x64,0x20,0x61,0x6e,0x64
000e84 6720
000e85 6f6c
000e86 6162
000e87 206c                      .db 0x20,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x20
000e88 6c61
000e89 696c
000e8a 6e61
000e8b 6563                      .db 0x61,0x6c,0x6c,0x69,0x61,0x6e,0x63,0x65
000e8c 202c
000e8d 6f4e
000e8e 7472
000e8f 2068                      .db 0x2c,0x20,0x4e,0x6f,0x72,0x74,0x68,0x20
000e90 6e61
000e91 2064
000e92 6f53
000e93 7475                      .db 0x61,0x6e,0x64,0x20,0x53,0x6f,0x75,0x74
000e94 2c68
000e95 4520
000e96 7361
000e97 2074                      .db 0x68,0x2c,0x20,0x45,0x61,0x73,0x74,0x20
000e98 6e61
000e99 2064
000e9a 6557
000e9b 7473                      .db 0x61,0x6e,0x64,0x20,0x57,0x65,0x73,0x74
000e9c 202c
000e9d 6874
000e9e 7461
000e9f 6320                      .db 0x2c,0x20,0x74,0x68,0x61,0x74,0x20,0x63
000ea0 6e61
000ea1 6120
000ea2 7373
000ea3 7275                      .db 0x61,0x6e,0x20,0x61,0x73,0x73,0x75,0x72
000ea4 2065
000ea5 2061
000ea6 6f6d
000ea7 6572                      .db 0x65,0x20,0x61,0x20,0x6d,0x6f,0x72,0x65
000ea8 6620
000ea9 7572
000eaa 7469
000eab 7566                      .db 0x20,0x66,0x72,0x75,0x69,0x74,0x66,0x75
000eac 206c
000ead 696c
000eae 6566
000eaf 6620                      .db 0x6c,0x20,0x6c,0x69,0x66,0x65,0x20,0x66
000eb0 726f
000eb1 6120
000eb2 6c6c
000eb3 6d20                      .db 0x6f,0x72,0x20,0x61,0x6c,0x6c,0x20,0x6d
000eb4 6e61
000eb5 696b
000eb6 646e
000eb7 203f                      .db 0x61,0x6e,0x6b,0x69,0x6e,0x64,0x3f,0x20
000eb8 6957
000eb9 6c6c
000eba 7920
000ebb 756f                      .db 0x57,0x69,0x6c,0x6c,0x20,0x79,0x6f,0x75
000ebc 6a20
000ebd 696f
000ebe 206e
000ebf 6e69                      .db 0x20,0x6a,0x6f,0x69,0x6e,0x20,0x69,0x6e
000ec0 7420
000ec1 6168
000ec2 2074
000ec3 6968                      .db 0x20,0x74,0x68,0x61,0x74,0x20,0x68,0x69
000ec4 7473
000ec5 726f
000ec6 6369
000ec7 6520                      .db 0x73,0x74,0x6f,0x72,0x69,0x63,0x20,0x65
000ec8 6666
000ec9 726f
000eca 3f74
000ecb 0a0a                      .db 0x66,0x66,0x6f,0x72,0x74,0x3f,0x0a,0x0a
000ecc 6e49
000ecd 7420
000ece 6568
000ecf 6c20                      .db 0x49,0x6e,0x20,0x74,0x68,0x65,0x20,0x6c
000ed0 6e6f
000ed1 2067
000ed2 6968
000ed3 7473                      .db 0x6f,0x6e,0x67,0x20,0x68,0x69,0x73,0x74
000ed4 726f
000ed5 2079
000ed6 666f
000ed7 7420                      .db 0x6f,0x72,0x79,0x20,0x6f,0x66,0x20,0x74
000ed8 6568
000ed9 7720
000eda 726f
000edb 646c                      .db 0x68,0x65,0x20,0x77,0x6f,0x72,0x6c,0x64
000edc 202c
000edd 6e6f
000ede 796c
000edf 6120                      .db 0x2c,0x20,0x6f,0x6e,0x6c,0x79,0x20,0x61
000ee0 6620
000ee1 7765
000ee2 6720
000ee3 6e65                      .db 0x20,0x66,0x65,0x77,0x20,0x67,0x65,0x6e
000ee4 7265
000ee5 7461
000ee6 6f69
000ee7 736e                      .db 0x65,0x72,0x61,0x74,0x69,0x6f,0x6e,0x73
000ee8 6820
000ee9 7661
000eea 2065
000eeb 6562                      .db 0x20,0x68,0x61,0x76,0x65,0x20,0x62,0x65
000eec 6e65
000eed 6720
000eee 6172
000eef 746e                      .db 0x65,0x6e,0x20,0x67,0x72,0x61,0x6e,0x74
000ef0 6465
000ef1 7420
000ef2 6568
000ef3 7220                      .db 0x65,0x64,0x20,0x74,0x68,0x65,0x20,0x72
000ef4 6c6f
000ef5 2065
000ef6 666f
000ef7 6420                      .db 0x6f,0x6c,0x65,0x20,0x6f,0x66,0x20,0x64
000ef8 6665
000ef9 6e65
000efa 6964
000efb 676e                      .db 0x65,0x66,0x65,0x6e,0x64,0x69,0x6e,0x67
000efc 6620
000efd 6572
000efe 6465
000eff 6d6f                      .db 0x20,0x66,0x72,0x65,0x65,0x64,0x6f,0x6d
000f00 6920
000f01 206e
000f02 7469
000f03 2073                      .db 0x20,0x69,0x6e,0x20,0x69,0x74,0x73,0x20
000f04 6f68
000f05 7275
000f06 6f20
000f07 2066                      .db 0x68,0x6f,0x75,0x72,0x20,0x6f,0x66,0x20
000f08 616d
000f09 6978
000f0a 756d
000f0b 206d                      .db 0x6d,0x61,0x78,0x69,0x6d,0x75,0x6d,0x20
000f0c 6164
000f0d 676e
000f0e 7265
000f0f 202e                      .db 0x64,0x61,0x6e,0x67,0x65,0x72,0x2e,0x20
000f10 2049
000f11 6f64
000f12 6e20
000f13 746f                      .db 0x49,0x20,0x64,0x6f,0x20,0x6e,0x6f,0x74
000f14 7320
000f15 7268
000f16 6e69
000f17 206b                      .db 0x20,0x73,0x68,0x72,0x69,0x6e,0x6b,0x20
000f18 7266
000f19 6d6f
000f1a 7420
000f1b 6968                      .db 0x66,0x72,0x6f,0x6d,0x20,0x74,0x68,0x69
000f1c 2073
000f1d 6572
000f1e 7073
000f1f 6e6f                      .db 0x73,0x20,0x72,0x65,0x73,0x70,0x6f,0x6e
000f20 6973
000f21 6962
000f22 696c
000f23 7974                      .db 0x73,0x69,0x62,0x69,0x6c,0x69,0x74,0x79
000f24 2d2d
000f25 2049
000f26 6577
000f27 636c                      .db 0x2d,0x2d,0x49,0x20,0x77,0x65,0x6c,0x63
000f28 6d6f
000f29 2065
000f2a 7469
000f2b 202e                      .db 0x6f,0x6d,0x65,0x20,0x69,0x74,0x2e,0x20
000f2c 2049
000f2d 6f64
000f2e 6e20
000f2f 746f                      .db 0x49,0x20,0x64,0x6f,0x20,0x6e,0x6f,0x74
000f30 6220
000f31 6c65
000f32 6569
000f33 6576                      .db 0x20,0x62,0x65,0x6c,0x69,0x65,0x76,0x65
000f34 7420
000f35 6168
000f36 2074
000f37 6e61                      .db 0x20,0x74,0x68,0x61,0x74,0x20,0x61,0x6e
000f38 2079
000f39 666f
000f3a 7520
000f3b 2073                      .db 0x79,0x20,0x6f,0x66,0x20,0x75,0x73,0x20
000f3c 6f77
000f3d 6c75
000f3e 2064
000f3f 7865                      .db 0x77,0x6f,0x75,0x6c,0x64,0x20,0x65,0x78
000f40 6863
000f41 6e61
000f42 6567
000f43 7020                      .db 0x63,0x68,0x61,0x6e,0x67,0x65,0x20,0x70
000f44 616c
000f45 6563
000f46 2073
000f47 6977                      .db 0x6c,0x61,0x63,0x65,0x73,0x20,0x77,0x69
000f48 6874
000f49 6120
000f4a 796e
000f4b 6f20                      .db 0x74,0x68,0x20,0x61,0x6e,0x79,0x20,0x6f
000f4c 6874
000f4d 7265
000f4e 7020
000f4f 6f65                      .db 0x74,0x68,0x65,0x72,0x20,0x70,0x65,0x6f
000f50 6c70
000f51 2065
000f52 726f
000f53 6120                      .db 0x70,0x6c,0x65,0x20,0x6f,0x72,0x20,0x61
000f54 796e
000f55 6f20
000f56 6874
000f57 7265                      .db 0x6e,0x79,0x20,0x6f,0x74,0x68,0x65,0x72
000f58 6720
000f59 6e65
000f5a 7265
000f5b 7461                      .db 0x20,0x67,0x65,0x6e,0x65,0x72,0x61,0x74
000f5c 6f69
000f5d 2e6e
000f5e 5420
000f5f 6568                      .db 0x69,0x6f,0x6e,0x2e,0x20,0x54,0x68,0x65
000f60 6520
000f61 656e
000f62 6772
000f63 2c79                      .db 0x20,0x65,0x6e,0x65,0x72,0x67,0x79,0x2c
000f64 7420
000f65 6568
000f66 6620
000f67 6961                      .db 0x20,0x74,0x68,0x65,0x20,0x66,0x61,0x69
000f68 6874
000f69 202c
000f6a 6874
000f6b 2065                      .db 0x74,0x68,0x2c,0x20,0x74,0x68,0x65,0x20
000f6c 6564
000f6d 6f76
000f6e 6974
000f6f 6e6f                      .db 0x64,0x65,0x76,0x6f,0x74,0x69,0x6f,0x6e
000f70 7720
000f71 6968
000f72 6863
000f73 7720                      .db 0x20,0x77,0x68,0x69,0x63,0x68,0x20,0x77
000f74 2065
000f75 7262
000f76 6e69
000f77 2067                      .db 0x65,0x20,0x62,0x72,0x69,0x6e,0x67,0x20
000f78 6f74
000f79 7420
000f7a 6968
000f7b 2073                      .db 0x74,0x6f,0x20,0x74,0x68,0x69,0x73,0x20
000f7c 6e65
000f7d 6564
000f7e 7661
000f7f 726f                      .db 0x65,0x6e,0x64,0x65,0x61,0x76,0x6f,0x72
000f80 7720
000f81 6c69
000f82 206c
000f83 696c                      .db 0x20,0x77,0x69,0x6c,0x6c,0x20,0x6c,0x69
000f84 6867
000f85 2074
000f86 756f
000f87 2072                      .db 0x67,0x68,0x74,0x20,0x6f,0x75,0x72,0x20
000f88 6f63
000f89 6e75
000f8a 7274
000f8b 2079                      .db 0x63,0x6f,0x75,0x6e,0x74,0x72,0x79,0x20
000f8c 6e61
000f8d 2064
000f8e 6c61
000f8f 206c                      .db 0x61,0x6e,0x64,0x20,0x61,0x6c,0x6c,0x20
000f90 6877
000f91 206f
000f92 6573
000f93 7672                      .db 0x77,0x68,0x6f,0x20,0x73,0x65,0x72,0x76
000f94 2065
000f95 7469
000f96 2d2d
000f97 6e61                      .db 0x65,0x20,0x69,0x74,0x2d,0x2d,0x61,0x6e
000f98 2064
000f99 6874
000f9a 2065
000f9b 6c67                      .db 0x64,0x20,0x74,0x68,0x65,0x20,0x67,0x6c
000f9c 776f
000f9d 6620
000f9e 6f72
000f9f 206d                      .db 0x6f,0x77,0x20,0x66,0x72,0x6f,0x6d,0x20
000fa0 6874
000fa1 7461
000fa2 6620
000fa3 7269                      .db 0x74,0x68,0x61,0x74,0x20,0x66,0x69,0x72
000fa4 2065
000fa5 6163
000fa6 206e
000fa7 7274                      .db 0x65,0x20,0x63,0x61,0x6e,0x20,0x74,0x72
000fa8 6c75
000fa9 2079
000faa 696c
000fab 6867                      .db 0x75,0x6c,0x79,0x20,0x6c,0x69,0x67,0x68
000fac 2074
000fad 6874
000fae 2065
000faf 6f77                      .db 0x74,0x20,0x74,0x68,0x65,0x20,0x77,0x6f
000fb0 6c72
000fb1 2e64
000fb2 0a0a
000fb3 6e41                      .db 0x72,0x6c,0x64,0x2e,0x0a,0x0a,0x41,0x6e
000fb4 2064
000fb5 6f73
000fb6 202c
000fb7 796d                      .db 0x64,0x20,0x73,0x6f,0x2c,0x20,0x6d,0x79
000fb8 6620
000fb9 6c65
000fba 6f6c
000fbb 2077                      .db 0x20,0x66,0x65,0x6c,0x6c,0x6f,0x77,0x20
000fbc 6d41
000fbd 7265
000fbe 6369
000fbf 6e61                      .db 0x41,0x6d,0x65,0x72,0x69,0x63,0x61,0x6e
000fc0 3a73
000fc1 6120
000fc2 6b73
000fc3 6e20                      .db 0x73,0x3a,0x20,0x61,0x73,0x6b,0x20,0x6e
000fc4 746f
000fc5 7720
000fc6 6168
000fc7 2074                      .db 0x6f,0x74,0x20,0x77,0x68,0x61,0x74,0x20
000fc8 6f79
000fc9 7275
000fca 6320
000fcb 756f                      .db 0x79,0x6f,0x75,0x72,0x20,0x63,0x6f,0x75
000fcc 746e
000fcd 7972
000fce 6320
000fcf 6e61                      .db 0x6e,0x74,0x72,0x79,0x20,0x63,0x61,0x6e
000fd0 6420
000fd1 206f
000fd2 6f66
000fd3 2072                      .db 0x20,0x64,0x6f,0x20,0x66,0x6f,0x72,0x20
000fd4 6f79
000fd5 2d75
000fd6 612d
000fd7 6b73                      .db 0x79,0x6f,0x75,0x2d,0x2d,0x61,0x73,0x6b
000fd8 7720
000fd9 6168
000fda 2074
000fdb 6f79                      .db 0x20,0x77,0x68,0x61,0x74,0x20,0x79,0x6f
000fdc 2075
000fdd 6163
000fde 206e
000fdf 6f64                      .db 0x75,0x20,0x63,0x61,0x6e,0x20,0x64,0x6f
000fe0 6620
000fe1 726f
000fe2 7920
000fe3 756f                      .db 0x20,0x66,0x6f,0x72,0x20,0x79,0x6f,0x75
000fe4 2072
000fe5 6f63
000fe6 6e75
000fe7 7274                      .db 0x72,0x20,0x63,0x6f,0x75,0x6e,0x74,0x72
000fe8 2e79
000fe9 0a0a
000fea 794d
000feb 6620                      .db 0x79,0x2e,0x0a,0x0a,0x4d,0x79,0x20,0x66
000fec 6c65
000fed 6f6c
000fee 2077
000fef 6963                      .db 0x65,0x6c,0x6c,0x6f,0x77,0x20,0x63,0x69
000ff0 6974
000ff1 657a
000ff2 736e
000ff3 6f20                      .db 0x74,0x69,0x7a,0x65,0x6e,0x73,0x20,0x6f
000ff4 2066
000ff5 6874
000ff6 2065
000ff7 6f77                      .db 0x66,0x20,0x74,0x68,0x65,0x20,0x77,0x6f
000ff8 6c72
000ff9 3a64
000ffa 6120
000ffb 6b73                      .db 0x72,0x6c,0x64,0x3a,0x20,0x61,0x73,0x6b
000ffc 6e20
000ffd 746f
000ffe 7720
000fff 6168                      .db 0x20,0x6e,0x6f,0x74,0x20,0x77,0x68,0x61
001000 2074
001001 6d41
001002 7265
001003 6369                      .db 0x74,0x20,0x41,0x6d,0x65,0x72,0x69,0x63
001004 2061
001005 6977
001006 6c6c
001007 6420                      .db 0x61,0x20,0x77,0x69,0x6c,0x6c,0x20,0x64
001008 206f
001009 6f66
00100a 2072
00100b 6f79                      .db 0x6f,0x20,0x66,0x6f,0x72,0x20,0x79,0x6f
00100c 2c75
00100d 6220
00100e 7475
00100f 7720                      .db 0x75,0x2c,0x20,0x62,0x75,0x74,0x20,0x77
001010 6168
001011 2074
001012 6f74
001013 6567                      .db 0x68,0x61,0x74,0x20,0x74,0x6f,0x67,0x65
001014 6874
001015 7265
001016 7720
001017 2065                      .db 0x74,0x68,0x65,0x72,0x20,0x77,0x65,0x20
001018 6163
001019 206e
00101a 6f64
00101b 6620                      .db 0x63,0x61,0x6e,0x20,0x64,0x6f,0x20,0x66
00101c 726f
00101d 7420
00101e 6568
00101f 6620                      .db 0x6f,0x72,0x20,0x74,0x68,0x65,0x20,0x66
001020 6572
001021 6465
001022 6d6f
001023 6f20                      .db 0x72,0x65,0x65,0x64,0x6f,0x6d,0x20,0x6f
001024 2066
001025 616d
001026 2e6e
001027 0a0a                      .db 0x66,0x20,0x6d,0x61,0x6e,0x2e,0x0a,0x0a
001028 6946
001029 616e
00102a 6c6c
00102b 2c79                      .db 0x46,0x69,0x6e,0x61,0x6c,0x6c,0x79,0x2c
00102c 7720
00102d 6568
00102e 6874
00102f 7265                      .db 0x20,0x77,0x68,0x65,0x74,0x68,0x65,0x72
001030 7920
001031 756f
001032 6120
001033 6572                      .db 0x20,0x79,0x6f,0x75,0x20,0x61,0x72,0x65
001034 6320
001035 7469
001036 7a69
001037 6e65                      .db 0x20,0x63,0x69,0x74,0x69,0x7a,0x65,0x6e
001038 2073
001039 666f
00103a 4120
00103b 656d                      .db 0x73,0x20,0x6f,0x66,0x20,0x41,0x6d,0x65
00103c 6972
00103d 6163
00103e 6f20
00103f 2072                      .db 0x72,0x69,0x63,0x61,0x20,0x6f,0x72,0x20
001040 6963
001041 6974
001042 657a
001043 736e                      .db 0x63,0x69,0x74,0x69,0x7a,0x65,0x6e,0x73
001044 6f20
001045 2066
001046 6874
001047 2065                      .db 0x20,0x6f,0x66,0x20,0x74,0x68,0x65,0x20
001048 6f77
001049 6c72
00104a 2c64
00104b 6120                      .db 0x77,0x6f,0x72,0x6c,0x64,0x2c,0x20,0x61
00104c 6b73
00104d 6f20
00104e 2066
00104f 7375                      .db 0x73,0x6b,0x20,0x6f,0x66,0x20,0x75,0x73
001050 7420
001051 6568
001052 7320
001053 6d61                      .db 0x20,0x74,0x68,0x65,0x20,0x73,0x61,0x6d
001054 2065
001055 6968
001056 6867
001057 7320                      .db 0x65,0x20,0x68,0x69,0x67,0x68,0x20,0x73
001058 6174
001059 646e
00105a 7261
00105b 7364                      .db 0x74,0x61,0x6e,0x64,0x61,0x72,0x64,0x73
00105c 6f20
00105d 2066
00105e 7473
00105f 6572                      .db 0x20,0x6f,0x66,0x20,0x73,0x74,0x72,0x65
001060 676e
001061 6874
001062 6120
001063 646e                      .db 0x6e,0x67,0x74,0x68,0x20,0x61,0x6e,0x64
001064 7320
001065 6361
001066 6972
001067 6966                      .db 0x20,0x73,0x61,0x63,0x72,0x69,0x66,0x69
001068 6563
001069 7720
00106a 6968
00106b 6863                      .db 0x63,0x65,0x20,0x77,0x68,0x69,0x63,0x68
00106c 7720
00106d 2065
00106e 7361
00106f 206b                      .db 0x20,0x77,0x65,0x20,0x61,0x73,0x6b,0x20
001070 666f
001071 7920
001072 756f
001073 202e                      .db 0x6f,0x66,0x20,0x79,0x6f,0x75,0x2e,0x20
001074 6957
001075 6874
001076 6120
001077 6720                      .db 0x57,0x69,0x74,0x68,0x20,0x61,0x20,0x67
001078 6f6f
001079 2064
00107a 6f63
00107b 736e                      .db 0x6f,0x6f,0x64,0x20,0x63,0x6f,0x6e,0x73
00107c 6963
00107d 6e65
00107e 6563
00107f 6f20                      .db 0x63,0x69,0x65,0x6e,0x63,0x65,0x20,0x6f
001080 7275
001081 6f20
001082 6c6e
001083 2079                      .db 0x75,0x72,0x20,0x6f,0x6e,0x6c,0x79,0x20
001084 7573
001085 6572
001086 7220
001087 7765                      .db 0x73,0x75,0x72,0x65,0x20,0x72,0x65,0x77
001088 7261
001089 2c64
00108a 7720
00108b 7469                      .db 0x61,0x72,0x64,0x2c,0x20,0x77,0x69,0x74
00108c 2068
00108d 6968
00108e 7473
00108f 726f                      .db 0x68,0x20,0x68,0x69,0x73,0x74,0x6f,0x72
001090 2079
001091 6874
001092 2065
001093 6966                      .db 0x79,0x20,0x74,0x68,0x65,0x20,0x66,0x69
001094 616e
001095 206c
001096 756a
001097 6764                      .db 0x6e,0x61,0x6c,0x20,0x6a,0x75,0x64,0x67
001098 2065
001099 666f
00109a 6f20
00109b 7275                      .db 0x65,0x20,0x6f,0x66,0x20,0x6f,0x75,0x72
00109c 6420
00109d 6565
00109e 7364
00109f 202c                      .db 0x20,0x64,0x65,0x65,0x64,0x73,0x2c,0x20
0010a0 656c
0010a1 2074
0010a2 7375
0010a3 6720                      .db 0x6c,0x65,0x74,0x20,0x75,0x73,0x20,0x67
0010a4 206f
0010a5 6f66
0010a6 7472
0010a7 2068                      .db 0x6f,0x20,0x66,0x6f,0x72,0x74,0x68,0x20
0010a8 6f74
0010a9 6c20
0010aa 6165
0010ab 2064                      .db 0x74,0x6f,0x20,0x6c,0x65,0x61,0x64,0x20
0010ac 6874
0010ad 2065
0010ae 616c
0010af 646e                      .db 0x74,0x68,0x65,0x20,0x6c,0x61,0x6e,0x64
0010b0 7720
0010b1 2065
0010b2 6f6c
0010b3 6576                      .db 0x20,0x77,0x65,0x20,0x6c,0x6f,0x76,0x65
0010b4 202c
0010b5 7361
0010b6 696b
0010b7 676e                      .db 0x2c,0x20,0x61,0x73,0x6b,0x69,0x6e,0x67
0010b8 4820
0010b9 7369
0010ba 6220
0010bb 656c                      .db 0x20,0x48,0x69,0x73,0x20,0x62,0x6c,0x65
0010bc 7373
0010bd 6e69
0010be 2067
0010bf 6e61                      .db 0x73,0x73,0x69,0x6e,0x67,0x20,0x61,0x6e
0010c0 2064
0010c1 6948
0010c2 2073
0010c3 6568                      .db 0x64,0x20,0x48,0x69,0x73,0x20,0x68,0x65
0010c4 706c
0010c5 202c
0010c6 7562
0010c7 2074                      .db 0x6c,0x70,0x2c,0x20,0x62,0x75,0x74,0x20
0010c8 6e6b
0010c9 776f
0010ca 6e69
0010cb 2067                      .db 0x6b,0x6e,0x6f,0x77,0x69,0x6e,0x67,0x20
0010cc 6874
0010cd 7461
0010ce 6820
0010cf 7265                      .db 0x74,0x68,0x61,0x74,0x20,0x68,0x65,0x72
0010d0 2065
0010d1 6e6f
0010d2 6520
0010d3 7261                      .db 0x65,0x20,0x6f,0x6e,0x20,0x65,0x61,0x72
0010d4 6874
0010d5 4720
0010d6 646f
0010d7 7327                      .db 0x74,0x68,0x20,0x47,0x6f,0x64,0x27,0x73
0010d8 7720
0010d9 726f
0010da 206b
0010db 756d                      .db 0x20,0x77,0x6f,0x72,0x6b,0x20,0x6d,0x75
0010dc 7473
0010dd 7420
0010de 7572
0010df 796c                      .db 0x73,0x74,0x20,0x74,0x72,0x75,0x6c,0x79
0010e0 6220
0010e1 2065
0010e2 756f
0010e3 2072                      .db 0x20,0x62,0x65,0x20,0x6f,0x75,0x72,0x20
0010e4 776f
0010e5 2e6e                      END_SRAM_TABLE:
                                 
                                 .equ SIZE = (END_SRAM_TABLE - START_SRAM_TABLE)*2
                                 
                                 ; data memory allocation (if necessary)
                                 .dseg
                                 ;***********END OF MEMORY CONFIGURATION***************
                                 
                                 ;***********MAIN PROGRAM*******************************
                                 .cseg
                                 .org 0x0
000000 c0ff                      	rjmp MAIN
                                 ; interrupt vectors
                                 
                                 .org 0x100
                                 MAIN:
                                 ; initialize MCU components like the stack
000100 ef0f                      	ldi r16, 0xFF
000101 9300 003d                 	sts CPU_SPL, r16
000103 e30f                      	ldi r16, 0X3F
000104 9300 003e                 	sts CPU_SPH, r16
                                 
                                 ; initialize EBI
000106 d032                      	rcall EBI_INIT
                                 
                                 ; initialize timer counter
                                 ; Period*(Frequency/Prescalar)= counter value
                                 ; Counter value is approximately 9,375 aka 0x249F
                                 ; Most precise counter value was around 0x2550
                                 ; load lower byte
000107 e500                      	ldi r16, 0x50
000108 9300 0826                 	sts TCC0_PER, r16
                                 ; load higher byte
00010a e205                      	ldi r16, 0x25
00010b 9300 0827                 	sts TCC0_PER+1, r16
                                 
                                 ; load Z with the address of the start of the table
00010d e0e0                      	ldi ZL, low(START_SRAM_TABLE << 1)
00010e e0f4                      	ldi ZH, high(START_SRAM_TABLE << 1)
                                 
                                 ; load Y with the external SRAM address
00010f e0c0                      	ldi YL, low(SRAM_START_ADDR)
000110 e8d0                      	ldi YH, high(SRAM_START_ADDR)
000111 e102                      	ldi r16, byte3(SRAM_START_ADDR)
000112 9300 003a                 	sts CPU_RAMPY, r16
                                 
                                 ; load X with IO port address
000114 e0a0                      	ldi XL, low(IO_START_ADDR)
000115 e4b0                      	ldi XH, high(IO_START_ADDR)
000116 e202                      	ldi r16, byte3(IO_START_ADDR)
000117 9300 0039                 	sts CPU_RAMPX, r16
                                 
                                 WRITE:
                                 ; load byte from SRAM table
000119 9105                      	lpm r16, Z+ ; has to be Z!
                                 ; store into external SRAM
00011a 9309                      	st Y+, r16
                                 
                                 ; check if at end of SRAM table
00011b 3ee6                      	cpi ZL, low(END_SRAM_TABLE)
00011c f7e1                      	brne WRITE
                                 
00011d 31f0                      	cpi ZH, high(END_SRAM_TABLE)
00011e f7d1                      	brne WRITE
                                 
                                 ; set Y back to the first external SRAM address
00011f e0c0                      	ldi YL, low(SRAM_START_ADDR)
000120 e8d0                      	ldi YH, high(SRAM_START_ADDR)
000121 e102                      	ldi r16, byte3(SRAM_START_ADDR)
000122 9300 003a                 	sts CPU_RAMPY, r16
                                 
                                 ; start timer
000124 e005                      	ldi r16, TC_CLKSEL_DIV64_gc
000125 9300 0800                 	sts TCC0_CTRLA, r16
                                 
                                 READ_BACK:
                                 ; If overflow flag is not raised jump back to READ_BACK
000127 9100 080c                 	lds r16, TCC0_INTFLAGS
000129 ff00                      	sbrs r16, TC0_OVFIF_bp
00012a cffc                      	rjmp READ_BACK
                                 
                                 ; If overflow flag is raised clear flag
00012b e001                      	ldi r16, TC0_OVFIF_bm
00012c 9300 080c                 	sts TCC0_INTFLAGS, r16
                                 ; load from external SRAM
00012e 9109                      	ld r16, Y+
                                 
                                 ; output to external LEDs
00012f 930c                      	st X, r16
                                 
                                 ; check if at end of external SRAM
000130 3ccc                      	cpi YL, low(END_EXTERNAL_SRAM)
000131 f7a9                      	brne READ_BACK
                                 
000132 39dd                      	cpi YH, high(END_EXTERNAL_SRAM)
000133 f799                      	brne READ_BACK
                                 
000134 9100 003a                 	lds r16, CPU_RAMPY
000136 3142                      	cpi r20, byte3(END_EXTERNAL_SRAM)
000137 f779                      	brne READ_BACK
                                 
                                 END:
000138 cfff                      	rjmp END
                                 ;***********END OF MAIN PROGRAM **********************
                                 
                                 /************************************************************************************
                                 * Name: EBI_INIT
                                 * Purpose: Subroutine to initialize the EBI system for hardware expansion
                                 * Inputs: None
                                 * Outputs: None
                                 * Affected: None
                                 ***********************************************************************************/
                                 EBI_INIT:
                                 ; Symbols for start of relevant memory address ranges
                                 .equ SRAM_START_ADDR = 0x128000
                                 .equ IO_START_ADDR = 0x224000
                                 .equ END_EXTERNAL_SRAM = SRAM_START_ADDR + SIZE
                                 
                                 ; preserve the relevant registers
000139 930f                      	push r16
                                 
                                 ; push status register onto the stack
00013a 9100 003f                 	lds r16, CPU_SREG
00013c 930f                      	push r16
                                 
                                 ; initialize the relevant EBI control signals to be in a false state
00013d e503                      	ldi r16, 0b01010011
00013e 9300 06e5                 	sts PORTH_OUTSET, r16
000140 e004                      	ldi r16, 0b00000100
000141 9300 06e6                 	sts PORTH_OUTCLR, r16
                                 
                                 ; initialize the EBI control signals to be output from the microcontroller
000143 e507                      	ldi r16, 0b01010111
000144 9300 06e1                 	sts PORTH_DIRSET, r16
                                 
                                 ; initialize the address signals to be output from the microcontroller
000146 ef0f                      	ldi r16, 0xFF
000147 9300 0721                 	sts PORTK_DIRSET, r16
                                 
                                 ; initialize the EBI system for SRAM 3-PORT ALE1 mode
000149 e001                      	ldi r16, 0b00000001
00014a 9300 0440                 	sts EBI_CTRL, r16
                                 
                                 ; initialize the relevant chip selects
                                 ; configure CS0
00014c e10d                      	ldi r16, 0b00011101
00014d 9300 0450                 	sts EBI_CS0_CTRLA, r16
00014f e800                      	ldi r16, byte2(SRAM_START_ADDR)
000150 9300 0452                 	sts EBI_CS0_BASEADDR, r16
000152 e102                      	ldi r16, byte3(SRAM_START_ADDR)
000153 9300 0453                 	sts EBI_CS0_BASEADDR+1, r16
                                 
                                 ; configure CS2
000155 e001                      	ldi r16, 0b00000001
000156 9300 0458                 	sts EBI_CS2_CTRLA, r16
000158 e400                      	ldi r16, byte2(IO_START_ADDR)
000159 9300 045a                 	sts EBI_CS2_BASEADDR, r16
00015b e202                      	ldi r16, byte3(IO_START_ADDR)
00015c 9300 045b                 	sts EBI_CS2_BASEADDR+1, r16
                                 
                                 ; pop status register off the stack
00015e 910f                      	pop r16
00015f 9300 003f                 	sts CPU_SREG, r16
                                 
                                 ; recover the relevant register
000161 910f                      	pop r16
                                 
                                 ; return 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATxmega128A1U" register use summary:
x  :   1 y  :   2 z  :   1 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  53 r17:   0 r18:   0 r19:   0 r20:   1 
r21:   0 r22:   0 r23:   0 r24:   0 r25:   0 r26:   1 r27:   1 r28:   3 
r29:   3 r30:   2 r31:   2 
Registers used: 11 out of 35 (31.4%)

"ATxmega128A1U" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   5 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   5 cpse  :   0 dec   :   0 des   :   0 eicall:   0 eijmp :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   0 inc   :   0 jmp   :   0 lac   :   0 las   :   0 
lat   :   0 ld    :   1 ldd   :   0 ldi   :  28 lds   :   3 lpm   :   1 
lsl   :   0 lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   0 
pop   :   2 push  :   2 rcall :   1 ret   :   1 reti  :   0 rjmp  :   3 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   1 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 
sts   :  21 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
xch   :   0 
Instructions used: 14 out of 121 (11.6%)

"ATxmega128A1U" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0021cc    200   7628   7828  139264   5.6%
[.dseg] 0x002000 0x002000      0      0      0    8192   0.0%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 0 warnings
