
Lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00802000  00802000  00000580  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005282  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cba  00000000  00000000  000058c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000670  00000000  00000000  0000957c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00009bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000043fa  00000000  00000000  00009d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  0000e116  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000e376  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_71>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_88>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a6 30       	cpi	r26, 0x06	; 6
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 18 01 	call	0x230	; 0x230 <main>
 228:	0c 94 84 02 	jmp	0x508	; 0x508 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <main>:
void adc_init(void);
void tcc0_init(void);
void usartd0_init(void);

int main(void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <main+0x6>
 236:	1f 92       	push	r1
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
	// variables to transmit low and high bytes
	uint8_t photo_low, photo_high, j3_low, j3_high = 0;
 23c:	19 82       	std	Y+1, r1	; 0x01
	// initialize adc
	adc_init();
 23e:	0e 94 00 02 	call	0x400	; 0x400 <adc_init>
	// initialize the timer counter
	tcc0_init();
 242:	0e 94 35 02 	call	0x46a	; 0x46a <tcc0_init>
	// initialize usart
	usartd0_init();
 246:	0e 94 4e 02 	call	0x49c	; 0x49c <usartd0_init>
	
    while (1)
	{
		if(conversion_flag)
 24a:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <conversion_flag>
 24e:	88 23       	and	r24, r24
 250:	e1 f3       	breq	.-8      	; 0x24a <main+0x1a>
		{
			conversion_flag = 0;
 252:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <conversion_flag>
			if(letter_flag)
 256:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <letter_flag>
 25a:	88 23       	and	r24, r24
 25c:	a1 f0       	breq	.+40     	; 0x286 <main+0x56>
			{
				// convert data into low and high bytes
				j3_low = (uint8_t) j3_val;
 25e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <j3_val>
 262:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <j3_val+0x1>
 266:	8a 83       	std	Y+2, r24	; 0x02
				j3_high = (uint8_t) (j3_val >> 8);
 268:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <j3_val>
 26c:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <j3_val+0x1>
 270:	89 2f       	mov	r24, r25
 272:	99 0f       	add	r25, r25
 274:	99 0b       	sbc	r25, r25
 276:	89 83       	std	Y+1, r24	; 0x01
				// output the low and high bytes
				usartd0_out_char(j3_low);
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <usartd0_out_char>
				usartd0_out_char(j3_high);
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	0e 94 e5 01 	call	0x3ca	; 0x3ca <usartd0_out_char>
 284:	e2 cf       	rjmp	.-60     	; 0x24a <main+0x1a>
				
			}
			else
			{
				// convert data into low and high bytes
				photo_low = (uint8_t) photo_val;
 286:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 28a:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 28e:	8b 83       	std	Y+3, r24	; 0x03
				photo_high = (uint8_t) (photo_val >> 8);
 290:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 294:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 298:	89 2f       	mov	r24, r25
 29a:	99 0f       	add	r25, r25
 29c:	99 0b       	sbc	r25, r25
 29e:	8c 83       	std	Y+4, r24	; 0x04
				// output the low and high bytes
				usartd0_out_char(photo_low);
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <usartd0_out_char>
				usartd0_out_char(photo_high);
 2a6:	8c 81       	ldd	r24, Y+4	; 0x04
 2a8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <usartd0_out_char>
				
			}
		}
	}
 2ac:	ce cf       	rjmp	.-100    	; 0x24a <main+0x1a>

000002ae <__vector_71>:
* Purpose: Copy the data from the photoresistor and j3 when the counter overflows
* Inputs: None
* Outputs: None
***********************************************************************************/
ISR(ADCA_CH0_vect)
{ 
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 2be:	0f 92       	push	r0
 2c0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 2c4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 2c8:	0f 92       	push	r0
 2ca:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 2ce:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 2d2:	0f 92       	push	r0
 2d4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
	// update the conversion flag
	conversion_flag = 1;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <conversion_flag>
	// copy the data from the photoresistor
	photo_val = ADCA.CH0RES;
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	92 e0       	ldi	r25, 0x02	; 2
 2f2:	fc 01       	movw	r30, r24
 2f4:	80 89       	ldd	r24, Z+16	; 0x10
 2f6:	91 89       	ldd	r25, Z+17	; 0x11
 2f8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
 2fc:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
	// copy the value from j3
	j3_val = ADCA.CH1RES;
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	92 e0       	ldi	r25, 0x02	; 2
 304:	fc 01       	movw	r30, r24
 306:	82 89       	ldd	r24, Z+18	; 0x12
 308:	93 89       	ldd	r25, Z+19	; 0x13
 30a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <j3_val>
 30e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <j3_val+0x1>
}
 312:	00 00       	nop
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	0f 90       	pop	r0
 322:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 326:	0f 90       	pop	r0
 328:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 32c:	0f 90       	pop	r0
 32e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 332:	0f 90       	pop	r0
 334:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_88>:
* Purpose: Read character from the usart and then set the letter flag. L = 0 and F = 1
* Inputs: None
* Outputs: None
***********************************************************************************/
ISR(USARTD0_RXC_vect)
{
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 34e:	0f 92       	push	r0
 350:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 354:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 358:	0f 92       	push	r0
 35a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 35e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 362:	0f 92       	push	r0
 364:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
 36c:	ef 93       	push	r30
 36e:	ff 93       	push	r31
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	1f 92       	push	r1
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
	// read the value from usart
	char input = USARTD0_DATA;
 37a:	80 ea       	ldi	r24, 0xA0	; 160
 37c:	99 e0       	ldi	r25, 0x09	; 9
 37e:	fc 01       	movw	r30, r24
 380:	80 81       	ld	r24, Z
 382:	89 83       	std	Y+1, r24	; 0x01
	// set the letter flag based off of inputted letter
	if(input == 'L')
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	8c 34       	cpi	r24, 0x4C	; 76
 388:	19 f4       	brne	.+6      	; 0x390 <__vector_88+0x52>
	{
		letter_flag = 0;
 38a:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <letter_flag>
	}
	else if(input == 'F')
	{
		letter_flag = 1;
	}
}
 38e:	06 c0       	rjmp	.+12     	; 0x39c <__vector_88+0x5e>
	// set the letter flag based off of inputted letter
	if(input == 'L')
	{
		letter_flag = 0;
	}
	else if(input == 'F')
 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	86 34       	cpi	r24, 0x46	; 70
 394:	19 f4       	brne	.+6      	; 0x39c <__vector_88+0x5e>
	{
		letter_flag = 1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <letter_flag>
	}
}
 39c:	00 00       	nop
 39e:	0f 90       	pop	r0
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	ff 91       	pop	r31
 3a6:	ef 91       	pop	r30
 3a8:	9f 91       	pop	r25
 3aa:	8f 91       	pop	r24
 3ac:	0f 90       	pop	r0
 3ae:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 3b2:	0f 90       	pop	r0
 3b4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 3b8:	0f 90       	pop	r0
 3ba:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 3be:	0f 90       	pop	r0
 3c0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <usartd0_out_char>:
* Purpose: Output a character over the usart to the putty.
* Inputs: char c the character you are trying to output
* Outputs: Outputs the character on the putty
***********************************************************************************/
void usartd0_out_char(char c)
{
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	1f 92       	push	r1
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
 3d4:	89 83       	std	Y+1, r24	; 0x01
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 3d6:	00 00       	nop
 3d8:	80 ea       	ldi	r24, 0xA0	; 160
 3da:	99 e0       	ldi	r25, 0x09	; 9
 3dc:	fc 01       	movw	r30, r24
 3de:	81 81       	ldd	r24, Z+1	; 0x01
 3e0:	88 2f       	mov	r24, r24
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	80 72       	andi	r24, 0x20	; 32
 3e6:	99 27       	eor	r25, r25
 3e8:	89 2b       	or	r24, r25
 3ea:	b1 f3       	breq	.-20     	; 0x3d8 <usartd0_out_char+0xe>
	USARTD0.DATA = c;
 3ec:	80 ea       	ldi	r24, 0xA0	; 160
 3ee:	99 e0       	ldi	r25, 0x09	; 9
 3f0:	29 81       	ldd	r18, Y+1	; 0x01
 3f2:	fc 01       	movw	r30, r24
 3f4:	20 83       	st	Z, r18
}
 3f6:	00 00       	nop
 3f8:	0f 90       	pop	r0
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <adc_init>:
* Initialize event system so the event channel 0 triggers the ADC conversion.
* Inputs: None
* Outputs: None
***********************************************************************************/
void adc_init(void)
{
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
	// set to signed mode
	ADCA.CTRLB = ADC_CONMODE_bm;	
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	92 e0       	ldi	r25, 0x02	; 2
 40c:	20 e1       	ldi	r18, 0x10	; 16
 40e:	fc 01       	movw	r30, r24
 410:	21 83       	std	Z+1, r18	; 0x01
	
	// set voltage reference to be 2.5v from port b references
	ADCA.REFCTRL = ADC_REFSEL_AREFB_gc; 
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	92 e0       	ldi	r25, 0x02	; 2
 416:	20 e3       	ldi	r18, 0x30	; 48
 418:	fc 01       	movw	r30, r24
 41a:	22 83       	std	Z+2, r18	; 0x02
	
	// set the input source for channel 0
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc | ADC_CH_MUXNEG_PIN6_gc;
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	92 e0       	ldi	r25, 0x02	; 2
 420:	2a e0       	ldi	r18, 0x0A	; 10
 422:	fc 01       	movw	r30, r24
 424:	21 a3       	std	Z+33, r18	; 0x21
	
	// set the input mode for channel 0
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc;
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	92 e0       	ldi	r25, 0x02	; 2
 42a:	23 e0       	ldi	r18, 0x03	; 3
 42c:	fc 01       	movw	r30, r24
 42e:	20 a3       	std	Z+32, r18	; 0x20
	
	// enable ADC interrupt when conversion is complete
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_MED_gc;
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	92 e0       	ldi	r25, 0x02	; 2
 434:	22 e0       	ldi	r18, 0x02	; 2
 436:	fc 01       	movw	r30, r24
 438:	22 a3       	std	Z+34, r18	; 0x22
	
	// set the input source for channel 1
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_PIN4_gc;
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	92 e0       	ldi	r25, 0x02	; 2
 43e:	28 e2       	ldi	r18, 0x28	; 40
 440:	fc 01       	movw	r30, r24
 442:	21 a7       	std	Z+41, r18	; 0x29
	
	// set the input mode for channel 1
	ADCA.CH1.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc;
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	92 e0       	ldi	r25, 0x02	; 2
 448:	23 e0       	ldi	r18, 0x03	; 3
 44a:	fc 01       	movw	r30, r24
 44c:	20 a7       	std	Z+40, r18	; 0x28
	
	// initialize event system so the event channel 0 and 1 triggers the ADC conversion
	//ADCA.EVCTRL = ADC_EVSEL_0123_gc | ADC_SWEEP_01_gc | ADC_EVACT_CH01_gc; 
	ADCA.EVCTRL = ADC_EVSEL_0123_gc | ADC_SWEEP_01_gc | ADC_EVACT_SWEEP_gc; 
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	92 e0       	ldi	r25, 0x02	; 2
 452:	25 e4       	ldi	r18, 0x45	; 69
 454:	fc 01       	movw	r30, r24
 456:	23 83       	std	Z+3, r18	; 0x03
	
	// enable the adc (last)
	ADCA.CTRLA = ADC_ENABLE_bm;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	92 e0       	ldi	r25, 0x02	; 2
 45c:	21 e0       	ldi	r18, 0x01	; 1
 45e:	fc 01       	movw	r30, r24
 460:	20 83       	st	Z, r18
}
 462:	00 00       	nop
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <tcc0_init>:
* overflow trigger the event channel 0.
* Inputs: None
* Outputs: None
***********************************************************************************/
void tcc0_init(void)
{
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
	// initialize the timer counter 
	TCC0.PER = 14599;
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	98 e0       	ldi	r25, 0x08	; 8
 476:	27 e0       	ldi	r18, 0x07	; 7
 478:	39 e3       	ldi	r19, 0x39	; 57
 47a:	fc 01       	movw	r30, r24
 47c:	26 a3       	std	Z+38, r18	; 0x26
 47e:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	98 e0       	ldi	r25, 0x08	; 8
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	fc 01       	movw	r30, r24
 488:	20 83       	st	Z, r18
	
	// trigger event channel when counter overflows
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 48a:	80 e8       	ldi	r24, 0x80	; 128
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	20 ec       	ldi	r18, 0xC0	; 192
 490:	fc 01       	movw	r30, r24
 492:	20 83       	st	Z, r18
}
 494:	00 00       	nop
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <usartd0_init>:
* odd parity, and one stop bit.
* Inputs: None
* Outputs: None
***********************************************************************************/
void usartd0_init(void)
{
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
/* BSEL and BSCALE to get 116500 baud rate */
#define BSEL (1)
#define BSCALE (-4)
 /* Configure relevant TxD and RxD pins. */
	PORTD.OUTSET = PIN3_bm;
 4a4:	80 e6       	ldi	r24, 0x60	; 96
 4a6:	96 e0       	ldi	r25, 0x06	; 6
 4a8:	28 e0       	ldi	r18, 0x08	; 8
 4aa:	fc 01       	movw	r30, r24
 4ac:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 4ae:	80 e6       	ldi	r24, 0x60	; 96
 4b0:	96 e0       	ldi	r25, 0x06	; 6
 4b2:	28 e0       	ldi	r18, 0x08	; 8
 4b4:	fc 01       	movw	r30, r24
 4b6:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 4b8:	80 e6       	ldi	r24, 0x60	; 96
 4ba:	96 e0       	ldi	r25, 0x06	; 6
 4bc:	24 e0       	ldi	r18, 0x04	; 4
 4be:	fc 01       	movw	r30, r24
 4c0:	22 83       	std	Z+2, r18	; 0x02
 /* Configure baud rate. */
	USARTD0.BAUDCTRLA = (uint8_t) BSEL;
 4c2:	80 ea       	ldi	r24, 0xA0	; 160
 4c4:	99 e0       	ldi	r25, 0x09	; 9
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	fc 01       	movw	r30, r24
 4ca:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((BSCALE << 4)|(BSEL >> 8));
 4cc:	80 ea       	ldi	r24, 0xA0	; 160
 4ce:	99 e0       	ldi	r25, 0x09	; 9
 4d0:	20 ec       	ldi	r18, 0xC0	; 192
 4d2:	fc 01       	movw	r30, r24
 4d4:	27 83       	std	Z+7, r18	; 0x07
 /* Configure remainder of serial protocol. */
 /* (In this example, a protocol with 8 data bits, odd parity, and
 * one stop bit is chosen.) */
	USARTD0.CTRLC = (USART_CMODE_ASYNCHRONOUS_gc |
 4d6:	80 ea       	ldi	r24, 0xA0	; 160
 4d8:	99 e0       	ldi	r25, 0x09	; 9
 4da:	23 e3       	ldi	r18, 0x33	; 51
 4dc:	fc 01       	movw	r30, r24
 4de:	25 83       	std	Z+5, r18	; 0x05
	USART_PMODE_ODD_gc |
	USART_CHSIZE_8BIT_gc) &
	~USART_SBMODE_bm;
 /* Enable receiver and/or transmitter systems. */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 4e0:	80 ea       	ldi	r24, 0xA0	; 160
 4e2:	99 e0       	ldi	r25, 0x09	; 9
 4e4:	28 e1       	ldi	r18, 0x18	; 24
 4e6:	fc 01       	movw	r30, r24
 4e8:	24 83       	std	Z+4, r18	; 0x04
 /* Set as high level interrupt. */
    USARTD0.CTRLA = USART_RXCINTLVL_HI_gc;
 4ea:	80 ea       	ldi	r24, 0xA0	; 160
 4ec:	99 e0       	ldi	r25, 0x09	; 9
 4ee:	20 e3       	ldi	r18, 0x30	; 48
 4f0:	fc 01       	movw	r30, r24
 4f2:	23 83       	std	Z+3, r18	; 0x03
// enable medium and high level interrupts
	PMIC.CTRL = PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 4f4:	80 ea       	ldi	r24, 0xA0	; 160
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	26 e0       	ldi	r18, 0x06	; 6
 4fa:	fc 01       	movw	r30, r24
 4fc:	22 83       	std	Z+2, r18	; 0x02
// enable global interrupts
	sei();
 4fe:	78 94       	sei
}
 500:	00 00       	nop
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret

00000508 <_exit>:
 508:	f8 94       	cli

0000050a <__stop_program>:
 50a:	ff cf       	rjmp	.-2      	; 0x50a <__stop_program>
