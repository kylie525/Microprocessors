
HW3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00802000  000002f2  00000366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003f45  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003ba5  00000000  00000000  0000434d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004bb  00000000  00000000  00007ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000083b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002aca  00000000  00000000  000083e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  0000aeae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000aef5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e2 ef       	ldi	r30, 0xF2	; 242
 21c:	f2 e0       	ldi	r31, 0x02	; 2
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 31       	cpi	r26, 0x10	; 16
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
 234:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <main>:
				a subset of filtered values into an output table.
;************************************************************************/

#define TABSIZE 16
#include <avr/io.h>
int main(void){
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	65 97       	sbiw	r28, 0x15	; 21
 246:	cd bf       	out	0x3d, r28	; 61
 248:	de bf       	out	0x3e, r29	; 62
	// create an array of 8-bit value with a size of 16; replace ?? with the values in Table 1, separated by commas
	uint8_t IN_TAB [TABSIZE] = { 201, 0x22, 051, 91, 0x91, 0x2A, 'U', 0130, '#', 0b01010101, 'J', 0x21, 0x55, 32, 0b00011110, 0 };
 24a:	80 e1       	ldi	r24, 0x10	; 16
 24c:	e0 e0       	ldi	r30, 0x00	; 0
 24e:	f0 e2       	ldi	r31, 0x20	; 32
 250:	de 01       	movw	r26, r28
 252:	16 96       	adiw	r26, 0x06	; 6
 254:	01 90       	ld	r0, Z+
 256:	0d 92       	st	X+, r0
 258:	8a 95       	dec	r24
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x18>
	uint8_t *IN_TAB_P = &IN_TAB; // create a pointer to this table
 25c:	ce 01       	movw	r24, r28
 25e:	06 96       	adiw	r24, 0x06	; 6
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	9a 83       	std	Y+2, r25	; 0x02
	// 	pointers which point to the first element of the array.
	// Thus, using both *IN_TAB_P = &IN_TAB;   or   *IN_TAB_P = IN_TAB; will produce the same
	// 	functionality since IN_TAB  is an address; however, to remain consistent we will use the  ampersand.

	// Initialize a pointer to point to the output table at location 0x3700. Call it OUT_TAB_P
	uint8_t *OUT_TAB_P = 0x3700;
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	97 e3       	ldi	r25, 0x37	; 55
 268:	8b 83       	std	Y+3, r24	; 0x03
 26a:	9c 83       	std	Y+4, r25	; 0x04

	//To start the processing, we can use the following template:
	while(1){
		// Loop till null, i.e., loop while the values at that address are non-zero (not null)
		while(*IN_TAB_P){
 26c:	32 c0       	rjmp	.+100    	; 0x2d2 <main+0x96>
			// Check for the conditions
			// Recall when using an *, we are analyzing the value at that pointer
			// Dereference IN_TAB_P and check if bit 5 is set (See the Example 2).
			//if bit 5 was set, then multiply by 2
			uint8_t num = *IN_TAB_P;
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	9a 81       	ldd	r25, Y+2	; 0x02
 272:	fc 01       	movw	r30, r24
 274:	80 81       	ld	r24, Z
 276:	8d 83       	std	Y+5, r24	; 0x05
			if( num & 0b00100000 ){
 278:	8d 81       	ldd	r24, Y+5	; 0x05
 27a:	88 2f       	mov	r24, r24
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	80 72       	andi	r24, 0x20	; 32
 280:	99 27       	eor	r25, r25
 282:	89 2b       	or	r24, r25
 284:	89 f0       	breq	.+34     	; 0x2a8 <main+0x6c>
				// check if the value at IN_TAB_P times two is greater than or equal to 70
				num *= 2;
 286:	8d 81       	ldd	r24, Y+5	; 0x05
 288:	88 0f       	add	r24, r24
 28a:	8d 83       	std	Y+5, r24	; 0x05
				if( num >=70 ) {
 28c:	8d 81       	ldd	r24, Y+5	; 0x05
 28e:	86 34       	cpi	r24, 0x46	; 70
 290:	d8 f0       	brcs	.+54     	; 0x2c8 <main+0x8c>
					/*Store the result to address pointed by OUT_TAB_P */
					// remember to alter the data at an address using a pointer, then you must use an (*). (See Example 1)
					*OUT_TAB_P = num;
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	9c 81       	ldd	r25, Y+4	; 0x04
 296:	2d 81       	ldd	r18, Y+5	; 0x05
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
					/*Increment OUT_TAB_P to move to next available space */
					OUT_TAB_P++;
 29c:	8b 81       	ldd	r24, Y+3	; 0x03
 29e:	9c 81       	ldd	r25, Y+4	; 0x04
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	8b 83       	std	Y+3, r24	; 0x03
 2a4:	9c 83       	std	Y+4, r25	; 0x04
 2a6:	10 c0       	rjmp	.+32     	; 0x2c8 <main+0x8c>
				}
			}
			else{
				// if the input value (dereference IN_TAB_P) +3 is less than 78 store in the output table
				num += 3;
 2a8:	8d 81       	ldd	r24, Y+5	; 0x05
 2aa:	8d 5f       	subi	r24, 0xFD	; 253
 2ac:	8d 83       	std	Y+5, r24	; 0x05
				if( num < 78 ){
 2ae:	8d 81       	ldd	r24, Y+5	; 0x05
 2b0:	8e 34       	cpi	r24, 0x4E	; 78
 2b2:	50 f4       	brcc	.+20     	; 0x2c8 <main+0x8c>
					/*Store the result to address pointed by OUT_TAB_P */
					*OUT_TAB_P = num;
 2b4:	8b 81       	ldd	r24, Y+3	; 0x03
 2b6:	9c 81       	ldd	r25, Y+4	; 0x04
 2b8:	2d 81       	ldd	r18, Y+5	; 0x05
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
					/*Increment OUT_TAB_P to move to available space */
					OUT_TAB_P++;
 2be:	8b 81       	ldd	r24, Y+3	; 0x03
 2c0:	9c 81       	ldd	r25, Y+4	; 0x04
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	8b 83       	std	Y+3, r24	; 0x03
 2c6:	9c 83       	std	Y+4, r25	; 0x04
				}
			}
			IN_TAB_P+=1;  // increment IN_TAB_P, the next address in IN_TAB
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	9a 81       	ldd	r25, Y+2	; 0x02
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	89 83       	std	Y+1, r24	; 0x01
 2d0:	9a 83       	std	Y+2, r25	; 0x02
	uint8_t *OUT_TAB_P = 0x3700;

	//To start the processing, we can use the following template:
	while(1){
		// Loop till null, i.e., loop while the values at that address are non-zero (not null)
		while(*IN_TAB_P){
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	9a 81       	ldd	r25, Y+2	; 0x02
 2d6:	fc 01       	movw	r30, r24
 2d8:	80 81       	ld	r24, Z
 2da:	88 23       	and	r24, r24
 2dc:	41 f6       	brne	.-112    	; 0x26e <main+0x32>
					OUT_TAB_P++;
				}
			}
			IN_TAB_P+=1;  // increment IN_TAB_P, the next address in IN_TAB
		}
		return 0;
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
	}
 2e2:	65 96       	adiw	r28, 0x15	; 21
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
