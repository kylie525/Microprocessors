
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000552  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000005c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802000  00802000  000005c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f6c  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f27  00000000  00000000  0000568c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af7  00000000  00000000  000095b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  0000a0ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003471  00000000  00000000  0000a338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ae  00000000  00000000  0000d7a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000dc57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_2>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a1 30       	cpi	r26, 0x01	; 1
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 18 01 	call	0x230	; 0x230 <main>
 228:	0c 94 a7 02 	jmp	0x54e	; 0x54e <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <main>:

// global variable
volatile uint8_t gyro_flag = 0;

int main(void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
	// initialize usart
	usartd0_init();
 238:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <usartd0_init>
	
	// initialize spi
	spi_init();
 23c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <spi_init>
	
	// initialize lsm
	LSM_gyro_init();
 240:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LSM_gyro_init>
	
	while(1)
	{
		if(gyro_flag == 1)
 244:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x14>
		{
			// reset flag
			gyro_flag = 0;
 24c:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
			
			//transmit data
			usart_send_gyro();
 250:	0e 94 2a 02 	call	0x454	; 0x454 <usart_send_gyro>
			
			//enable medium level interrupts
			PORTC_INTCTRL = 2;
 254:	89 e4       	ldi	r24, 0x49	; 73
 256:	96 e0       	ldi	r25, 0x06	; 6
 258:	22 e0       	ldi	r18, 0x02	; 2
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
		}
		
	}
 25e:	f2 cf       	rjmp	.-28     	; 0x244 <main+0x14>

00000260 <__vector_2>:
* Purpose: Interrupt service routine for interrupt flag that shows when gyroscope data is ready 
* Inputs: None
* Outputs: Sets gyro_flag to 1
***********************************************************************************/
ISR(PORTC_INT0_vect)
{
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 270:	0f 92       	push	r0
 272:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 276:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 27a:	0f 92       	push	r0
 27c:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 280:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 284:	0f 92       	push	r0
 286:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
	// disable medium level interrupts
	PORTC_INTCTRL = 0;
 29a:	89 e4       	ldi	r24, 0x49	; 73
 29c:	96 e0       	ldi	r25, 0x06	; 6
 29e:	fc 01       	movw	r30, r24
 2a0:	10 82       	st	Z, r1
	// set flag to 1
	gyro_flag = 1;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
	
 2a8:	00 00       	nop
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	0f 90       	pop	r0
 2b8:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 2bc:	0f 90       	pop	r0
 2be:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 2c2:	0f 90       	pop	r0
 2c4:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 2c8:	0f 90       	pop	r0
 2ca:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <LSM_gyro_init>:
	// enable global interrupts
	sei();
}

void LSM_gyro_init(void)
{
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
	// set port c pin 6 as an input pin
	PORTC.DIRCLR = PIN6_bm;
 2dc:	80 e4       	ldi	r24, 0x40	; 64
 2de:	96 e0       	ldi	r25, 0x06	; 6
 2e0:	20 e4       	ldi	r18, 0x40	; 64
 2e2:	fc 01       	movw	r30, r24
 2e4:	22 83       	std	Z+2, r18	; 0x02
	
	// set pin 6 as the interrupt pin
	PORTC.INT0MASK = PIN6_bm;
 2e6:	80 e4       	ldi	r24, 0x40	; 64
 2e8:	96 e0       	ldi	r25, 0x06	; 6
 2ea:	20 e4       	ldi	r18, 0x40	; 64
 2ec:	fc 01       	movw	r30, r24
 2ee:	22 87       	std	Z+10, r18	; 0x0a
	
	// set pin interrupt trigger to low level
	PORTC.PIN6CTRL = PORT_ISC_LEVEL_gc;
 2f0:	80 e4       	ldi	r24, 0x40	; 64
 2f2:	96 e0       	ldi	r25, 0x06	; 6
 2f4:	23 e0       	ldi	r18, 0x03	; 3
 2f6:	fc 01       	movw	r30, r24
 2f8:	26 8b       	std	Z+22, r18	; 0x16
	
	// set interrupt level to medium
	PORTC.INTCTRL = PORT_INT0LVL_MED_gc;
 2fa:	80 e4       	ldi	r24, 0x40	; 64
 2fc:	96 e0       	ldi	r25, 0x06	; 6
 2fe:	22 e0       	ldi	r18, 0x02	; 2
 300:	fc 01       	movw	r30, r24
 302:	21 87       	std	Z+9, r18	; 0x09
	
	// enable medium level interrupts
	PMIC.CTRL = PMIC_MEDLVLEN_bm;
 304:	80 ea       	ldi	r24, 0xA0	; 160
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	22 e0       	ldi	r18, 0x02	; 2
 30a:	fc 01       	movw	r30, r24
 30c:	22 83       	std	Z+2, r18	; 0x02
	
	// perform a software reset
	LSM_write(CTRL3_C, 0b00000101); //bit 0 = software reset bit2 = IF_INC default 1
 30e:	65 e0       	ldi	r22, 0x05	; 5
 310:	82 e1       	ldi	r24, 0x12	; 18
 312:	0e 94 9c 01 	call	0x338	; 0x338 <LSM_write>
	
	// enable x y and z values of the accelerometer
	LSM_write(CTRL9_XL, 0b11100000); // 7 = x, 6 = y, 5 = z, 4 = 0 gyroscope
 316:	60 ee       	ldi	r22, 0xE0	; 224
 318:	88 e1       	ldi	r24, 0x18	; 24
 31a:	0e 94 9c 01 	call	0x338	; 0x338 <LSM_write>
	
	// set full scale selection and output data rate
	LSM_write(CTRL2_G, 0b01010000); //7-4 output data rate 3-2 full scale selection
 31e:	60 e5       	ldi	r22, 0x50	; 80
 320:	81 e1       	ldi	r24, 0x11	; 17
 322:	0e 94 9c 01 	call	0x338	; 0x338 <LSM_write>
	
	// enable accelerometer interrupt
	LSM_write(INT1_CTRL, 0b00000010); // bit 1 = gyroscope data ready INT1_DRDY_G
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	8d e0       	ldi	r24, 0x0D	; 13
 32a:	0e 94 9c 01 	call	0x338	; 0x338 <LSM_write>
	
	// enable global interrupts
	sei();
 32e:	78 94       	sei
}
 330:	00 00       	nop
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <LSM_write>:

void LSM_write(uint8_t reg_addr, uint8_t data)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	1f 92       	push	r1
 33e:	1f 92       	push	r1
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	89 83       	std	Y+1, r24	; 0x01
 346:	6a 83       	std	Y+2, r22	; 0x02
	// enable chip select
	PORTF.OUTCLR = PIN4_bm;
 348:	80 ea       	ldi	r24, 0xA0	; 160
 34a:	96 e0       	ldi	r25, 0x06	; 6
 34c:	20 e1       	ldi	r18, 0x10	; 16
 34e:	fc 01       	movw	r30, r24
 350:	26 83       	std	Z+6, r18	; 0x06
	
	// transfer the address with read enabled bit 7 cleared
	spi_write(reg_addr & 0x7F);
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	88 2f       	mov	r24, r24
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	8f 77       	andi	r24, 0x7F	; 127
 35a:	99 27       	eor	r25, r25
 35c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <spi_write>
	
	// transfer the data
	spi_write(data);
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	88 2f       	mov	r24, r24
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <spi_write>
	
	// disable chip select
	PORTF.OUTSET = PIN4_bm;
 36a:	80 ea       	ldi	r24, 0xA0	; 160
 36c:	96 e0       	ldi	r25, 0x06	; 6
 36e:	20 e1       	ldi	r18, 0x10	; 16
 370:	fc 01       	movw	r30, r24
 372:	25 83       	std	Z+5, r18	; 0x05
}
 374:	00 00       	nop
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <LSM_read>:

uint8_t LSM_read(uint8_t reg_addr)
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	1f 92       	push	r1
 386:	1f 92       	push	r1
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	8a 83       	std	Y+2, r24	; 0x02
	// enable chip select
	PORTF.OUTCLR = PIN4_bm;
 38e:	80 ea       	ldi	r24, 0xA0	; 160
 390:	96 e0       	ldi	r25, 0x06	; 6
 392:	20 e1       	ldi	r18, 0x10	; 16
 394:	fc 01       	movw	r30, r24
 396:	26 83       	std	Z+6, r18	; 0x06
	
	// transfer the address with read enabled bit 7 set
	spi_write(reg_addr | 1 << 7);
 398:	8a 81       	ldd	r24, Y+2	; 0x02
 39a:	80 68       	ori	r24, 0x80	; 128
 39c:	88 2f       	mov	r24, r24
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <spi_write>
	
	// save the data transferred
	uint8_t data = spi_read();
 3a4:	0e 94 13 02 	call	0x426	; 0x426 <spi_read>
 3a8:	89 83       	std	Y+1, r24	; 0x01
	
	// disable chip select
	PORTF.OUTSET = PIN4_bm;
 3aa:	80 ea       	ldi	r24, 0xA0	; 160
 3ac:	96 e0       	ldi	r25, 0x06	; 6
 3ae:	20 e1       	ldi	r18, 0x10	; 16
 3b0:	fc 01       	movw	r30, r24
 3b2:	25 83       	std	Z+5, r18	; 0x05
	
	// return data
	return data;
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
}
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <spi_init>:

/*****************************FUNCTION DEFINITIONS*****************************/


void spi_init(void)
{
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
	
  /* Initialize the relevant SPI output signals to be in an "idle" state.
   * Refer to the relevant timing diagram within the LSM6DSL datasheet.
   * (You may wish to utilize the macros defined in `spi.h`.) */
  PORTF.OUTSET = SS_bm | MOSI_bm | SCK_bm;
 3c8:	80 ea       	ldi	r24, 0xA0	; 160
 3ca:	96 e0       	ldi	r25, 0x06	; 6
 3cc:	20 eb       	ldi	r18, 0xB0	; 176
 3ce:	fc 01       	movw	r30, r24
 3d0:	25 83       	std	Z+5, r18	; 0x05

  /* Configure the pin direction of relevant SPI signals. */
  PORTF.DIRSET = MOSI_bm | SCK_bm | SS_bm;
 3d2:	80 ea       	ldi	r24, 0xA0	; 160
 3d4:	96 e0       	ldi	r25, 0x06	; 6
 3d6:	20 eb       	ldi	r18, 0xB0	; 176
 3d8:	fc 01       	movw	r30, r24
 3da:	21 83       	std	Z+1, r18	; 0x01
  PORTF.DIRCLR = MISO_bm;
 3dc:	80 ea       	ldi	r24, 0xA0	; 160
 3de:	96 e0       	ldi	r25, 0x06	; 6
 3e0:	20 e4       	ldi	r18, 0x40	; 64
 3e2:	fc 01       	movw	r30, r24
 3e4:	22 83       	std	Z+2, r18	; 0x02
	
  /* Set the other relevant SPI configurations. */
  SPIF.CTRL	=	SPI_PRESCALER_DIV4_gc		    |
 3e6:	80 ec       	ldi	r24, 0xC0	; 192
 3e8:	9b e0       	ldi	r25, 0x0B	; 11
 3ea:	2c e5       	ldi	r18, 0x5C	; 92
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 83       	st	Z, r18
					    SPI_MASTER_bm	  |
					    SPI_MODE_3_gc         | // polarity high, phase rising edge
					    SPI_ENABLE_bm;
}
 3f0:	00 00       	nop
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <spi_write>:

void spi_write(uint8_t data)
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	1f 92       	push	r1
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	89 83       	std	Y+1, r24	; 0x01
	/* Write to the relevant DATA register. */
	SPIF.DATA = data;
 404:	80 ec       	ldi	r24, 0xC0	; 192
 406:	9b e0       	ldi	r25, 0x0B	; 11
 408:	29 81       	ldd	r18, Y+1	; 0x01
 40a:	fc 01       	movw	r30, r24
 40c:	23 83       	std	Z+3, r18	; 0x03

	/* Wait for relevant transfer to complete. */
	while(!(SPIF.STATUS & 1 << 7));
 40e:	00 00       	nop
 410:	80 ec       	ldi	r24, 0xC0	; 192
 412:	9b e0       	ldi	r25, 0x0B	; 11
 414:	fc 01       	movw	r30, r24
 416:	82 81       	ldd	r24, Z+2	; 0x02
 418:	88 23       	and	r24, r24
 41a:	d4 f7       	brge	.-12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
   * ATxmega128A1U, it would probably make more sense to have some single 
   * function, say `spi_transceive`, that both writes and reads 
   * data, rather than have two functions `spi_write` and `spi_read`,
   * but we will not concern ourselves with this possibility
   * during this semester of the course. */
}
 41c:	00 00       	nop
 41e:	0f 90       	pop	r0
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <spi_read>:

uint8_t spi_read(void)
{
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
  /* Write some arbitrary data to initiate a transfer. */
  SPIF.DATA = 0x37;
 42e:	80 ec       	ldi	r24, 0xC0	; 192
 430:	9b e0       	ldi	r25, 0x0B	; 11
 432:	27 e3       	ldi	r18, 0x37	; 55
 434:	fc 01       	movw	r30, r24
 436:	23 83       	std	Z+3, r18	; 0x03

  /* Wait for relevant transfer to be complete. */
  while(!(SPIF.STATUS & 1 << 7));
 438:	00 00       	nop
 43a:	80 ec       	ldi	r24, 0xC0	; 192
 43c:	9b e0       	ldi	r25, 0x0B	; 11
 43e:	fc 01       	movw	r30, r24
 440:	82 81       	ldd	r24, Z+2	; 0x02
 442:	88 23       	and	r24, r24
 444:	d4 f7       	brge	.-12     	; 0x43a <spi_read+0x14>

  /* After the transmission, return the data that was received. */
  return SPIF.DATA;
 446:	80 ec       	ldi	r24, 0xC0	; 192
 448:	9b e0       	ldi	r25, 0x0B	; 11
 44a:	fc 01       	movw	r30, r24
 44c:	83 81       	ldd	r24, Z+3	; 0x03
}
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <usart_send_gyro>:
}

void usartd0_in_string(char * buf)
{
  /* intentionally left blank */
}
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	00 d0       	rcall	.+0      	; 0x45a <usart_send_gyro+0x6>
 45a:	00 d0       	rcall	.+0      	; 0x45c <usart_send_gyro+0x8>
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	82 e2       	ldi	r24, 0x22	; 34
 462:	0e 94 c0 01 	call	0x380	; 0x380 <LSM_read>
 466:	89 83       	std	Y+1, r24	; 0x01
 468:	83 e2       	ldi	r24, 0x23	; 35
 46a:	0e 94 c0 01 	call	0x380	; 0x380 <LSM_read>
 46e:	8a 83       	std	Y+2, r24	; 0x02
 470:	84 e2       	ldi	r24, 0x24	; 36
 472:	0e 94 c0 01 	call	0x380	; 0x380 <LSM_read>
 476:	8b 83       	std	Y+3, r24	; 0x03
 478:	85 e2       	ldi	r24, 0x25	; 37
 47a:	0e 94 c0 01 	call	0x380	; 0x380 <LSM_read>
 47e:	8c 83       	std	Y+4, r24	; 0x04
 480:	86 e2       	ldi	r24, 0x26	; 38
 482:	0e 94 c0 01 	call	0x380	; 0x380 <LSM_read>
 486:	8d 83       	std	Y+5, r24	; 0x05
 488:	87 e2       	ldi	r24, 0x27	; 39
 48a:	0e 94 c0 01 	call	0x380	; 0x380 <LSM_read>
 48e:	8e 83       	std	Y+6, r24	; 0x06
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	0e 94 61 02 	call	0x4c2	; 0x4c2 <usart_out>
 496:	8a 81       	ldd	r24, Y+2	; 0x02
 498:	0e 94 61 02 	call	0x4c2	; 0x4c2 <usart_out>
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <usart_out>
 4a2:	8c 81       	ldd	r24, Y+4	; 0x04
 4a4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <usart_out>
 4a8:	8d 81       	ldd	r24, Y+5	; 0x05
 4aa:	0e 94 61 02 	call	0x4c2	; 0x4c2 <usart_out>
 4ae:	8e 81       	ldd	r24, Y+6	; 0x06
 4b0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <usart_out>
 4b4:	00 00       	nop
 4b6:	26 96       	adiw	r28, 0x06	; 6
 4b8:	cd bf       	out	0x3d, r28	; 61
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <usart_out>:
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	1f 92       	push	r1
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 4cc:	89 83       	std	Y+1, r24	; 0x01
 4ce:	00 00       	nop
 4d0:	80 ea       	ldi	r24, 0xA0	; 160
 4d2:	99 e0       	ldi	r25, 0x09	; 9
 4d4:	fc 01       	movw	r30, r24
 4d6:	81 81       	ldd	r24, Z+1	; 0x01
 4d8:	88 2f       	mov	r24, r24
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	80 72       	andi	r24, 0x20	; 32
 4de:	99 27       	eor	r25, r25
 4e0:	89 2b       	or	r24, r25
 4e2:	b1 f3       	breq	.-20     	; 0x4d0 <usart_out+0xe>
 4e4:	80 ea       	ldi	r24, 0xA0	; 160
 4e6:	99 e0       	ldi	r25, 0x09	; 9
 4e8:	29 81       	ldd	r18, Y+1	; 0x01
 4ea:	fc 01       	movw	r30, r24
 4ec:	20 83       	st	Z, r18
 4ee:	00 00       	nop
 4f0:	0f 90       	pop	r0
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <usartd0_init>:

void usartd0_init(void)
{
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
  /* Configure relevant TxD and RxD pins. */
	PORTD.OUTSET = PIN3_bm;
 500:	80 e6       	ldi	r24, 0x60	; 96
 502:	96 e0       	ldi	r25, 0x06	; 6
 504:	28 e0       	ldi	r18, 0x08	; 8
 506:	fc 01       	movw	r30, r24
 508:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 50a:	80 e6       	ldi	r24, 0x60	; 96
 50c:	96 e0       	ldi	r25, 0x06	; 6
 50e:	28 e0       	ldi	r18, 0x08	; 8
 510:	fc 01       	movw	r30, r24
 512:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 514:	80 e6       	ldi	r24, 0x60	; 96
 516:	96 e0       	ldi	r25, 0x06	; 6
 518:	24 e0       	ldi	r18, 0x04	; 4
 51a:	fc 01       	movw	r30, r24
 51c:	22 83       	std	Z+2, r18	; 0x02

  /* Configure baud rate. */
	USARTD0.BAUDCTRLA = (uint8_t)BSEL;
 51e:	80 ea       	ldi	r24, 0xA0	; 160
 520:	99 e0       	ldi	r25, 0x09	; 9
 522:	25 e0       	ldi	r18, 0x05	; 5
 524:	fc 01       	movw	r30, r24
 526:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((BSCALE << 4)|(BSEL >> 8));
 528:	80 ea       	ldi	r24, 0xA0	; 160
 52a:	99 e0       	ldi	r25, 0x09	; 9
 52c:	20 ea       	ldi	r18, 0xA0	; 160
 52e:	fc 01       	movw	r30, r24
 530:	27 83       	std	Z+7, r18	; 0x07

  /* Configure remainder of serial protocol. */
  /* (In this example, a protocol with 8 data bits, no parity, and
   *  one stop bit is chosen.) */
	USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |
 532:	80 ea       	ldi	r24, 0xA0	; 160
 534:	99 e0       	ldi	r25, 0x09	; 9
 536:	23 e0       	ldi	r18, 0x03	; 3
 538:	fc 01       	movw	r30, r24
 53a:	25 83       	std	Z+5, r18	; 0x05
					 USART_PMODE_DISABLED_gc  	 |
					 USART_CHSIZE_8BIT_gc)       &
					~USART_SBMODE_bm;

  /* Enable receiver and/or transmitter systems. */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 53c:	80 ea       	ldi	r24, 0xA0	; 160
 53e:	99 e0       	ldi	r25, 0x09	; 9
 540:	28 e1       	ldi	r18, 0x18	; 24
 542:	fc 01       	movw	r30, r24
 544:	24 83       	std	Z+4, r18	; 0x04

  /* Enable interrupt (optional). */
	/* USARTD0.CTRLA = USART_RXCINTLVL_MED_gc; */
}
 546:	00 00       	nop
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <_exit>:
 54e:	f8 94       	cli

00000550 <__stop_program>:
 550:	ff cf       	rjmp	.-2      	; 0x550 <__stop_program>
